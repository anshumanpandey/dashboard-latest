using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Reflection;
using NHS.Common;
using NHS.Common.DTO;


namespace NHS.Data
{
    public class DBEngine
    {
        private static SqlConnection _connection = null;
        private static SqlCommand command = null;
        private string connectionString = string.Empty;
        public DBEngine(string connectionString) { this.connectionString = connectionString; }

        private SqlConnection GetConnection()
        {
            if (_connection == null)
                _connection = new SqlConnection(connectionString);
            else if (_connection.State == ConnectionState.Closed)
                _connection.ConnectionString = connectionString;

            if (_connection.State != ConnectionState.Open)
                _connection.Open();
            return _connection;
        }        

        public int UpdateCOVIDLevelOfCare(string patientID, bool ituLevel1, bool ituLevel2, bool ituLevel3, bool infectionDiseaseUnitBed, bool otherbed, int userID)
        {
            //var connection = GetConnection();
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19LevelOfCare", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientID);
                    dbCommand.Parameters.AddWithValue("@ITULevel1", ituLevel1);
                    dbCommand.Parameters.AddWithValue("@ITULevel2", ituLevel2);
                    dbCommand.Parameters.AddWithValue("@ITULevel3", ituLevel3);
                    dbCommand.Parameters.AddWithValue("@InfectionDiseaseUnitBed", infectionDiseaseUnitBed);
                    dbCommand.Parameters.AddWithValue("@OtherBeds", otherbed);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDLevelOfCare", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDBedType(int? patientID, bool ituLevel1, bool ituLevel2, bool ituLevel3,
            bool infectionDiseaseUnitBed, bool otherbed, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVIDBedType", connection);
                connection.Open();

                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Patient_ID", patientID);
                    dbCommand.Parameters.AddWithValue("@ITULevel1", ituLevel1);
                    dbCommand.Parameters.AddWithValue("@ITULevel2", ituLevel2);
                    dbCommand.Parameters.AddWithValue("@ITULevel3", ituLevel3);
                    dbCommand.Parameters.AddWithValue("@InfectionDiseaseUnitBed", infectionDiseaseUnitBed);
                    dbCommand.Parameters.AddWithValue("@OtherBeds", otherbed);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDBedType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDBreathing(string patientID, bool isoxygen, bool isnooxygen, bool isnonevasiveventilation, bool mechanicalventilation, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19Breathing", connection);

                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientID);
                    dbCommand.Parameters.AddWithValue("@IsOxygen", isoxygen);
                    dbCommand.Parameters.AddWithValue("@IsNoOxygen", isnooxygen);
                    dbCommand.Parameters.AddWithValue("@IsNonInvasiveVentilation", isnonevasiveventilation);
                    dbCommand.Parameters.AddWithValue("@IsMechanicalVentilation", mechanicalventilation);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDBreathing", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDTestResults(int? patientID, bool covidStatusKnown, string testresult, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19TestResult", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Test_ID", patientID);
                    dbCommand.Parameters.AddWithValue("@CovidStatusKnown", covidStatusKnown);
                    if (string.IsNullOrEmpty(testresult))
                        testresult = "";
                    dbCommand.Parameters.AddWithValue("@TestResult", testresult);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDTestResults", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDComms(int testID, bool isnone, bool ispositivewardcontacted, bool ispositivepatientcontacted,bool isnegativelettersent, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19Comms", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Test_ID", testID);
                    dbCommand.Parameters.AddWithValue("@IsNone", isnone);
                    dbCommand.Parameters.AddWithValue("@IsPositiveWardContacted", ispositivewardcontacted);
                    dbCommand.Parameters.AddWithValue("@IsPositivePatientContacted", ispositivepatientcontacted);
                    dbCommand.Parameters.AddWithValue("@IsNegativeLetterSent", isnegativelettersent);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDComms", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDCHESSComms(string patientID, bool ischesscontacted, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19CHESSComms", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientID);
                    dbCommand.Parameters.AddWithValue("@IsChessContacted", ischesscontacted);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDCHESSComms", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDLOCComms(string patientID, bool islevelofcareupdated, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19LOCComms", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientID);
                    dbCommand.Parameters.AddWithValue("@IsLevelOfCareUpdated", islevelofcareupdated);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDLOCComms", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDDischargeDeathComms(string patientID, bool isdischargedeathcontacted, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19DischargeDeathComms", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientID);
                    dbCommand.Parameters.AddWithValue("@IsDichargeDeathContacted", isdischargedeathcontacted);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDDischargeDeathComms", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDCPNSComms(string patientID, bool iscpnscontacted, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19CPNSComms", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientID);
                    dbCommand.Parameters.AddWithValue("@CPNSContacted", iscpnscontacted);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDCPNSComms", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDExternalComms(int? patientID, bool IsCPNSContacted, bool IsLevelOfCareUpdated, bool IsCHESSContacted, string LevelOfCareComments,string CHESSComments, string CPNSComments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19ExternalComms", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@IsCPNSContacted", IsCPNSContacted);
                    dbCommand.Parameters.AddWithValue("@IsLevelOfCareUpdated", IsLevelOfCareUpdated);
                    dbCommand.Parameters.AddWithValue("@IsCHESSContacted", IsCHESSContacted);
                    dbCommand.Parameters.AddWithValue("@LevelOfCareComments", LevelOfCareComments);
                    dbCommand.Parameters.AddWithValue("@CHESSComments", CHESSComments);
                    dbCommand.Parameters.AddWithValue("@CPNSComments", CPNSComments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDExternalComms", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCOVIDDataAssurance(int? patientID, bool isdisabled, string dacomments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCOVID19DataAssurance", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Test_ID", patientID);
                    dbCommand.Parameters.AddWithValue("@IsDisabled", isdisabled);
                    dbCommand.Parameters.AddWithValue("@DAComments", dacomments);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCOVIDDataAssurance", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public COVIDTestResultsComplexDTO GetCOVIDTestResults(int? patientID, int userID)
        {            
            IDataReader dbReader = null;
            COVIDTestResultsComplexDTO testresultsdto = new COVIDTestResultsComplexDTO();
            List<COVIDTestHistory> lstTestHistory = new List<COVIDTestHistory>();
            COVIDTestResults testresults = new COVIDTestResults();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19TestResultsByID", connection);
                connection.Open();
                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(patientID.ToString()))
                        dbCmd.Parameters.AddWithValue("@Test_ID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@Test_ID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        COVIDTestHistory history = new COVIDTestHistory();
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            history.ID = 0;
                        else
                            history.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["Patient_ID"].ToString()))
                            history.Test_ID = 0;
                        else
                            history.Test_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            history.PatientID = "0";
                        else
                            history.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            history.PatientName = "0";
                        else
                            history.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            history.SpellNumber = "";
                        else
                            history.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            history.Age = "0";
                        else
                            history.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            history.Gender = "UnKnown";
                        else
                            history.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["Clinical_Display_Line"].ToString()))
                            history.Clinical_Display_Line = "0";
                        else
                            history.Clinical_Display_Line = Convert.ToString(dbReader["Clinical_Display_Line"]);
                        if (string.IsNullOrEmpty(dbReader["Encounter_Type_Des"].ToString()))
                            history.Encounter_Type_Des = "";
                        else
                            history.Encounter_Type_Des = Convert.ToString(dbReader["Encounter_Type_Des"]);
                        if (string.IsNullOrEmpty(dbReader["COVID_Diagnosis"].ToString()))
                            history.COVID_Diagnosis = "";
                        else
                            history.COVID_Diagnosis = Convert.ToString(dbReader["COVID_Diagnosis"]);
                        if (string.IsNullOrEmpty(dbReader["COVID_Problem"].ToString()))
                            history.COVID_Problem = "";
                        else
                            history.COVID_Problem = Convert.ToString(dbReader["COVID_Problem"]);
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            history.TestResultDateTime = "";
                        else
                            history.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["OrderDateTime"].ToString()))
                            history.OrderDateTime = "";
                        else
                            history.OrderDateTime = Convert.ToDateTime(dbReader["OrderDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TestStatus"].ToString()))
                            history.TestStatus = "";
                        else
                            history.TestStatus = Convert.ToString(dbReader["TestStatus"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            history.TestResult = "";
                        else
                            history.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["DQ"].ToString()))
                            history.DQ = 0;
                        else
                            history.DQ = Convert.ToInt32(dbReader["DQ"]);
                        if (string.IsNullOrEmpty(dbReader["Notified"].ToString()))
                            history.Notified = 0;
                        else
                            history.Notified = Convert.ToInt32(dbReader["Notified"]);
                        if (string.IsNullOrEmpty(dbReader["IsDisabled"].ToString()))
                            history.IsDisabled = false;
                        else
                            history.IsDisabled = Convert.ToBoolean(dbReader["IsDisabled"]);
                        lstTestHistory.Add(history);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                                testresults.ID = 0;
                            else
                                testresults.ID = Convert.ToInt32(dbReader["ID"]);
                            if (string.IsNullOrEmpty(dbReader["Patient_ID"].ToString()))
                                testresults.Test_ID = 0;
                            else
                                testresults.Test_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                                testresults.PatientID = "0";
                            else
                                testresults.PatientID = Convert.ToString(dbReader["PatientID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                                testresults.PatientName = "";
                            else
                                testresults.PatientName = Convert.ToString(dbReader["PatientName"]);
                            if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                                testresults.TestResult = "";
                            else
                                testresults.TestResult = Convert.ToString(dbReader["TestResult"]);
                            if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                                testresults.SpellNumber = "";
                            else
                                testresults.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                            if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                                testresults.Age = "0";
                            else
                                testresults.Age = Convert.ToString(dbReader["Age"]);
                            if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                                testresults.Gender = "Unknown";
                            else
                                testresults.Gender = Convert.ToString(dbReader["Gender"]);
                            if (string.IsNullOrEmpty(dbReader["COVIDStatusKnown"].ToString()))
                                testresults.COVIDStatusKnown = false;
                            else
                                testresults.COVIDStatusKnown = Convert.ToBoolean(dbReader["COVIDStatusKnown"]);
                            if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                                testresults.UpdatedBy = "";
                            else
                                testresults.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                            if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                                testresults.UpdatedDate = "";
                            else
                                testresults.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["OrderDateTime"].ToString()))
                                testresults.OrderDateTime = "";
                            else
                                testresults.OrderDateTime = Convert.ToDateTime(dbReader["OrderDateTime"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["Comments"].ToString()))
                                testresults.Comments = "";
                            else
                                testresults.Comments = Convert.ToString(dbReader["Comments"]);
                        }
                    }
                    testresultsdto.LstTestHistory = lstTestHistory;
                    testresultsdto.TestResults = testresults;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDTestResults", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return testresultsdto;
        }

        public COVIDLevelOfCare GetCOVIDLevelOfCare(string id, int userID)
        {
            IDataReader dbReader = null;
            COVIDLevelOfCare levelofcare = new COVIDLevelOfCare();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19LevelOfCareByID", connection);
                connection.Open();

                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(id.ToString()))
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            levelofcare.ID = 0;
                        else
                            levelofcare.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            levelofcare.PatientID = "0";
                        else
                            levelofcare.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            levelofcare.SpellNumber = "";
                        else
                            levelofcare.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            levelofcare.Age = "0";
                        else
                            levelofcare.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            levelofcare.Gender = "UnKnown";
                        else
                            levelofcare.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            levelofcare.PatientName = "0";
                        else
                            levelofcare.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            levelofcare.TestResult = "Pending";
                        else
                            levelofcare.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["ITULevel1"].ToString()))
                            levelofcare.ITULevel1 = false;
                        else
                            levelofcare.ITULevel1 = Convert.ToBoolean(dbReader["ITULevel1"]);
                        if (string.IsNullOrEmpty(dbReader["ITULevel2"].ToString()))
                            levelofcare.ITULevel2 = false;
                        else
                            levelofcare.ITULevel2 = Convert.ToBoolean(dbReader["ITULevel2"]);
                        if (string.IsNullOrEmpty(dbReader["ITULevel3"].ToString()))
                            levelofcare.ITULevel3 = false;
                        else
                            levelofcare.ITULevel3 = Convert.ToBoolean(dbReader["ITULevel3"]);
                        if (string.IsNullOrEmpty(dbReader["InfectionDiseaseUnitBed"].ToString()))
                            levelofcare.InfectionDiseaseUnitBed = false;
                        else
                            levelofcare.InfectionDiseaseUnitBed = Convert.ToBoolean(dbReader["InfectionDiseaseUnitBed"]);
                        if (string.IsNullOrEmpty(dbReader["OtherBeds"].ToString()))
                            levelofcare.OtherBeds = false;
                        else
                            levelofcare.OtherBeds = Convert.ToBoolean(dbReader["OtherBeds"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                            levelofcare.UpdatedBy = "";
                        else
                            levelofcare.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                            levelofcare.UpdatedDate = "";
                        else
                            levelofcare.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDLevelOfCare", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDComms GetCOVIDComms(int testID, int userID)
        {
            IDataReader dbReader = null;
            COVIDComms levelofcare = new COVIDComms();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19Comms", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(testID.ToString()))
                        dbCmd.Parameters.AddWithValue("@Test_ID", testID);
                    else
                        dbCmd.Parameters.AddWithValue("@Test_ID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                            levelofcare.Test_ID = 0;
                        else
                            levelofcare.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            levelofcare.PatientID = "0";
                        else
                            levelofcare.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            levelofcare.PatientName = "0";
                        else
                            levelofcare.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            levelofcare.SpellNumber = "";
                        else
                            levelofcare.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            levelofcare.Age = "0";
                        else
                            levelofcare.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            levelofcare.Gender = "UnKnown";
                        else
                            levelofcare.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            levelofcare.TestResult = "Pending";
                        else
                            levelofcare.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["IsNone"].ToString()))
                            levelofcare.IsNone = false;
                        else
                            levelofcare.IsNone = Convert.ToBoolean(dbReader["IsNone"]);
                        if (string.IsNullOrEmpty(dbReader["IsPositivePatientContacted"].ToString()))
                            levelofcare.IsPositivePatientContacted = false;
                        else
                            levelofcare.IsPositivePatientContacted = Convert.ToBoolean(dbReader["IsPositivePatientContacted"]);
                        if (string.IsNullOrEmpty(dbReader["IsPositiveWardContacted"].ToString()))
                            levelofcare.IsPositiveWardContacted = false;
                        else
                            levelofcare.IsPositiveWardContacted = Convert.ToBoolean(dbReader["IsPositiveWardContacted"]);
                        if (string.IsNullOrEmpty(dbReader["IsNegativeLetterSent"].ToString()))
                            levelofcare.IsNegativeLetterSent = false;
                        else
                            levelofcare.IsNegativeLetterSent = Convert.ToBoolean(dbReader["IsNegativeLetterSent"]);
                        if (string.IsNullOrEmpty(dbReader["Comments"].ToString()))
                            levelofcare.Comments = "";
                        else
                            levelofcare.Comments = Convert.ToString(dbReader["Comments"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                            levelofcare.UpdatedBy = "";
                        else
                            levelofcare.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                            levelofcare.UpdatedDate = "";
                        else
                            levelofcare.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDComms", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDExternalCommsComplexDTO GetCOVIDExternalComms(string patientID, int userID)
        {
            IDataReader dbReader = null;
            COVIDExternalCommsComplexDTO externalcomms = new COVIDExternalCommsComplexDTO();
            COVIDCHESSComms chesscomms = new COVIDCHESSComms();
            COVIDLevelOfCareComms loccomms = new COVIDLevelOfCareComms();
            COVIDDischargeDeathComms deathcomms = new COVIDDischargeDeathComms();
            List<COVIDLOCCommsAuditTrail> locaudittrail = new List<COVIDLOCCommsAuditTrail>();
            COVIDCPNSComms cpnscomms = new COVIDCPNSComms();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19ExternalComms", connection);
                connection.Open();

                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(patientID.ToString()))
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                            chesscomms.Test_ID = 0;
                        else
                            chesscomms.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            chesscomms.PatientID = "0";
                        else
                            chesscomms.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            chesscomms.PatientName = "0";
                        else
                            chesscomms.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            chesscomms.SpellNumber = "";
                        else
                            chesscomms.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            chesscomms.Age = "0";
                        else
                            chesscomms.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            chesscomms.Gender = "UnKnown";
                        else
                            chesscomms.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            chesscomms.TestResult = "Pending";
                        else
                            chesscomms.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["IsCHESSContacted"].ToString()))
                            chesscomms.IsCHESSContacted = false;
                        else
                            chesscomms.IsCHESSContacted = Convert.ToBoolean(dbReader["IsCHESSContacted"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSComments"].ToString()))
                            chesscomms.CHESSComments = "";
                        else
                            chesscomms.CHESSComments = Convert.ToString(dbReader["CHESSComments"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                            chesscomms.UpdatedDate = "";
                        else
                            chesscomms.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                            chesscomms.DateofDeath = "";
                        else
                            chesscomms.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                            chesscomms.UpdatedBy = "";
                        else
                            chesscomms.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                                loccomms.Test_ID = 0;
                            else
                                loccomms.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                                loccomms.PatientID = "0";
                            else
                                loccomms.PatientID = Convert.ToString(dbReader["PatientID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                                loccomms.PatientName = "0";
                            else
                                loccomms.PatientName = Convert.ToString(dbReader["PatientName"]);
                            if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                                loccomms.SpellNumber = "";
                            else
                                loccomms.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                            if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                                loccomms.Age = "0";
                            else
                                loccomms.Age = Convert.ToString(dbReader["Age"]);
                            if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                                loccomms.Gender = "UnKnown";
                            else
                                loccomms.Gender = Convert.ToString(dbReader["Gender"]);
                            if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                                loccomms.TestResult = "Pending";
                            else
                                loccomms.TestResult = Convert.ToString(dbReader["TestResult"]);
                            if (string.IsNullOrEmpty(dbReader["IsLevelOfCareUpdated"].ToString()))
                                loccomms.IsLevelOfCareUpdated = false;
                            else
                                loccomms.IsLevelOfCareUpdated = Convert.ToBoolean(dbReader["IsLevelOfCareUpdated"]);
                            if (string.IsNullOrEmpty(dbReader["LOCComments"].ToString()))
                                loccomms.LOCComments = "";
                            else
                                loccomms.LOCComments = Convert.ToString(dbReader["LOCComments"]);
                            if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                                loccomms.DateofDeath = "";
                            else
                                loccomms.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                                loccomms.UpdatedDate = "";
                            else
                                loccomms.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                                loccomms.UpdatedBy = "";
                            else
                                loccomms.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                                deathcomms.Test_ID = 0;
                            else
                                deathcomms.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                                deathcomms.PatientID = "0";
                            else
                                deathcomms.PatientID = Convert.ToString(dbReader["PatientID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                                deathcomms.PatientName = "0";
                            else
                                deathcomms.PatientName = Convert.ToString(dbReader["PatientName"]);
                            if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                                deathcomms.SpellNumber = "";
                            else
                                deathcomms.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                            if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                                deathcomms.Age = "0";
                            else
                                deathcomms.Age = Convert.ToString(dbReader["Age"]);
                            if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                                deathcomms.Gender = "UnKnown";
                            else
                                deathcomms.Gender = Convert.ToString(dbReader["Gender"]);
                            if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                                deathcomms.TestResult = "Pending";
                            else
                                deathcomms.TestResult = Convert.ToString(dbReader["TestResult"]);
                            if (string.IsNullOrEmpty(dbReader["IsDichargeDeathContacted"].ToString()))
                                deathcomms.IsDichargeDeathContacted = false;
                            else
                                deathcomms.IsDichargeDeathContacted = Convert.ToBoolean(dbReader["IsDichargeDeathContacted"]);
                            if (string.IsNullOrEmpty(dbReader["DischargeDeathComments"].ToString()))
                                deathcomms.DischargeDeathComments = "";
                            else
                                deathcomms.DischargeDeathComments = Convert.ToString(dbReader["DischargeDeathComments"]);
                            if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                                deathcomms.DateofDeath = "";
                            else
                                deathcomms.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                                deathcomms.UpdatedDate = "";
                            else
                                deathcomms.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                                deathcomms.UpdatedBy = "";
                            else
                                deathcomms.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            COVIDLOCCommsAuditTrail audittrail = new COVIDLOCCommsAuditTrail();
                            if (string.IsNullOrEmpty(dbReader["LevelOfCareUpdated"].ToString()))
                                audittrail.LevelOfCareUpdated = "";
                            else
                                audittrail.LevelOfCareUpdated = Convert.ToString(dbReader["LevelOfCareUpdated"]);
                            if (string.IsNullOrEmpty(dbReader["LOCComments"].ToString()))
                                audittrail.LOCComments = "";
                            else
                                audittrail.LOCComments = Convert.ToString(dbReader["LOCComments"]);
                            if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                                audittrail.UpdatedDate = "";
                            else
                                audittrail.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                                audittrail.UpdatedBy = "";
                            else
                                audittrail.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                            locaudittrail.Add(audittrail);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                                cpnscomms.Test_ID = 0;
                            else
                                cpnscomms.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                            if (string.IsNullOrEmpty(dbReader["ME_COVID_DEATH"].ToString()))
                                cpnscomms.ME_COVID_DEATH = 0;
                            else
                                cpnscomms.ME_COVID_DEATH = Convert.ToInt32(dbReader["ME_COVID_DEATH"]);
                            if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                                cpnscomms.PatientID = "0";
                            else
                                cpnscomms.PatientID = Convert.ToString(dbReader["PatientID"]);
                            if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                                cpnscomms.PatientName = "0";
                            else
                                cpnscomms.PatientName = Convert.ToString(dbReader["PatientName"]);
                            if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                                cpnscomms.SpellNumber = "";
                            else
                                cpnscomms.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                            if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                                cpnscomms.Age = "0";
                            else
                                cpnscomms.Age = Convert.ToString(dbReader["Age"]);
                            if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                                cpnscomms.Gender = "UnKnown";
                            else
                                cpnscomms.Gender = Convert.ToString(dbReader["Gender"]);
                            if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                                cpnscomms.TestResult = "Pending";
                            else
                                cpnscomms.TestResult = Convert.ToString(dbReader["TestResult"]);
                            if (string.IsNullOrEmpty(dbReader["IsCPNSContacted"].ToString()))
                                cpnscomms.IsCPNSContacted = false;
                            else
                                cpnscomms.IsCPNSContacted = Convert.ToBoolean(dbReader["IsCPNSContacted"]);
                            if (string.IsNullOrEmpty(dbReader["CPNSComments"].ToString()))
                                cpnscomms.CPNSComments = "";
                            else
                                cpnscomms.CPNSComments = Convert.ToString(dbReader["CPNSComments"]);
                            if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                                cpnscomms.DateofDeath = "";
                            else
                                cpnscomms.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                                cpnscomms.UpdatedDate = "";
                            else
                                cpnscomms.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                            if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                                cpnscomms.UpdatedBy = "";
                            else
                                cpnscomms.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        }
                    }
                    externalcomms.CovidChessComms = chesscomms;
                    externalcomms.CovidChessLOCComms = loccomms;
                    externalcomms.CovidLOCCommsAuditTrail = locaudittrail;
                    externalcomms.CovidDischargeDeathComms = deathcomms;
                    externalcomms.CovidCpnsComms = cpnscomms;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDExternalComms", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return externalcomms;
        }

        public BreathingSupportReport GetCOVIDBreathingSupportReport(int pageIndex, int pageSize, string sortcolumn, string sorttype, string TestResult, int userID)
        {
            IDataReader dbReader = null;
            BreathingSupportReport breathingreport = new BreathingSupportReport();
            List<BreathingSupportTracker> lstbreathingtracker = new List<BreathingSupportTracker>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVIDBreathingSupportReport", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(pageIndex.ToString()))
                        dbCmd.Parameters.AddWithValue("@PageIndex", pageIndex);
                    else
                        dbCmd.Parameters.AddWithValue("@PageIndex", 1);
                    if (!string.IsNullOrEmpty(pageSize.ToString()))
                        dbCmd.Parameters.AddWithValue("@PageSize", pageSize);
                    else
                        dbCmd.Parameters.AddWithValue("@PageSize", 50);
                    if (!string.IsNullOrEmpty(sortcolumn.ToString()))
                        dbCmd.Parameters.AddWithValue("@OrderColumn", sortcolumn);
                    else
                        dbCmd.Parameters.AddWithValue("@OrderColumn", "");
                    if (!string.IsNullOrEmpty(sorttype.ToString()))
                        dbCmd.Parameters.AddWithValue("@SortType", sorttype);
                    else
                        dbCmd.Parameters.AddWithValue("@SortType", "");
                    if (!string.IsNullOrEmpty(TestResult.ToString()))
                        dbCmd.Parameters.AddWithValue("@TestResult", TestResult);
                    else
                        dbCmd.Parameters.AddWithValue("@TestResult", "0");

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["TotalCurrentIP"].ToString()))
                            breathingreport.TotalCurrentIP = 0;
                        else
                            breathingreport.TotalCurrentIP = Convert.ToInt32(dbReader["TotalCurrentIP"]);
                        if (string.IsNullOrEmpty(dbReader["NotUpdatedLast20HoursPercentage"].ToString()))
                            breathingreport.NotUpdatedLast20HoursPercentage = 0;
                        else
                            breathingreport.NotUpdatedLast20HoursPercentage = Convert.ToDecimal(dbReader["NotUpdatedLast20HoursPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["NotUpdatedLast12HoursPercentage"].ToString()))
                            breathingreport.NotUpdatedLast12HoursPercentage = 0;
                        else
                            breathingreport.NotUpdatedLast12HoursPercentage = Convert.ToDecimal(dbReader["NotUpdatedLast12HoursPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedLast12HoursPercentage"].ToString()))
                            breathingreport.UpdatedLast12HoursPercentage = 0;
                        else
                            breathingreport.UpdatedLast12HoursPercentage = Convert.ToDecimal(dbReader["UpdatedLast12HoursPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["TotalIsOxygenPercentage"].ToString()))
                            breathingreport.TotalIsOxygenPercentage = 0;
                        else
                            breathingreport.TotalIsOxygenPercentage = Convert.ToDecimal(dbReader["TotalIsOxygenPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["TotalIsNoOxygenPercentage"].ToString()))
                            breathingreport.TotalIsNoOxygenPercentage = 0;
                        else
                            breathingreport.TotalIsNoOxygenPercentage = Convert.ToDecimal(dbReader["TotalIsNoOxygenPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["TotalIsNonEvasiveVentilationPercentage"].ToString()))
                            breathingreport.TotalIsNonEvasiveVentilationPercentage = 0;
                        else
                            breathingreport.TotalIsNonEvasiveVentilationPercentage = Convert.ToDecimal(dbReader["TotalIsNonEvasiveVentilationPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["TotalIsMechanicalVentilationPercentage"].ToString()))
                            breathingreport.TotalIsMechanicalVentilationPercentage = 0;
                        else
                            breathingreport.TotalIsMechanicalVentilationPercentage = Convert.ToDecimal(dbReader["TotalIsMechanicalVentilationPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["TotalBreathingNotUpdatedPercentage"].ToString()))
                            breathingreport.TotalBreathingNotUpdatedPercentage = 0;
                        else
                            breathingreport.TotalBreathingNotUpdatedPercentage = Convert.ToDecimal(dbReader["TotalBreathingNotUpdatedPercentage"]);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            BreathingSupportTracker tracker = new BreathingSupportTracker();
                            if (string.IsNullOrEmpty(dbReader["TotalRecords"].ToString()))
                                tracker.TotalRecords = 0;
                            else
                                tracker.TotalRecords = Convert.ToInt32(dbReader["TotalRecords"]);
                            if (string.IsNullOrEmpty(dbReader["CurrentIPCount"].ToString()))
                                tracker.CurrentIPCount = 0;
                            else
                                tracker.CurrentIPCount = Convert.ToInt32(dbReader["CurrentIPCount"]);
                            if (string.IsNullOrEmpty(dbReader["NotUpdatedLast20HoursCount"].ToString()))
                                tracker.NotUpdatedLast20HoursCount = 0;
                            else
                                tracker.NotUpdatedLast20HoursCount = Convert.ToInt32(dbReader["NotUpdatedLast20HoursCount"]);
                            if (string.IsNullOrEmpty(dbReader["NotUpdatedLast12HoursCount"].ToString()))
                                tracker.NotUpdatedLast12HoursCount = 0;
                            else
                                tracker.NotUpdatedLast12HoursCount = Convert.ToInt32(dbReader["NotUpdatedLast12HoursCount"]);
                            if (string.IsNullOrEmpty(dbReader["UpdatedLast12HoursCount"].ToString()))
                                tracker.UpdatedLast12HoursCount = 0;
                            else
                                tracker.UpdatedLast12HoursCount = Convert.ToInt32(dbReader["UpdatedLast12HoursCount"]);
                            if (string.IsNullOrEmpty(dbReader["Oxygen"].ToString()))
                                tracker.Oxygen = 0;
                            else
                                tracker.Oxygen = Convert.ToInt32(dbReader["Oxygen"]);
                            if (string.IsNullOrEmpty(dbReader["NoOxygen"].ToString()))
                                tracker.NoOxygen = 0;
                            else
                                tracker.NoOxygen = Convert.ToInt32(dbReader["NoOxygen"]);
                            if (string.IsNullOrEmpty(dbReader["NonInvasiveVentilation"].ToString()))
                                tracker.NonInvasiveVentilation = 0;
                            else
                                tracker.NonInvasiveVentilation = Convert.ToInt32(dbReader["NonInvasiveVentilation"]);
                            if (string.IsNullOrEmpty(dbReader["MechanicalVentilation"].ToString()))
                                tracker.MechanicalVentilation = 0;
                            else
                                tracker.MechanicalVentilation = Convert.ToInt32(dbReader["MechanicalVentilation"]);
                            if (string.IsNullOrEmpty(dbReader["NotUpdatedAtAll"].ToString()))
                                tracker.NotUpdatedAtAll = 0;
                            else
                                tracker.NotUpdatedAtAll = Convert.ToInt32(dbReader["NotUpdatedAtAll"]);
                            if (string.IsNullOrEmpty(dbReader["LastPatientLocation"].ToString()))
                                tracker.LastPatientLocation = "";
                            else
                                tracker.LastPatientLocation = Convert.ToString(dbReader["LastPatientLocation"]);
                            lstbreathingtracker.Add(tracker);
                        }
                    }
                    breathingreport.BreathingTracker = lstbreathingtracker;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDBreathingSupportReport", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return breathingreport;
        }

        public COVIDBreathingSupport GetCOVIDBreathingSupport(string id, int userID)
        {
            IDataReader dbReader = null;
            COVIDBreathingSupport levelofcare = new COVIDBreathingSupport();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19BreathingSupport", connection);
                connection.Open();

                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(id.ToString()))
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            levelofcare.ID = 0;
                        else
                            levelofcare.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            levelofcare.PatientID = "0";
                        else
                            levelofcare.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            levelofcare.PatientName = "0";
                        else
                            levelofcare.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            levelofcare.SpellNumber = "";
                        else
                            levelofcare.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            levelofcare.Age = "0";
                        else
                            levelofcare.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            levelofcare.Gender = "UnKnown";
                        else
                            levelofcare.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            levelofcare.TestResult = "Pending";
                        else
                            levelofcare.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["IsOxygen"].ToString()))
                            levelofcare.IsOxygen = false;
                        else
                            levelofcare.IsOxygen = Convert.ToBoolean(dbReader["IsOxygen"]);
                        if (string.IsNullOrEmpty(dbReader["IsNoOxygen"].ToString()))
                            levelofcare.IsNoOxygen = false;
                        else
                            levelofcare.IsNoOxygen = Convert.ToBoolean(dbReader["IsNoOxygen"]);
                        if (string.IsNullOrEmpty(dbReader["IsNonEvasiveVentilation"].ToString()))
                            levelofcare.IsNonEvasiveVentilation = false;
                        else
                            levelofcare.IsNonEvasiveVentilation = Convert.ToBoolean(dbReader["IsNonEvasiveVentilation"]);
                        if (string.IsNullOrEmpty(dbReader["IsMechanicalVentilation"].ToString()))
                            levelofcare.IsMechanicalVentilation = false;
                        else
                            levelofcare.IsMechanicalVentilation = Convert.ToBoolean(dbReader["IsMechanicalVentilation"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                            levelofcare.UpdatedBy = "";
                        else
                            levelofcare.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                            levelofcare.UpdatedDate = "";
                        else
                            levelofcare.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDBreathingSupport", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDDefaultDate GetCOVIDDefaultDate(int userID)
        {
            IDataReader dbReader = null;
            COVIDDefaultDate levelofcare = new COVIDDefaultDate();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19DefaultDate", connection);
                connection.Open();

                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["StartDate"].ToString()))
                            levelofcare.StartDate = System.DateTime.Now.AddDays(-30).ToString("dd/MM/yyyy");
                        else
                            levelofcare.StartDate = Convert.ToDateTime(dbReader["StartDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["EndDate"].ToString()))
                            levelofcare.EndDate = System.DateTime.Now.ToString("dd/MM/yyyy");
                        else
                            levelofcare.EndDate = Convert.ToDateTime(dbReader["EndDate"]).ToString("dd/MM/yyyy");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDDefaultDate", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDExternalCommsReport GetCOVIDExternalCommsReport(int userID)
        {
            IDataReader dbReader = null;
            COVIDExternalCommsReport levelofcare = new COVIDExternalCommsReport();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVIDExternalCommsReport", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["BacklogDate"].ToString()))
                            levelofcare.BacklogDate = "";
                        else
                            levelofcare.BacklogDate = Convert.ToDateTime(dbReader["BacklogDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["LiveDate"].ToString()))
                            levelofcare.LiveDate = "";
                        else
                            levelofcare.LiveDate = Convert.ToDateTime(dbReader["LiveDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["CHESSNewPositiveYTD"].ToString()))
                            levelofcare.CHESSNewPositiveYTD = 0;
                        else
                            levelofcare.CHESSNewPositiveYTD = Convert.ToInt32(dbReader["CHESSNewPositiveYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSNewPositiveYTDPending"].ToString()))
                            levelofcare.CHESSNewPositiveYTDPending = 0;
                        else
                            levelofcare.CHESSNewPositiveYTDPending = Convert.ToInt32(dbReader["CHESSNewPositiveYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSICUHDUStepUpYTD"].ToString()))
                            levelofcare.CHESSICUHDUStepUpYTD = 0;
                        else
                            levelofcare.CHESSICUHDUStepUpYTD = Convert.ToInt32(dbReader["CHESSICUHDUStepUpYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSICUHDUStepUpYTDPending"].ToString()))
                            levelofcare.CHESSICUHDUStepUpYTDPending = 0;
                        else
                            levelofcare.CHESSICUHDUStepUpYTDPending = Convert.ToInt32(dbReader["CHESSICUHDUStepUpYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSICUHDUStepDownYTD"].ToString()))
                            levelofcare.CHESSICUHDUStepDownYTD = 0;
                        else
                            levelofcare.CHESSICUHDUStepDownYTD = Convert.ToInt32(dbReader["CHESSICUHDUStepDownYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSICUHDUStepDownYTDPending"].ToString()))
                            levelofcare.CHESSICUHDUStepDownYTDPending = 0;
                        else
                            levelofcare.CHESSICUHDUStepDownYTDPending = Convert.ToInt32(dbReader["CHESSICUHDUStepDownYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSDischargeDeathYTD"].ToString()))
                            levelofcare.CHESSDischargeDeathYTD = 0;
                        else
                            levelofcare.CHESSDischargeDeathYTD = Convert.ToInt32(dbReader["CHESSDischargeDeathYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSDischargeDeathYTDPending"].ToString()))
                            levelofcare.CHESSDischargeDeathYTDPending = 0;
                        else
                            levelofcare.CHESSDischargeDeathYTDPending = Convert.ToInt32(dbReader["CHESSDischargeDeathYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSDischargesYTD"].ToString()))
                            levelofcare.CHESSDischargesYTD = 0;
                        else
                            levelofcare.CHESSDischargesYTD = Convert.ToInt32(dbReader["CHESSDischargesYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSDischargesYTDPending"].ToString()))
                            levelofcare.CHESSDischargesYTDPending = 0;
                        else
                            levelofcare.CHESSDischargesYTDPending = Convert.ToInt32(dbReader["CHESSDischargesYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSPositiveDeathsYTD"].ToString()))
                            levelofcare.CHESSPositiveDeathsYTD = 0;
                        else
                            levelofcare.CHESSPositiveDeathsYTD = Convert.ToInt32(dbReader["CHESSPositiveDeathsYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSPositiveDeathsYTDPending"].ToString()))
                            levelofcare.CHESSPositiveDeathsYTDPending = 0;
                        else
                            levelofcare.CHESSPositiveDeathsYTDPending = Convert.ToInt32(dbReader["CHESSPositiveDeathsYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathYTD"].ToString()))
                            levelofcare.CPNSDeathYTD = 0;
                        else
                            levelofcare.CPNSDeathYTD = Convert.ToInt32(dbReader["CPNSDeathYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathYTDPending"].ToString()))
                            levelofcare.CPNSDeathYTDPending = 0;
                        else
                            levelofcare.CPNSDeathYTDPending = Convert.ToInt32(dbReader["CPNSDeathYTDPending"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathDetected"].ToString()))
                            levelofcare.CPNSDeathDetected = 0;
                        else
                            levelofcare.CPNSDeathDetected = Convert.ToInt32(dbReader["CPNSDeathDetected"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathDetectedPending"].ToString()))
                            levelofcare.CPNSDeathDetectedPending = 0;
                        else
                            levelofcare.CPNSDeathDetectedPending = Convert.ToInt32(dbReader["CPNSDeathDetectedPending"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathDiagnosed"].ToString()))
                            levelofcare.CPNSDeathDiagnosed = 0;
                        else
                            levelofcare.CPNSDeathDiagnosed = Convert.ToInt32(dbReader["CPNSDeathDiagnosed"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathDiagnosedPending"].ToString()))
                            levelofcare.CPNSDeathDiagnosedPending = 0;
                        else
                            levelofcare.CPNSDeathDiagnosedPending = Convert.ToInt32(dbReader["CPNSDeathDiagnosedPending"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathReAdmission"].ToString()))
                            levelofcare.CPNSDeathReAdmission = 0;
                        else
                            levelofcare.CPNSDeathReAdmission = Convert.ToInt32(dbReader["CPNSDeathReAdmission"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathReAdmissionPending"].ToString()))
                            levelofcare.CPNSDeathReAdmissionPending = 0;
                        else
                            levelofcare.CPNSDeathReAdmissionPending = Convert.ToInt32(dbReader["CPNSDeathReAdmissionPending"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSNewPositiveNotRequiredYTD"].ToString()))
                            levelofcare.CHESSNewPositiveNotRequiredYTD = 0;
                        else
                            levelofcare.CHESSNewPositiveNotRequiredYTD = Convert.ToInt32(dbReader["CHESSNewPositiveNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSICUHDUStepUpNotRequiredYTD"].ToString()))
                            levelofcare.CHESSICUHDUStepUpNotRequiredYTD = 0;
                        else
                            levelofcare.CHESSICUHDUStepUpNotRequiredYTD = Convert.ToInt32(dbReader["CHESSICUHDUStepUpNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSICUHDUStepDownNotRequiredYTD"].ToString()))
                            levelofcare.CHESSICUHDUStepDownNotRequiredYTD = 0;
                        else
                            levelofcare.CHESSICUHDUStepDownNotRequiredYTD = Convert.ToInt32(dbReader["CHESSICUHDUStepDownNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSDischargeDeathNotRequiredYTD"].ToString()))
                            levelofcare.CHESSDischargeDeathNotRequiredYTD = 0;
                        else
                            levelofcare.CHESSDischargeDeathNotRequiredYTD = Convert.ToInt32(dbReader["CHESSDischargeDeathNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSDischargesNotRequiredYTD"].ToString()))
                            levelofcare.CHESSDischargesNotRequiredYTD = 0;
                        else
                            levelofcare.CHESSDischargesNotRequiredYTD = Convert.ToInt32(dbReader["CHESSDischargesNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CHESSPositiveDeathsNotRequiredYTD"].ToString()))
                            levelofcare.CHESSPositiveDeathsNotRequiredYTD = 0;
                        else
                            levelofcare.CHESSPositiveDeathsNotRequiredYTD = Convert.ToInt32(dbReader["CHESSPositiveDeathsNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathDetectedNotRequired"].ToString()))
                            levelofcare.CPNSDeathDetectedNotRequired = 0;
                        else
                            levelofcare.CPNSDeathDetectedNotRequired = Convert.ToInt32(dbReader["CPNSDeathDetectedNotRequired"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathNotRequiredYTD"].ToString()))
                            levelofcare.CPNSDeathNotRequiredYTD = 0;
                        else
                            levelofcare.CPNSDeathNotRequiredYTD = Convert.ToInt32(dbReader["CPNSDeathNotRequiredYTD"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathDiagnosedNotRequired"].ToString()))
                            levelofcare.CPNSDeathDiagnosedNotRequired = 0;
                        else
                            levelofcare.CPNSDeathDiagnosedNotRequired = Convert.ToInt32(dbReader["CPNSDeathDiagnosedNotRequired"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSDeathReAdmissionNotRequired"].ToString()))
                            levelofcare.CPNSDeathReAdmissionNotRequired = 0;
                        else
                            levelofcare.CPNSDeathReAdmissionNotRequired = Convert.ToInt32(dbReader["CPNSDeathReAdmissionNotRequired"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDExternalCommsReport", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDDefaultDate GetMortalityDefaultDate(int userID)
        {
            IDataReader dbReader = null;
            COVIDDefaultDate levelofcare = new COVIDDefaultDate();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMortalityDefaultDate", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["StartDate"].ToString()))
                            levelofcare.StartDate = System.DateTime.Now.AddDays(-30).ToString("dd/MM/yyyy");
                        else
                            levelofcare.StartDate = Convert.ToDateTime(dbReader["StartDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["EndDate"].ToString()))
                            levelofcare.EndDate = System.DateTime.Now.ToString("dd/MM/yyyy");
                        else
                            levelofcare.EndDate = Convert.ToDateTime(dbReader["EndDate"]).ToString("dd/MM/yyyy");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMortalityDefaultDate", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public int UpdateLoginDateTime(int userid)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateLoginDateTime", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@UserID", userid);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateLoginDateTime", System.DateTime.Now, userid);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateLogoutDateTime(int userid)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateLogoutDateTime", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@UserID", userid);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateLogoutDateTime", System.DateTime.Now, userid);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public COVIDDefaultDate GetCOVIDPatientDefaultDate(int userID)
        {
            IDataReader dbReader = null;
            COVIDDefaultDate levelofcare = new COVIDDefaultDate();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19PatientDefaultDate", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["StartDate"].ToString()))
                            levelofcare.StartDate = System.DateTime.Now.AddDays(-30).ToString("dd/MM/yyyy");
                        else
                            levelofcare.StartDate = Convert.ToDateTime(dbReader["StartDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["EndDate"].ToString()))
                            levelofcare.EndDate = System.DateTime.Now.ToString("dd/MM/yyyy");
                        else
                            levelofcare.EndDate = Convert.ToDateTime(dbReader["EndDate"]).ToString("dd/MM/yyyy");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDPatientDefaultDate", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDDataAssurance GetCOVIDDataAssurance(int? patientID, int userID)
        {
            IDataReader dbReader = null;
            COVIDDataAssurance levelofcare = new COVIDDataAssurance();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19DataAssuranceID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(patientID.ToString()))
                        dbCmd.Parameters.AddWithValue("@Test_ID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@Test_ID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                            levelofcare.Test_ID = 0;
                        else
                            levelofcare.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            levelofcare.PatientID = "0";
                        else
                            levelofcare.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            levelofcare.PatientName = "0";
                        else
                            levelofcare.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            levelofcare.SpellNumber = "";
                        else
                            levelofcare.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            levelofcare.Age = "0";
                        else
                            levelofcare.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            levelofcare.Gender = "UnKnown";
                        else
                            levelofcare.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            levelofcare.TestResult = "Pending";
                        else
                            levelofcare.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["IsDisabled"].ToString()))
                            levelofcare.IsDisabled = false;
                        else
                            levelofcare.IsDisabled = Convert.ToBoolean(dbReader["IsDisabled"]);
                        if (string.IsNullOrEmpty(dbReader["DAComments"].ToString()))
                            levelofcare.DAComments = "";
                        else
                            levelofcare.DAComments = Convert.ToString(dbReader["DAComments"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                            levelofcare.UpdatedBy = "";
                        else
                            levelofcare.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                            levelofcare.UpdatedDate = "";
                        else
                            levelofcare.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy HH:mm");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDDataAssurance", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return levelofcare;
        }

        public COVIDReviewCycle GetCOVIDReviewCycle(int testID, string patientID, int userID)
        {
            IDataReader dbReader = null;
            COVIDReviewCycle covidreviewcycle = new COVIDReviewCycle();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19ReviewCycleByID", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(testID.ToString()))
                        dbCmd.Parameters.AddWithValue("@Test_ID", testID);
                    else
                        dbCmd.Parameters.AddWithValue("@Test_ID", null);
                    if (!string.IsNullOrEmpty(patientID.ToString()))
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            covidreviewcycle.ID = 0;
                        else
                            covidreviewcycle.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            covidreviewcycle.PatientID = "0";
                        else
                            covidreviewcycle.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            covidreviewcycle.PatientName = "0";
                        else
                            covidreviewcycle.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            covidreviewcycle.SpellNumber = "";
                        else
                            covidreviewcycle.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            covidreviewcycle.Age = "0";
                        else
                            covidreviewcycle.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            covidreviewcycle.Gender = "Unknown";
                        else
                            covidreviewcycle.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            covidreviewcycle.TestResult = "Pending";
                        else
                            covidreviewcycle.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["IsTestResultsCompleted"].ToString()))
                            covidreviewcycle.IsTestResultsCompleted = false;
                        else
                            covidreviewcycle.IsTestResultsCompleted = Convert.ToBoolean(dbReader["IsTestResultsCompleted"]);
                        if (string.IsNullOrEmpty(dbReader["LevelCareUpdated"].ToString()))
                            covidreviewcycle.LevelCareUpdated = 0;
                        else
                            covidreviewcycle.LevelCareUpdated = Convert.ToInt32(dbReader["LevelCareUpdated"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingUpdated"].ToString()))
                            covidreviewcycle.BreathingUpdated = 0;
                        else
                            covidreviewcycle.BreathingUpdated = Convert.ToInt32(dbReader["BreathingUpdated"]);
                        if (string.IsNullOrEmpty(dbReader["IsDataAssuranceCompleted"].ToString()))
                            covidreviewcycle.IsDataAssuranceCompleted = false;
                        else
                            covidreviewcycle.IsDataAssuranceCompleted = Convert.ToBoolean(dbReader["IsDataAssuranceCompleted"]);
                        if (string.IsNullOrEmpty(dbReader["IsCommsCompleted"].ToString()))
                            covidreviewcycle.IsCommsCompleted = false;
                        else
                            covidreviewcycle.IsCommsCompleted = Convert.ToBoolean(dbReader["IsCommsCompleted"]);
                        if (string.IsNullOrEmpty(dbReader["DQ"].ToString()))
                            covidreviewcycle.DQ = 0;
                        else
                            covidreviewcycle.DQ = Convert.ToInt32(dbReader["DQ"]);
                        if (string.IsNullOrEmpty(dbReader["Notified"].ToString()))
                            covidreviewcycle.Notified = 0;
                        else
                            covidreviewcycle.Notified = Convert.ToInt32(dbReader["Notified"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDReviewCycle", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return covidreviewcycle;
        }

        public clsCOVIDDetails GetCOVIDPatientDetailsByID(string patientID, int userID)
        {
            IDataReader dbReader = null;
            clsCOVIDDetails patient = new clsCOVIDDetails();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVIDPatientDetailsByID", connection);
                connection.Open();

                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(patientID.ToString()))
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patient.ID = 0;
                        else
                            patient.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            patient.PatientID = "";
                        else
                            patient.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patient.SpellNumber = "";
                        else
                            patient.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patient.NHSNumber = "";
                        else
                            patient.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionStatus"].ToString()))
                            patient.AdmissionStatus = "";
                        else
                            patient.AdmissionStatus = Convert.ToString(dbReader["AdmissionStatus"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patient.PatientName = "";
                        else
                            patient.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patient.DOB = "Pending";
                        else
                            patient.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["AdmissionDateTime"].ToString()))
                            patient.AdmissionDateTime = "";
                        else
                            patient.AdmissionDateTime = Convert.ToDateTime(dbReader["AdmissionDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeDateTime"].ToString()))
                            patient.DischargeDateTime = "";
                        else
                            patient.DischargeDateTime = Convert.ToDateTime(dbReader["DischargeDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeMethodCode"].ToString()))
                            patient.DischargeMethodCode = "0";
                        else
                            patient.DischargeMethodCode = Convert.ToString(dbReader["DischargeMethodCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeMethod"].ToString()))
                            patient.DischargeMethod = "";
                        else
                            patient.DischargeMethod = Convert.ToString(dbReader["DischargeMethod"]);
                        if (string.IsNullOrEmpty(dbReader["OrderDateTime"].ToString()))
                            patient.OrderDateTime = "";
                        else
                            patient.OrderDateTime = Convert.ToDateTime(dbReader["OrderDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patient.TestResultDateTime = "";
                        else
                            patient.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["OrderedBy"].ToString()))
                            patient.OrderedBy = "";
                        else
                            patient.OrderedBy = Convert.ToString(dbReader["OrderedBy"]);
                        if (string.IsNullOrEmpty(dbReader["NumberOfTests"].ToString()))
                            patient.NumberOfTests = 0;
                        else
                            patient.NumberOfTests = Convert.ToInt32(dbReader["NumberOfTests"]);
                        if (string.IsNullOrEmpty(dbReader["TestStatus"].ToString()))
                            patient.TestStatus = "";
                        else
                            patient.TestStatus = Convert.ToString(dbReader["TestStatus"]);
                        if (string.IsNullOrEmpty(dbReader["TestStatus"].ToString()))
                            patient.Age = "0";
                        else
                            patient.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patient.Gender = "UnKnown";
                        else
                            patient.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            patient.TestResult = "";
                        else
                            patient.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["TestDuration"].ToString()))
                            patient.TestDuration = 0;
                        else
                            patient.TestDuration = Convert.ToInt32(dbReader["TestDuration"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatus"].ToString()))
                            patient.BreathingStatus = "";
                        else
                            patient.BreathingStatus = Convert.ToString(dbReader["BreathingStatus"]);
                        if (string.IsNullOrEmpty(dbReader["TestOrderLocation"].ToString()))
                            patient.TestOrderLocation = "";
                        else
                            patient.TestOrderLocation = Convert.ToString(dbReader["TestOrderLocation"]);
                        if (string.IsNullOrEmpty(dbReader["LastPatientLocation"].ToString()))
                            patient.LastPatientLocation = "";
                        else
                            patient.LastPatientLocation = Convert.ToString(dbReader["LastPatientLocation"]);
                        if (string.IsNullOrEmpty(dbReader["BedType"].ToString()))
                            patient.BedType = "";
                        else
                            patient.BedType = Convert.ToString(dbReader["BedType"]);
                        if (string.IsNullOrEmpty(dbReader["DQ"].ToString()))
                            patient.DQ = "";
                        else
                            patient.DQ = Convert.ToString(dbReader["DQ"]);
                        if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                            patient.DateofDeath = "";
                        else
                            patient.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyy HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["AdmittingWard"].ToString()))
                            patient.AdmittingWard = Convert.ToString(dbReader["AdmittingWard"]);
                        else
                            patient.AdmittingWard = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patient.DischargeWard = "";
                        else
                            patient.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patient.Gender = "0";
                        else
                            patient.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["CareGroup"].ToString()))
                            patient.CareGroup = "0";
                        else
                            patient.CareGroup = Convert.ToString(dbReader["CareGroup"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbitiesCount"].ToString()))
                            patient.ComorbitiesCount = 0;
                        else
                            patient.ComorbitiesCount = Convert.ToInt32(dbReader["ComorbitiesCount"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDPatientDetailsByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return patient;
        }

        public List<clsCOVIDPatientList> GetCOVIDPatientList(int PageIndex, int PageSize, string SearchText,
            string PatientLocation, bool IsCurrentIPCount, bool IsNotUpdatedLast20HoursCount, bool IsNotUpdatedLast12HoursCount, bool IsUpdatedLast12HoursCount, bool NoOxygen, bool Oxygen, bool NonInvasiveVentilation, bool MechanicalVentilation, bool BreathingNotUpdatedAtAll, bool IsNewPositiveYTD, bool IsNewPositiveYTDPending, bool IsICUHDUStepUpYTD, bool IsICUHDUStepUpYTDPending,
            bool IsICUHDUStepDownYTD, bool IsICUHDUStepDownYTDPending, bool IsDischargeDeathYTD,
            bool IsDischargeDeathYTDPending, bool IsDischargesYTD, bool IsDischargesYTDPending, bool IsPositiveDeathsYTD, bool IsPositiveDeathsYTDPending,
            bool IsDeathYTD, bool IsDeathYTDPending, bool IsDeathDetected, bool IsDeathDetectedPending, bool IsDeathDiagnosed, bool IsDeathDiagnosedPending, bool IsDeathReAdmission, bool IsDeathReAdmissionPending, bool IsCHESSNewPositiveNotRequiredYTD, bool IsCHESSICUHDUStepUpNotRequiredYTD, bool IsCHESSICUHDUStepDownNotRequiredYTD, bool IsCHESSDischargeDeathNotRequiredYTD,
            bool IsCHESSDischargesNotRequiredYTD, bool IsCHESSPositiveDeathsNotRequiredYTD, bool IsCPNSDeathNotRequiredYTD, bool IsCPNSDeathDetectedNotRequired, bool IsCPNSDeathDiagnosedNotRequired, bool IsCPNSDeathReAdmissionNotRequired,
            string OrderColumn, string SortType, string TestResult, int userID)
        {
            IDataReader dbReader = null;
            List<clsCOVIDPatientList> lstpatient = new List<clsCOVIDPatientList>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVIDPatientListing", connection);
                connection.Open();

                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(PageIndex.ToString()))
                        dbCmd.Parameters.AddWithValue("@PageIndex", PageIndex);
                    else
                        dbCmd.Parameters.AddWithValue("@PageIndex", 1);
                    if (!string.IsNullOrEmpty(PageSize.ToString()))
                        dbCmd.Parameters.AddWithValue("@PageSize", PageSize);
                    else
                        dbCmd.Parameters.AddWithValue("@PageSize", 10);
                    if (!string.IsNullOrEmpty(SearchText.ToString()))
                        dbCmd.Parameters.AddWithValue("@SearchText", SearchText);
                    else
                        dbCmd.Parameters.AddWithValue("@SearchText", "");
                    if (!string.IsNullOrEmpty(PatientLocation.ToString()))
                        dbCmd.Parameters.AddWithValue("@PatientLocation", PatientLocation);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientLocation", "");
                    if (!string.IsNullOrEmpty(IsCurrentIPCount.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCurrentIPCount", IsCurrentIPCount);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCurrentIPCount", false);
                    if (!string.IsNullOrEmpty(IsNotUpdatedLast20HoursCount.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsNotUpdatedLast20HoursCount", IsNotUpdatedLast20HoursCount);
                    else
                        dbCmd.Parameters.AddWithValue("@IsNotUpdatedLast20HoursCount", false);
                    if (!string.IsNullOrEmpty(IsNotUpdatedLast12HoursCount.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsNotUpdatedLast12HoursCount", IsNotUpdatedLast12HoursCount);
                    else
                        dbCmd.Parameters.AddWithValue("@IsNotUpdatedLast12HoursCount", false);
                    if (!string.IsNullOrEmpty(IsUpdatedLast12HoursCount.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsUpdatedLast12HoursCount", IsUpdatedLast12HoursCount);
                    else
                        dbCmd.Parameters.AddWithValue("@IsUpdatedLast12HoursCount", false);
                    if (!string.IsNullOrEmpty(NoOxygen.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsNoOxygen", NoOxygen);
                    else
                        dbCmd.Parameters.AddWithValue("@IsNoOxygen", false);
                    if (!string.IsNullOrEmpty(Oxygen.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsOxygen", Oxygen);
                    else
                        dbCmd.Parameters.AddWithValue("@IsOxygen", false);
                    if (!string.IsNullOrEmpty(NonInvasiveVentilation.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsNonEvasiveVentilation", NonInvasiveVentilation);
                    else
                        dbCmd.Parameters.AddWithValue("@IsNonEvasiveVentilation", false);
                    if (!string.IsNullOrEmpty(MechanicalVentilation.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsMechanicalVentilation", MechanicalVentilation);
                    else
                        dbCmd.Parameters.AddWithValue("@IsMechanicalVentilation", false);
                    if (!string.IsNullOrEmpty(BreathingNotUpdatedAtAll.ToString()))
                        dbCmd.Parameters.AddWithValue("@BreathingNotUpdatedAtAll", BreathingNotUpdatedAtAll);
                    else
                        dbCmd.Parameters.AddWithValue("@BreathingNotUpdatedAtAll", false);
                    if (!string.IsNullOrEmpty(IsNewPositiveYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsNewPositiveYTD", IsNewPositiveYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsNewPositiveYTD", false);
                    if (!string.IsNullOrEmpty(IsNewPositiveYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsNewPositiveYTDPending", IsNewPositiveYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsNewPositiveYTDPending", false);
                    if (!string.IsNullOrEmpty(IsICUHDUStepUpYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepUpYTD", IsICUHDUStepUpYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepUpYTD", false);
                    if (!string.IsNullOrEmpty(IsICUHDUStepUpYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepUpYTDPending", IsICUHDUStepUpYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepUpYTDPending", false);
                    if (!string.IsNullOrEmpty(IsICUHDUStepDownYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepDownYTD", IsICUHDUStepDownYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepDownYTD", false);
                    if (!string.IsNullOrEmpty(IsICUHDUStepDownYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepDownYTDPending", IsICUHDUStepDownYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsICUHDUStepDownYTDPending", false);
                    if (!string.IsNullOrEmpty(IsDischargeDeathYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDischargeDeathYTD", IsDischargeDeathYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDischargeDeathYTD", false);
                    if (!string.IsNullOrEmpty(IsDischargeDeathYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDischargeDeathYTDPending", IsDischargeDeathYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDischargeDeathYTDPending", false);
                    if (!string.IsNullOrEmpty(IsDischargesYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDischargesYTD", IsDischargesYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDischargesYTD", false);
                    if (!string.IsNullOrEmpty(IsDischargesYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDischargesYTDPending", IsDischargesYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDischargesYTDPending", false);
                    if (!string.IsNullOrEmpty(IsPositiveDeathsYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsPositiveDeathsYTD", IsPositiveDeathsYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsPositiveDeathsYTD", false);
                    if (!string.IsNullOrEmpty(IsPositiveDeathsYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsPositiveDeathsYTDPending", IsPositiveDeathsYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsPositiveDeathsYTDPending", false);
                    if (!string.IsNullOrEmpty(IsDeathYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathYTD", IsDeathYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathYTD", false);
                    if (!string.IsNullOrEmpty(IsDeathYTDPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathYTDPending", IsDeathYTDPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathYTDPending", false);
                    if (!string.IsNullOrEmpty(IsDeathDetected.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathDetected", IsDeathDetected);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathDetected", false);
                    if (!string.IsNullOrEmpty(IsDeathDetectedPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathDetectedPending", IsDeathDetectedPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathDetectedPending", false);
                    if (!string.IsNullOrEmpty(IsDeathDiagnosed.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathDiagnosed", IsDeathDiagnosed);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathDiagnosed", false);
                    if (!string.IsNullOrEmpty(IsDeathDiagnosedPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathDiagnosedPending", IsDeathDiagnosedPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathDiagnosedPending", false);
                    if (!string.IsNullOrEmpty(IsDeathReAdmission.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathReAdmission", IsDeathReAdmission);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathReAdmission", false);
                    if (!string.IsNullOrEmpty(IsDeathReAdmissionPending.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsDeathReAdmissionPending", IsDeathReAdmissionPending);
                    else
                        dbCmd.Parameters.AddWithValue("@IsDeathReAdmissionPending", false);
                    if (!string.IsNullOrEmpty(IsCHESSNewPositiveNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCHESSNewPositiveNotRequiredYTD", IsCHESSNewPositiveNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCHESSNewPositiveNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCHESSICUHDUStepUpNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCHESSICUHDUStepUpNotRequiredYTD", IsCHESSICUHDUStepUpNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCHESSICUHDUStepUpNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCHESSICUHDUStepDownNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCHESSICUHDUStepDownNotRequiredYTD", IsCHESSICUHDUStepDownNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCHESSICUHDUStepDownNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCHESSDischargeDeathNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCHESSDischargeDeathNotRequiredYTD", IsCHESSDischargeDeathNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCHESSDischargeDeathNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCHESSDischargesNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCHESSDischargesNotRequiredYTD", IsCHESSDischargesNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCHESSDischargesNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCHESSPositiveDeathsNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCHESSPositiveDeathsNotRequiredYTD", IsCHESSPositiveDeathsNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCHESSPositiveDeathsNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCPNSDeathDetectedNotRequired.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathDetectedNotRequired", IsCPNSDeathDetectedNotRequired);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathDetectedNotRequired", false);
                    if (!string.IsNullOrEmpty(IsCPNSDeathNotRequiredYTD.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathNotRequiredYTD", IsCPNSDeathNotRequiredYTD);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathNotRequiredYTD", false);
                    if (!string.IsNullOrEmpty(IsCPNSDeathDiagnosedNotRequired.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathDiagnosedNotRequired", IsCPNSDeathDiagnosedNotRequired);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathDiagnosedNotRequired", false);
                    if (!string.IsNullOrEmpty(IsCPNSDeathReAdmissionNotRequired.ToString()))
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathReAdmissionNotRequired", IsCPNSDeathReAdmissionNotRequired);
                    else
                        dbCmd.Parameters.AddWithValue("@IsCPNSDeathReAdmissionNotRequired", false);
                    if (!string.IsNullOrEmpty(OrderColumn.ToString()))
                        dbCmd.Parameters.AddWithValue("@OrderColumn", OrderColumn);
                    else
                        dbCmd.Parameters.AddWithValue("@OrderColumn", "");
                    if (!string.IsNullOrEmpty(SortType.ToString()))
                        dbCmd.Parameters.AddWithValue("@SortType", SortType);
                    else
                        dbCmd.Parameters.AddWithValue("@SortType", "");

                    if (!string.IsNullOrEmpty(TestResult.ToString()))
                        dbCmd.Parameters.AddWithValue("@TestResult", TestResult);
                    else
                        dbCmd.Parameters.AddWithValue("@TestResult", "");

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        clsCOVIDPatientList patient = new clsCOVIDPatientList();
                        if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                            patient.Test_ID = 0;
                        else
                            patient.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patient.Age = 0;
                        else
                            patient.Age = Convert.ToInt32(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["LOSDays"].ToString()))
                            patient.LOSDays = 0;
                        else
                            patient.LOSDays = Convert.ToInt32(dbReader["LOSDays"]);
                        if (string.IsNullOrEmpty(dbReader["TotalRecords"].ToString()))
                            patient.TotalRecords = 0;
                        else
                            patient.TotalRecords = Convert.ToInt32(dbReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            patient.PatientID = "";
                        else
                            patient.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patient.NHSNumber = "";
                        else
                            patient.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionStatus"].ToString()))
                            patient.AdmissionStatus = "";
                        else
                            patient.AdmissionStatus = Convert.ToString(dbReader["AdmissionStatus"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patient.PatientName = "";
                        else
                            patient.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionDateTime"].ToString()))
                            patient.AdmissionDateTime = "";
                        else
                            patient.AdmissionDateTime = Convert.ToDateTime(dbReader["AdmissionDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patient.TestResultDateTime = "";
                        else
                            patient.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeDateTime"].ToString()))
                            patient.DischargeDateTime = "";
                        else
                            patient.DischargeDateTime = Convert.ToDateTime(dbReader["DischargeDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patient.Gender = "UnKnown";
                        else
                            patient.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            patient.TestResult = "";
                        else
                            patient.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["LastPatientLocation"].ToString()))
                            patient.LastPatientLocation = "";
                        else
                            patient.LastPatientLocation = Convert.ToString(dbReader["LastPatientLocation"]);
                        if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                            patient.DateofDeath = "";
                        else
                            patient.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patient.Gender = "0";
                        else
                            patient.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbitiesCount"].ToString()))
                            patient.ComorbitiesCount = 0;
                        else
                            patient.ComorbitiesCount = Convert.ToInt32(dbReader["ComorbitiesCount"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedBy"].ToString()))
                            patient.UpdatedBy = "";
                        else
                            patient.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["UpdatedDate"].ToString()))
                            patient.UpdatedDate = "";
                        else
                            patient.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["CHESSComments"].ToString()))
                            patient.CHESSComments = "";
                        else
                            patient.CHESSComments = Convert.ToString(dbReader["CHESSComments"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeDeathComments"].ToString()))
                            patient.DischargeDeathComments = "";
                        else
                            patient.DischargeDeathComments = Convert.ToString(dbReader["DischargeDeathComments"]);
                        if (string.IsNullOrEmpty(dbReader["CPNSComments"].ToString()))
                            patient.CPNSComments = "";
                        else
                            patient.CPNSComments = Convert.ToString(dbReader["CPNSComments"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatus"].ToString()))
                            patient.BreathingStatus = "";
                        else
                            patient.BreathingStatus = Convert.ToString(dbReader["BreathingStatus"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatusText"].ToString()))
                            patient.BreathingStatusText = "";
                        else
                            patient.BreathingStatusText = Convert.ToString(dbReader["BreathingStatusText"]);
                        if (string.IsNullOrEmpty(dbReader["BedType"].ToString()))
                            patient.BedType = "";
                        else
                            patient.BedType = Convert.ToString(dbReader["BedType"]);
                        if (string.IsNullOrEmpty(dbReader["BedTypeText"].ToString()))
                            patient.BedTypeText = "";
                        else
                            patient.BedTypeText = Convert.ToString(dbReader["BedTypeText"]);
                        lstpatient.Add(patient);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDPatientList", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return lstpatient;
        }

        public List<clsCOVIDDetails> GetCOVIDDetails(DateTime startdate, DateTime enddate, string patienttype, string teststatus,string testresults, string testorderlocation, string lastlocation, string admissionstatus, int pageindex,
            int pagesize, string searchText, bool IsTotalTestOrders, bool IsTotalTestOrdersLast24hours, bool IsPostive, bool IsNegative, bool IsPending, bool IsPostiveNotified, bool IsNegativeNotified, bool IsPendingNotified, bool IsPositiveLast24hours, bool IsPositiveInPatientLast24hours, bool IsCancelledLast24hours, bool IsPostiveNotifiedLast24hours, bool IsInPatientNotifiedLast24hours, bool IsNotifiedCancelledLast24hours, bool IsPositiveAdmissions, bool IsPositiveDeaths, bool IsPositiveDischargesLast24hours, bool IsPositiveDeathLast24hours, string ordercolumn, string sorttype, int userID)
        {
            SqlDataReader dbReader = null;
            SqlCommand dbCmd = null;
            List<clsCOVIDDetails> coviddetails = new List<clsCOVIDDetails>();
            //LogException("enddate::", "", "", System.DateTime.Now);
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                dbCmd = new SqlCommand("usp_GetCOVIDDetails", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startdate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startdate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", DateTime.Now.AddDays(-30));
                    if (enddate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", enddate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", DateTime.Now);
                    //LogException("post add in param::", "", "", System.DateTime.Now);
                    if (patienttype != null)
                        dbCmd.Parameters.AddWithValue("@Notification", patienttype);
                    else
                        dbCmd.Parameters.AddWithValue("@Notification", "0");
                    if (teststatus != null)
                        dbCmd.Parameters.AddWithValue("@TestStatus", teststatus);
                    else
                        dbCmd.Parameters.AddWithValue("@TestStatus", "0");
                    if (testresults != null)
                        dbCmd.Parameters.AddWithValue("@TestResults", testresults);
                    else
                        dbCmd.Parameters.AddWithValue("@TestResults", "0");
                    if (testorderlocation != null)
                        dbCmd.Parameters.AddWithValue("@TestOrderLocation", testorderlocation);
                    else
                        dbCmd.Parameters.AddWithValue("@TestOrderLocation", "0");
                    if (lastlocation != null)
                        dbCmd.Parameters.AddWithValue("@LastLocation", lastlocation);
                    else
                        dbCmd.Parameters.AddWithValue("@LastLocation", "0");
                    if (admissionstatus != null)
                        dbCmd.Parameters.AddWithValue("@AdmissionStatus", admissionstatus);
                    else
                        dbCmd.Parameters.AddWithValue("@AdmissionStatus", "0");
                    if (admissionstatus != null)
                        dbCmd.Parameters.AddWithValue("@PageIndex", pageindex);
                    else
                        dbCmd.Parameters.AddWithValue("@PageIndex", 1);
                    if (admissionstatus != null)
                        dbCmd.Parameters.AddWithValue("@PageSize", pagesize);
                    else
                        dbCmd.Parameters.AddWithValue("@PageSize", 10);
                    if (searchText != null)
                        dbCmd.Parameters.AddWithValue("@SearchText", searchText);
                    else
                        dbCmd.Parameters.AddWithValue("@SearchText", "");
                    dbCmd.Parameters.AddWithValue("@IsTotalTestOrders", IsTotalTestOrders);
                    dbCmd.Parameters.AddWithValue("@IsTotalTestOrdersLast24hours", IsTotalTestOrdersLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPositive", IsPostive);
                    dbCmd.Parameters.AddWithValue("@IsNegative", IsNegative);
                    dbCmd.Parameters.AddWithValue("@IsPending", IsPending);
                    dbCmd.Parameters.AddWithValue("@IsPostiveNotNotified", IsPostiveNotified);
                    dbCmd.Parameters.AddWithValue("@IsNegativeNotNotified", IsNegativeNotified);
                    dbCmd.Parameters.AddWithValue("@IsPendingGreaterthan2days", IsPendingNotified);
                    dbCmd.Parameters.AddWithValue("@IsPositiveLast24hours", IsPositiveLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPositiveInPatientLast24hours", IsPositiveInPatientLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsNegativeLast24hours", IsCancelledLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPostiveNotNotifiedLast24hours", IsPostiveNotifiedLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsInPatientNotNotifiedLast24hours", IsInPatientNotifiedLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsNegativeNotNotifiedLast24hours", IsNotifiedCancelledLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPositiveAdmissions", IsPositiveAdmissions);
                    dbCmd.Parameters.AddWithValue("@IsPositiveDeaths", IsPositiveDeaths);
                    dbCmd.Parameters.AddWithValue("@IsPositiveDischargesLast24hours", IsPositiveDischargesLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPositiveDeathLast24hours", IsPositiveDeathLast24hours);
                    dbCmd.Parameters.AddWithValue("@OrderColumn", ordercolumn);
                    dbCmd.Parameters.AddWithValue("@SortType", sorttype);
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        clsCOVIDDetails patientDashboard = new clsCOVIDDetails();
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dbReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            patientDashboard.PatientID = "";
                        else
                            patientDashboard.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionStatus"].ToString()))
                            patientDashboard.AdmissionStatus = "";
                        else
                            patientDashboard.AdmissionStatus = Convert.ToString(dbReader["AdmissionStatus"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["AdmissionDateTime"].ToString()))
                            patientDashboard.AdmissionDateTime = "";
                        else
                            patientDashboard.AdmissionDateTime = Convert.ToDateTime(dbReader["AdmissionDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeDateTime"].ToString()))
                            patientDashboard.DischargeDateTime = "";
                        else
                            patientDashboard.DischargeDateTime = Convert.ToDateTime(dbReader["DischargeDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeMethodCode"].ToString()))
                            patientDashboard.DischargeMethodCode = "0";
                        else
                            patientDashboard.DischargeMethodCode = Convert.ToString(dbReader["DischargeMethodCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeMethod"].ToString()))
                            patientDashboard.DischargeMethod = "";
                        else
                            patientDashboard.DischargeMethod = Convert.ToString(dbReader["DischargeMethod"]);
                        if (string.IsNullOrEmpty(dbReader["OrderDateTime"].ToString()))
                            patientDashboard.OrderDateTime = "";
                        else
                            patientDashboard.OrderDateTime = Convert.ToDateTime(dbReader["OrderDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patientDashboard.TestResultDateTime = "";
                        else
                            patientDashboard.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["OrderedBy"].ToString()))
                            patientDashboard.OrderedBy = "";
                        else
                            patientDashboard.OrderedBy = Convert.ToString(dbReader["OrderedBy"]);
                        if (string.IsNullOrEmpty(dbReader["NumberOfTests"].ToString()))
                            patientDashboard.NumberOfTests = 0;
                        else
                            patientDashboard.NumberOfTests = Convert.ToInt32(dbReader["NumberOfTests"]);
                        if (string.IsNullOrEmpty(dbReader["TestStatus"].ToString()))
                            patientDashboard.TestStatus = "";
                        else
                            patientDashboard.TestStatus = Convert.ToString(dbReader["TestStatus"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            patientDashboard.TestResult = "";
                        else
                            patientDashboard.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["TestDuration"].ToString()))
                            patientDashboard.TestDuration = 0;
                        else
                            patientDashboard.TestDuration = Convert.ToInt32(dbReader["TestDuration"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatus"].ToString()))
                            patientDashboard.BreathingStatus = "Unknown";
                        else
                            patientDashboard.BreathingStatus = Convert.ToString(dbReader["BreathingStatus"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatusFullText"].ToString()))
                            patientDashboard.BreathingStatusFullText = "Unknown";
                        else
                            patientDashboard.BreathingStatusFullText = Convert.ToString(dbReader["BreathingStatusFullText"]);
                        if (string.IsNullOrEmpty(dbReader["TestOrderLocation"].ToString()))
                            patientDashboard.TestOrderLocation = "";
                        else
                            patientDashboard.TestOrderLocation = Convert.ToString(dbReader["TestOrderLocation"]);
                        if (string.IsNullOrEmpty(dbReader["LastPatientLocation"].ToString()))
                            patientDashboard.LastPatientLocation = "";
                        else
                            patientDashboard.LastPatientLocation = Convert.ToString(dbReader["LastPatientLocation"]);
                        if (string.IsNullOrEmpty(dbReader["BedType"].ToString()))
                            patientDashboard.BedType = "Unknown";
                        else
                            patientDashboard.BedType = Convert.ToString(dbReader["BedType"]);
                        if (string.IsNullOrEmpty(dbReader["BedTypeFullText"].ToString()))
                            patientDashboard.BedTypeFullText = "Unknown";
                        else
                            patientDashboard.BedTypeFullText = Convert.ToString(dbReader["BedTypeFullText"]);
                        if (string.IsNullOrEmpty(dbReader["DQ"].ToString()))
                            patientDashboard.DQ = "";
                        else
                            patientDashboard.DQ = Convert.ToString(dbReader["DQ"]);
                        if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyy HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["AdmittingWard"].ToString()))
                            patientDashboard.AdmittingWard = Convert.ToString(dbReader["AdmittingWard"]);
                        else
                            patientDashboard.AdmittingWard = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["CareGroup"].ToString()))
                            patientDashboard.CareGroup = "0";
                        else
                            patientDashboard.CareGroup = Convert.ToString(dbReader["CareGroup"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "0";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbitiesCount"].ToString()))
                            patientDashboard.ComorbitiesCount = 0;
                        else
                            patientDashboard.ComorbitiesCount = Convert.ToInt32(dbReader["ComorbitiesCount"]);
                        if (string.IsNullOrEmpty(dbReader["TotalTestsOrdered"].ToString()))
                            patientDashboard.TotalTestsOrdered = 0;
                        else
                            patientDashboard.TotalTestsOrdered = Convert.ToInt32(dbReader["TotalTestsOrdered"]);
                        if (string.IsNullOrEmpty(dbReader["Notified"].ToString()))
                            patientDashboard.Notified = 0;
                        else
                            patientDashboard.Notified = Convert.ToInt32(dbReader["Notified"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patientDashboard.Age = "0";
                        else
                            patientDashboard.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "Unknown";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["IsDisabled"].ToString()))
                            patientDashboard.IsDisabled = false;
                        else
                            patientDashboard.IsDisabled = Convert.ToBoolean(dbReader["IsDisabled"]);
                        if (string.IsNullOrEmpty(dbReader["BedTypeUpdated"].ToString()))
                            patientDashboard.BedTypeUpdated = 0;
                        else
                            patientDashboard.BedTypeUpdated = Convert.ToInt32(dbReader["BedTypeUpdated"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatusUpdated"].ToString()))
                            patientDashboard.BreathingStatusUpdated = 3;
                        else
                            patientDashboard.BreathingStatusUpdated = Convert.ToInt32(dbReader["BreathingStatusUpdated"]);
                        if (string.IsNullOrEmpty(dbReader["DAComments"].ToString()))
                            patientDashboard.DAComments = "";
                        else
                            patientDashboard.DAComments = Convert.ToString(dbReader["DAComments"]);
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patientDashboard.TestResultDateTime = "";
                        else
                            patientDashboard.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TotalTestsOrdered"].ToString()))
                            patientDashboard.TotalTestsOrdered = 0;
                        else
                            patientDashboard.TotalTestsOrdered = Convert.ToInt32(dbReader["TotalTestsOrdered"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveTestCases"].ToString()))
                            patientDashboard.PositiveTestCases = 0;
                        else
                            patientDashboard.PositiveTestCases = Convert.ToInt32(dbReader["PositiveTestCases"]);
                        if (string.IsNullOrEmpty(dbReader["NegativeTestCases"].ToString()))
                            patientDashboard.NegativeTestCases = 0;
                        else
                            patientDashboard.NegativeTestCases = Convert.ToInt32(dbReader["NegativeTestCases"]);
                        if (string.IsNullOrEmpty(dbReader["PendingTestCases"].ToString()))
                            patientDashboard.PendingTestCases = 0;
                        else
                            patientDashboard.PendingTestCases = Convert.ToInt32(dbReader["PendingTestCases"]);
                        if (string.IsNullOrEmpty(dbReader["PendingTestsOver2days"].ToString()))
                            patientDashboard.PendingTestsOver2days = 0;
                        else
                            patientDashboard.PendingTestsOver2days = Convert.ToInt32(dbReader["PendingTestsOver2days"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionCount"].ToString()))
                            patientDashboard.AdmissionCount = 0;
                        else
                            patientDashboard.AdmissionCount = Convert.ToInt32(dbReader["AdmissionCount"]);
                        if (string.IsNullOrEmpty(dbReader["DeathCount"].ToString()))
                            patientDashboard.DeathCount = 0;
                        else
                            patientDashboard.DeathCount = Convert.ToInt32(dbReader["DeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedPositiveCount"].ToString()))
                            patientDashboard.NotNotifiedPositiveCount = 0;
                        else
                            patientDashboard.NotNotifiedPositiveCount = Convert.ToInt32(dbReader["NotNotifiedPositiveCount"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedNegativeCount"].ToString()))
                            patientDashboard.NotNotifiedNegativeCount = 0;
                        else
                            patientDashboard.NotNotifiedNegativeCount = Convert.ToInt32(dbReader["NotNotifiedNegativeCount"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedPendingCount"].ToString()))
                            patientDashboard.NotNotifiedPendingCount = 0;
                        else
                            patientDashboard.NotNotifiedPendingCount = Convert.ToInt32(dbReader["NotNotifiedPendingCount"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedAdmissionCount"].ToString()))
                            patientDashboard.NotNotifiedAdmissionCount = 0;
                        else
                            patientDashboard.NotNotifiedAdmissionCount = Convert.ToInt32(dbReader["NotNotifiedAdmissionCount"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedDeathCount"].ToString()))
                            patientDashboard.NotNotifiedDeathCount = 0;
                        else
                            patientDashboard.NotNotifiedDeathCount = Convert.ToInt32(dbReader["NotNotifiedDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["TotalTestsOrderedLast24hrs"].ToString()))
                            patientDashboard.TotalTestsOrderedLast24hrs = 0;
                        else
                            patientDashboard.TotalTestsOrderedLast24hrs = Convert.ToInt32(dbReader["TotalTestsOrderedLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["PostivePatientDiagnosisLast24hrs"].ToString()))
                            patientDashboard.PostivePatientDiagnosisLast24hrs = 0;
                        else
                            patientDashboard.PostivePatientDiagnosisLast24hrs = Convert.ToInt32(dbReader["PostivePatientDiagnosisLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveInpatientDiagnosisLast24hrs"].ToString()))
                            patientDashboard.PositiveInpatientDiagnosisLast24hrs = 0;
                        else
                            patientDashboard.PositiveInpatientDiagnosisLast24hrs = Convert.ToInt32(dbReader["PositiveInpatientDiagnosisLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["NegativeLast24hours"].ToString()))
                            patientDashboard.NegativeLast24hours = 0;
                        else
                            patientDashboard.NegativeLast24hours = Convert.ToInt32(dbReader["NegativeLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["DeathsLast24hrs"].ToString()))
                            patientDashboard.DeathsLast24hrs = 0;
                        else
                            patientDashboard.DeathsLast24hrs = Convert.ToInt32(dbReader["DeathsLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["DischargesLast24hrs"].ToString()))
                            patientDashboard.DischargesLast24hrs = 0;
                        else
                            patientDashboard.DischargesLast24hrs = Convert.ToInt32(dbReader["DischargesLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedPostivePatientDiagnosisLast24hrs"].ToString()))
                            patientDashboard.NotNotifiedPostivePatientDiagnosisLast24hrs = 0;
                        else
                            patientDashboard.NotNotifiedPostivePatientDiagnosisLast24hrs = Convert.ToInt32(dbReader["NotNotifiedPostivePatientDiagnosisLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedInPatientDiagnosisLast24hrs"].ToString()))
                            patientDashboard.NotNotifiedInPatientDiagnosisLast24hrs = 0;
                        else
                            patientDashboard.NotNotifiedInPatientDiagnosisLast24hrs = Convert.ToInt32(dbReader["NotNotifiedInPatientDiagnosisLast24hrs"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedNegativeLast24hours"].ToString()))
                            patientDashboard.NotNotifiedNegativeLast24hours = 0;
                        else
                            patientDashboard.NotNotifiedNegativeLast24hours = Convert.ToInt32(dbReader["NotNotifiedNegativeLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedDeathLast24hours"].ToString()))
                            patientDashboard.NotNotifiedDeathLast24hours = 0;
                        else
                            patientDashboard.NotNotifiedDeathLast24hours = Convert.ToInt32(dbReader["NotNotifiedDeathLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["NotNotifiedDischargesLast24hours"].ToString()))
                            patientDashboard.NotNotifiedDischargesLast24hours = 0;
                        else
                            patientDashboard.NotNotifiedDischargesLast24hours = Convert.ToInt32(dbReader["NotNotifiedDischargesLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["IsPositiveWardContacted"].ToString()))
                            patientDashboard.IsPositiveWardContacted = false;
                        else
                            patientDashboard.IsPositiveWardContacted = Convert.ToBoolean(dbReader["IsPositiveWardContacted"]);
                        if (string.IsNullOrEmpty(dbReader["IsPositivePatientContacted"].ToString()))
                            patientDashboard.IsPositivePatientContacted = false;
                        else
                            patientDashboard.IsPositivePatientContacted = Convert.ToBoolean(dbReader["IsPositivePatientContacted"]);
                        if (string.IsNullOrEmpty(dbReader["IsNegativeLetterSent"].ToString()))
                            patientDashboard.IsNegativeLetterSent = false;
                        else
                            patientDashboard.IsNegativeLetterSent = Convert.ToBoolean(dbReader["IsNegativeLetterSent"]);
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBreathingDate"].ToString()))
                            patientDashboard.LastUpdatedBreathingDate = "N/A";
                        else
                            patientDashboard.LastUpdatedBreathingDate = Convert.ToDateTime(dbReader["LastUpdatedBreathingDate"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBreathingBy"].ToString()))
                            patientDashboard.LastUpdatedBreathingBy = "N/A";
                        else
                            patientDashboard.LastUpdatedBreathingBy = Convert.ToString(dbReader["LastUpdatedBreathingBy"]);
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBedTypeDate"].ToString()))
                            patientDashboard.LastUpdatedBedTypeDate = "N/A";
                        else
                            patientDashboard.LastUpdatedBedTypeDate = Convert.ToDateTime(dbReader["LastUpdatedBedTypeDate"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBedTypeBy"].ToString()))
                            patientDashboard.LastUpdatedBedTypeBy = "N/A";
                        else
                            patientDashboard.LastUpdatedBedTypeBy = Convert.ToString(dbReader["LastUpdatedBedTypeBy"]);
                        if (string.IsNullOrEmpty(dbReader["IsNegativeLetterSent"].ToString()))
                            patientDashboard.IsNegativeLetterSent = false;
                        else
                            patientDashboard.IsNegativeLetterSent = Convert.ToBoolean(dbReader["IsNegativeLetterSent"]);
                        coviddetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return coviddetails;
        }

        public List<clsCOVIDPatientDetails> GetCOVIDPatientDetails(DateTime startdate, DateTime enddate, string patienttype, string agegroup, string testresults, string breathingstatus, string lastlocation, string admissionstatus, int pageindex,
            int pagesize, string searchText, bool IsTotalTestOrders, bool IsTotalTestOrdersInPatients, bool IsPostive, bool IsPositiveICU, bool IsNegative, bool IsPostiveDischarged, bool IsPositiveDeath, bool IsInPatientPositive, bool IsInPatientPending, bool IsInICUPositive, bool IsInICUPending, bool IsPositiveLast24hours, bool IsNegativeLast24hours, bool IsPositiveDischargesLast24hours, bool IsPositiveDeathsLast24hours, string ordercolumn, string sorttype, int userID)
        {
            SqlDataReader dbReader = null;
            List<clsCOVIDPatientDetails> coviddetails = new List<clsCOVIDPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVIDPatientDetails", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startdate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startdate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", DateTime.Now.AddDays(-30));
                    if (enddate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", enddate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", DateTime.Now);
                    //LogException("post add in param::", "", "", System.DateTime.Now);
                    if (patienttype != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patienttype);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "0");
                    if (agegroup != null)
                        dbCmd.Parameters.AddWithValue("@AgeGroup", agegroup);
                    else
                        dbCmd.Parameters.AddWithValue("@AgeGroup", "0");
                    if (testresults != null)
                        dbCmd.Parameters.AddWithValue("@TestResults", testresults);
                    else
                        dbCmd.Parameters.AddWithValue("@TestResults", "0");
                    if (breathingstatus != null)
                        dbCmd.Parameters.AddWithValue("@BreathingStatus", breathingstatus);
                    else
                        dbCmd.Parameters.AddWithValue("@BreathingStatus", "0");
                    if (lastlocation != null)
                        dbCmd.Parameters.AddWithValue("@LastLocation", lastlocation);
                    else
                        dbCmd.Parameters.AddWithValue("@LastLocation", "0");
                    if (admissionstatus != null)
                        dbCmd.Parameters.AddWithValue("@AdmissionStatus", admissionstatus);
                    else
                        dbCmd.Parameters.AddWithValue("@AdmissionStatus", "0");
                    if (admissionstatus != null)
                        dbCmd.Parameters.AddWithValue("@PageIndex", pageindex);
                    else
                        dbCmd.Parameters.AddWithValue("@PageIndex", 1);
                    if (admissionstatus != null)
                        dbCmd.Parameters.AddWithValue("@PageSize", pagesize);
                    else
                        dbCmd.Parameters.AddWithValue("@PageSize", 10);
                    if (searchText != null)
                        dbCmd.Parameters.AddWithValue("@SearchText", searchText);
                    else
                        dbCmd.Parameters.AddWithValue("@SearchText", "");
                    dbCmd.Parameters.AddWithValue("@IsTotalTestOrders", IsTotalTestOrders);
                    dbCmd.Parameters.AddWithValue("@IsTotalTestOrdersInPatients", IsTotalTestOrdersInPatients);
                    dbCmd.Parameters.AddWithValue("@IsPositive", IsPostive);
                    dbCmd.Parameters.AddWithValue("@IsNegative", IsNegative);
                    dbCmd.Parameters.AddWithValue("@IsPositiveICU", IsPositiveICU);
                    dbCmd.Parameters.AddWithValue("@IsPostiveDischarged", IsPostiveDischarged);
                    dbCmd.Parameters.AddWithValue("@IsPositiveDeath", IsPositiveDeath);
                    dbCmd.Parameters.AddWithValue("@IsInPatientPositive", IsInPatientPositive);
                    dbCmd.Parameters.AddWithValue("@IsInPatientPending", IsInPatientPending);
                    dbCmd.Parameters.AddWithValue("@IsInICUPositive", IsInICUPositive);
                    dbCmd.Parameters.AddWithValue("@IsInICUPending", IsInICUPending);
                    dbCmd.Parameters.AddWithValue("@IsPositiveLast24hours", IsPositiveLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsNegativeLast24hours", IsNegativeLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPositiveDischargesLast24hours", IsPositiveDischargesLast24hours);
                    dbCmd.Parameters.AddWithValue("@IsPositiveDeathsLast24hours", IsPositiveDeathsLast24hours);
                    dbCmd.Parameters.AddWithValue("@OrderColumn", ordercolumn);
                    dbCmd.Parameters.AddWithValue("@SortType", sorttype);
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        clsCOVIDPatientDetails patientDashboard = new clsCOVIDPatientDetails();
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["Test_ID"].ToString()))
                            patientDashboard.Test_ID = 0;
                        else
                            patientDashboard.Test_ID = Convert.ToInt32(dbReader["Test_ID"]);
                        if (string.IsNullOrEmpty(dbReader["NoOfAdmissions"].ToString()))
                            patientDashboard.NoOfAdmissions = 0;
                        else
                            patientDashboard.NoOfAdmissions = Convert.ToInt32(dbReader["NoOfAdmissions"]);
                        if (string.IsNullOrEmpty(dbReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dbReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            patientDashboard.PatientID = "";
                        else
                            patientDashboard.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionStatus"].ToString()))
                            patientDashboard.AdmissionStatus = "";
                        else
                            patientDashboard.AdmissionStatus = Convert.ToString(dbReader["AdmissionStatus"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["AdmissionDateTime"].ToString()))
                            patientDashboard.AdmissionDateTime = "";
                        else
                            patientDashboard.AdmissionDateTime = Convert.ToDateTime(dbReader["AdmissionDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeDateTime"].ToString()))
                            patientDashboard.DischargeDateTime = "";
                        else
                            patientDashboard.DischargeDateTime = Convert.ToDateTime(dbReader["DischargeDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["DischargeMethodCode"].ToString()))
                            patientDashboard.DischargeMethodCode = "0";
                        else
                            patientDashboard.DischargeMethodCode = Convert.ToString(dbReader["DischargeMethodCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeMethod"].ToString()))
                            patientDashboard.DischargeMethod = "";
                        else
                            patientDashboard.DischargeMethod = Convert.ToString(dbReader["DischargeMethod"]);
                        if (string.IsNullOrEmpty(dbReader["OrderDateTime"].ToString()))
                            patientDashboard.OrderDateTime = "";
                        else
                            patientDashboard.OrderDateTime = Convert.ToDateTime(dbReader["OrderDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patientDashboard.TestResultDateTime = "";
                        else
                            patientDashboard.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["OrderedBy"].ToString()))
                            patientDashboard.OrderedBy = "";
                        else
                            patientDashboard.OrderedBy = Convert.ToString(dbReader["OrderedBy"]);
                        if (string.IsNullOrEmpty(dbReader["NumberOfTests"].ToString()))
                            patientDashboard.NumberOfTests = 0;
                        else
                            patientDashboard.NumberOfTests = Convert.ToInt32(dbReader["NumberOfTests"]);
                        if (string.IsNullOrEmpty(dbReader["TestStatus"].ToString()))
                            patientDashboard.TestStatus = "";
                        else
                            patientDashboard.TestStatus = Convert.ToString(dbReader["TestStatus"]);
                        if (string.IsNullOrEmpty(dbReader["TestResult"].ToString()))
                            patientDashboard.TestResult = "";
                        else
                            patientDashboard.TestResult = Convert.ToString(dbReader["TestResult"]);
                        if (string.IsNullOrEmpty(dbReader["TestDuration"].ToString()))
                            patientDashboard.TestDuration = 0;
                        else
                            patientDashboard.TestDuration = Convert.ToInt32(dbReader["TestDuration"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatus"].ToString()))
                            patientDashboard.BreathingStatus = "Unknown";
                        else
                            patientDashboard.BreathingStatus = Convert.ToString(dbReader["BreathingStatus"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatusFullText"].ToString()))
                            patientDashboard.BreathingStatusFullText = "Unknown";
                        else
                            patientDashboard.BreathingStatusFullText = Convert.ToString(dbReader["BreathingStatusFullText"]);
                        if (string.IsNullOrEmpty(dbReader["TestOrderLocation"].ToString()))
                            patientDashboard.TestOrderLocation = "";
                        else
                            patientDashboard.TestOrderLocation = Convert.ToString(dbReader["TestOrderLocation"]);
                        if (string.IsNullOrEmpty(dbReader["LastPatientLocation"].ToString()))
                            patientDashboard.LastPatientLocation = "";
                        else
                            patientDashboard.LastPatientLocation = Convert.ToString(dbReader["LastPatientLocation"]);
                        if (string.IsNullOrEmpty(dbReader["BedType"].ToString()))
                            patientDashboard.BedType = "Unknown";
                        else
                            patientDashboard.BedType = Convert.ToString(dbReader["BedType"]);
                        if (string.IsNullOrEmpty(dbReader["BedTypeFullText"].ToString()))
                            patientDashboard.BedTypeFullText = "Unknown";
                        else
                            patientDashboard.BedTypeFullText = Convert.ToString(dbReader["BedTypeFullText"]);
                        if (string.IsNullOrEmpty(dbReader["DateofDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dbReader["DateofDeath"]).ToString("dd/MM/yyy HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["AdmittingWard"].ToString()))
                            patientDashboard.AdmittingWard = Convert.ToString(dbReader["AdmittingWard"]);
                        else
                            patientDashboard.AdmittingWard = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["CareGroup"].ToString()))
                            patientDashboard.CareGroup = "0";
                        else
                            patientDashboard.CareGroup = Convert.ToString(dbReader["CareGroup"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "0";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbitiesCount"].ToString()))
                            patientDashboard.ComorbitiesCount = 0;
                        else
                            patientDashboard.ComorbitiesCount = Convert.ToInt32(dbReader["ComorbitiesCount"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patientDashboard.Age = "0";
                        else
                            patientDashboard.Age = Convert.ToString(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "Unknown";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["IsDisabled"].ToString()))
                            patientDashboard.IsDisabled = false;
                        else
                            patientDashboard.IsDisabled = Convert.ToBoolean(dbReader["IsDisabled"]);
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patientDashboard.TestResultDateTime = "";
                        else
                            patientDashboard.TestResultDateTime = Convert.ToDateTime(dbReader["TestResultDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["TotalTestsOrdered"].ToString()))
                            patientDashboard.TotalTestsOrdered = 0;
                        else
                            patientDashboard.TotalTestsOrdered = Convert.ToInt32(dbReader["TotalTestsOrdered"]);
                        if (string.IsNullOrEmpty(dbReader["TotalTestsOrderedInPatient"].ToString()))
                            patientDashboard.TotalTestsOrderedInPatient = 0;
                        else
                            patientDashboard.TotalTestsOrderedInPatient = Convert.ToInt32(dbReader["TotalTestsOrderedInPatient"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveTestCases"].ToString()))
                            patientDashboard.PositiveTestCases = 0;
                        else
                            patientDashboard.PositiveTestCases = Convert.ToInt32(dbReader["PositiveTestCases"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveRatePercentage"].ToString()))
                            patientDashboard.PositiveRatePercentage = 0;
                        else
                            patientDashboard.PositiveRatePercentage = Convert.ToDecimal(dbReader["PositiveRatePercentage"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveTestCasesICU"].ToString()))
                            patientDashboard.PositiveTestCasesICU = 0;
                        else
                            patientDashboard.PositiveTestCasesICU = Convert.ToInt32(dbReader["PositiveTestCasesICU"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveICURatePercentage"].ToString()))
                            patientDashboard.PositiveICURatePercentage = 0;
                        else
                            patientDashboard.PositiveICURatePercentage = Convert.ToDecimal(dbReader["PositiveICURatePercentage"]);
                        if (string.IsNullOrEmpty(dbReader["NegativeTestCases"].ToString()))
                            patientDashboard.NegativeTestCases = 0;
                        else
                            patientDashboard.NegativeTestCases = Convert.ToInt32(dbReader["NegativeTestCases"]);
                        if (string.IsNullOrEmpty(dbReader["NegativeRatePercentage"].ToString()))
                            patientDashboard.NegativeRatePercentage = 0;
                        else
                            patientDashboard.NegativeRatePercentage = Convert.ToDecimal(dbReader["NegativeRatePercentage"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveDischarges"].ToString()))
                            patientDashboard.PositiveDischarges = 0;
                        else
                            patientDashboard.PositiveDischarges = Convert.ToInt32(dbReader["PositiveDischarges"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveDeaths"].ToString()))
                            patientDashboard.PositiveDeaths = 0;
                        else
                            patientDashboard.PositiveDeaths = Convert.ToInt32(dbReader["PositiveDeaths"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveInPatient"].ToString()))
                            patientDashboard.PositiveInPatient = 0;
                        else
                            patientDashboard.PositiveInPatient = Convert.ToInt32(dbReader["PositiveInPatient"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveInPatientICU"].ToString()))
                            patientDashboard.PositiveInPatientICU = 0;
                        else
                            patientDashboard.PositiveInPatientICU = Convert.ToInt32(dbReader["PositiveInPatientICU"]);
                        if (string.IsNullOrEmpty(dbReader["PendingInPatient"].ToString()))
                            patientDashboard.PendingInPatient = 0;
                        else
                            patientDashboard.PendingInPatient = Convert.ToInt32(dbReader["PendingInPatient"]);
                        if (string.IsNullOrEmpty(dbReader["PendingICUInPatient"].ToString()))
                            patientDashboard.PendingICUInPatient = 0;
                        else
                            patientDashboard.PendingICUInPatient = Convert.ToInt32(dbReader["PendingICUInPatient"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveInPatientLast24hours"].ToString()))
                            patientDashboard.PositiveInPatientLast24hours = 0;
                        else
                            patientDashboard.PositiveInPatientLast24hours = Convert.ToInt32(dbReader["PositiveInPatientLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["NegativeInPatientLast24hours"].ToString()))
                            patientDashboard.NegativeInPatientLast24hours = 0;
                        else
                            patientDashboard.NegativeInPatientLast24hours = Convert.ToInt32(dbReader["NegativeInPatientLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveDischargeCountLast24hours"].ToString()))
                            patientDashboard.PositiveDischargeCountLast24hours = 0;
                        else
                            patientDashboard.PositiveDischargeCountLast24hours = Convert.ToInt32(dbReader["PositiveDischargeCountLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["PositiveDeathCountLast24hours"].ToString()))
                            patientDashboard.PositiveDeathCountLast24hours = 0;
                        else
                            patientDashboard.PositiveDeathCountLast24hours = Convert.ToInt32(dbReader["PositiveDeathCountLast24hours"]);
                        if (string.IsNullOrEmpty(dbReader["BedTypeUpdated"].ToString()))
                            patientDashboard.BedTypeUpdated = 0;
                        else
                            patientDashboard.BedTypeUpdated = Convert.ToInt32(dbReader["BedTypeUpdated"]);
                        if (string.IsNullOrEmpty(dbReader["BreathingStatusUpdated"].ToString()))
                            patientDashboard.BreathingStatusUpdated = 3;
                        else
                            patientDashboard.BreathingStatusUpdated = Convert.ToInt32(dbReader["BreathingStatusUpdated"]);
                        if (string.IsNullOrEmpty(dbReader["LOSDays"].ToString()))
                            patientDashboard.LOSDays = 0;
                        else
                            patientDashboard.LOSDays = Convert.ToInt32(dbReader["LOSDays"]);
                        if (string.IsNullOrEmpty(dbReader["Discharge_Destination_Code"].ToString()))
                            patientDashboard.Discharge_Destination_Code = "";
                        else
                            patientDashboard.Discharge_Destination_Code = Convert.ToString(dbReader["Discharge_Destination_Code"]);
                        if (string.IsNullOrEmpty(dbReader["Discharge_Destination"].ToString()))
                            patientDashboard.Discharge_Destination = "";
                        else
                            patientDashboard.Discharge_Destination = Convert.ToString(dbReader["Discharge_Destination"]);
                        if (string.IsNullOrEmpty(dbReader["Age_Group"].ToString()))
                            patientDashboard.Age_Group = "";
                        else
                            patientDashboard.Age_Group = Convert.ToString(dbReader["Age_Group"]);
                        if (string.IsNullOrEmpty(dbReader["ReadmissionFlag"].ToString()))
                            patientDashboard.ReadmissionFlag = 0;
                        else
                            patientDashboard.ReadmissionFlag = Convert.ToInt32(dbReader["ReadmissionFlag"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsultantName = "";
                        else
                            patientDashboard.DischargeConsultantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dbReader["InICU"].ToString()))
                            patientDashboard.InICU = 0;
                        else
                            patientDashboard.InICU = Convert.ToInt32(dbReader["InICU"]);
                        if (string.IsNullOrEmpty(dbReader["BedNumber"].ToString()))
                            patientDashboard.BedNumber = "";
                        else
                            patientDashboard.BedNumber = Convert.ToString(dbReader["BedNumber"]);
                        if (string.IsNullOrEmpty(dbReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dbReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dbReader["TestResultDateTime"].ToString()))
                            patientDashboard.TestResultDateTime = "";
                        else
                            patientDashboard.TestResultDateTime = Convert.ToString(dbReader["TestResultDateTime"]);
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBreathingDate"].ToString()))
                            patientDashboard.LastUpdatedBreathingDate = "N/A";
                        else
                            patientDashboard.LastUpdatedBreathingDate = Convert.ToDateTime(dbReader["LastUpdatedBreathingDate"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBreathingBy"].ToString()))
                            patientDashboard.LastUpdatedBreathingBy = "N/A";
                        else
                            patientDashboard.LastUpdatedBreathingBy = Convert.ToString(dbReader["LastUpdatedBreathingBy"]);
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBedTypeDate"].ToString()))
                            patientDashboard.LastUpdatedBedTypeDate = "N/A";
                        else
                            patientDashboard.LastUpdatedBedTypeDate = Convert.ToDateTime(dbReader["LastUpdatedBedTypeDate"]).ToString("dd/MM/yyyy HH:mm");
                        if (string.IsNullOrEmpty(dbReader["LastUpdatedBedTypeBy"].ToString()))
                            patientDashboard.LastUpdatedBedTypeBy = "N/A";
                        else
                            patientDashboard.LastUpdatedBedTypeBy = Convert.ToString(dbReader["LastUpdatedBedTypeBy"]);
                        coviddetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDPatientDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return coviddetails;
        }


        /// <summary>
        /// This method brings in all patient lists or brings in a specific patient information based on the
        /// nhs number.
        /// </summary>
        /// <param name="nhsNumber">string</param>
        /// <returns>List<clsPatientDetails>Patient Details List</returns>
        public List<clsPatientDetails> GetPatientDetails(int? patientID, int userID)
        {
            SqlDataReader dbReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetails", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (patientID != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", 0);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dbReader["PatientId"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dbReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dbReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dbReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dbReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dbReader["SJR1"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dbReader["SJR2"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dbReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dbReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dbReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dbReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dbReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dbReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dbReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dbReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dbReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dbReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dbReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dbReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dbReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dbReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dbReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dbReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dbReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dbReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["Occupation"].ToString()))
                            patientDashboard.Occupation = "";
                        else
                            patientDashboard.Occupation = Convert.ToString(dbReader["Occupation"]);
                        if (string.IsNullOrEmpty(dbReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dbReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dbReader["UserRole"].ToString()))
                            patientDashboard.UserRole = "";
                        else
                            patientDashboard.UserRole = Convert.ToString(dbReader["UserRole"]);
                        if (string.IsNullOrEmpty(dbReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dbReader["PatientType"]);
                        if (string.IsNullOrEmpty(dbReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dbReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dbReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dbReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dbReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dbReader["MedCount"]);
                        if (string.IsNullOrEmpty(dbReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dbReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dbReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dbReader["MEOReview"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        

        /// <summary>
        /// This method brings in all patient lists or brings in a specific patient information based on the
        /// nhs number.
        /// </summary>
        /// <param name="nhsNumber">string</param>
        /// <returns>List<clsPatientDetails>Patient Details List</returns>
        public List<clsPatientDetails> GetPatientDetailsByQAP(int pageIndex, int pageSize, int? patientID, int userID, DateTime startDate, DateTime endDate, string dischargeConsultantCode, string wardOfDeath, string dischargeSpecialityCode, string patientType)
        {
            SqlDataReader dataReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByQAP", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@PageIndex", pageIndex);
                    dbCmd.Parameters.AddWithValue("@PageSize", pageSize);
                    if (patientID != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", 0);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (dischargeSpecialityCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", dischargeSpecialityCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dataReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByQAP", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<CORSExtract> GetCORSExtract(DateTime startDate, DateTime endDate, string dischargeConsultantCode, string wardOfDeath, string dischargeSpecialityCode, string patientType, int userID)
        {
            SqlDataReader dataReader = null;
            List<CORSExtract> lstPatientDetails = new List<CORSExtract>();
            
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCORSExtractofDeath", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (!string.IsNullOrEmpty(dischargeConsultantCode))
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "0");
                    if (!string.IsNullOrEmpty(wardOfDeath))
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "0");
                    if (!string.IsNullOrEmpty(dischargeSpecialityCode))
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", dischargeSpecialityCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", "0");
                    if (!string.IsNullOrEmpty(patientType))
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "0");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        CORSExtract extract = new CORSExtract();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            extract.ID = 0;
                        else
                            extract.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientID"].ToString()))
                            extract.PatientID = "";
                        else
                            extract.PatientID = Convert.ToString(dataReader["PatientID"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            extract.SpellNumber = "";
                        else
                            extract.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            extract.PatientName = "";
                        else
                            extract.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            extract.NHSNumber = "";
                        else
                            extract.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            extract.Gender = "";
                        else
                            extract.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            extract.Age = 0;
                        else
                            extract.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            extract.DOB = "";
                        else
                            extract.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateofAdmission"].ToString()))
                            extract.DateofAdmission = "";
                        else
                            extract.DateofAdmission = Convert.ToDateTime(dataReader["DateofAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            extract.TimeofAdmission = "";
                        else
                            extract.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            extract.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            extract.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            extract.DischargeWard = "";
                        else
                            extract.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DateofDeath"].ToString()))
                            extract.DateofDeath = "";
                        else
                            extract.DateofDeath = Convert.ToDateTime(dataReader["DateofDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardofDeath"].ToString()))
                            extract.WardofDeath = "";
                        else
                            extract.WardofDeath = Convert.ToString(dataReader["WardofDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            extract.DischargeConsultantCode = "";
                        else
                            extract.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            extract.DischargeConsultantName = "";
                        else
                            extract.DischargeConsultantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            extract.DischargeSpecialityCode = "";
                        else
                            extract.DischargeSpecialityCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            extract.DischargeSpeciality = "";
                        else
                            extract.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["CareGroup"].ToString()))
                            extract.CareGroup = "";
                        else
                            extract.CareGroup = Convert.ToString(dataReader["CareGroup"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            extract.AdmissionType = "";
                        else
                            extract.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            extract.AgeAtDeath = 0;
                        else
                            extract.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            extract.PatientType = "";
                        else
                            extract.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["SHMIGroup"].ToString()))
                            extract.SHMIGroup = "";
                        else
                            extract.SHMIGroup = Convert.ToString(dataReader["SHMIGroup"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            extract.QAPReview = "";
                        else
                            extract.QAPReview = Convert.ToString(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            extract.MedTriage = "";
                        else
                            extract.MedTriage = Convert.ToString(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            extract.MEOReview = "";
                        else
                            extract.MEOReview = Convert.ToString(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            extract.SJR1 = "";
                        else
                            extract.SJR1 = Convert.ToString(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            extract.SJR2 = "";
                        else
                            extract.SJR2 = Convert.ToString(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            extract.SJROutcome = "";
                        else
                            extract.SJROutcome = Convert.ToString(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            extract.CodingReview = "";
                        else
                            extract.CodingReview = Convert.ToString(dataReader["CodingReview"]);
                        lstPatientDetails.Add(extract);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCORSExtract", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }
        public List<clsPatientDetails> GetPatientDetailsByTotalDeaths(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            SqlDataReader dataReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByTotalDeaths", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByTotalDeaths", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByExpectedDeath(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename,  int causeid, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByDeathExpectation", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dbCmd.Parameters.AddWithValue("@CauseID", causeid);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["CauseID"].ToString()))
                            patientDashboard.CauseID = 0;
                        else
                            patientDashboard.CauseID = Convert.ToInt32(dataReader["CauseID"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByExpectedDeath", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByReviewOutcome(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool mccd, bool referral, bool postmortem, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByReviewOutcome", connection);
                connection.Open();
                try
                {
                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dbCmd.Parameters.AddWithValue("@MCCDIssue", mccd);
                    dbCmd.Parameters.AddWithValue("@CoronerReferral", referral);
                    dbCmd.Parameters.AddWithValue("@PostMortem", postmortem);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["MCCDIssue"].ToString()))
                            patientDashboard.MCCDIssue = false;
                        else
                            patientDashboard.MCCDIssue = Convert.ToBoolean(dataReader["MCCDIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dataReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dataReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dataReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByReviewOutcome", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByCareQuality(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByCareQuality", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["MCCDIssue"].ToString()))
                            patientDashboard.MCCDIssue = false;
                        else
                            patientDashboard.MCCDIssue = Convert.ToBoolean(dataReader["MCCDIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dataReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dataReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dataReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["Concern"].ToString()))
                            patientDashboard.Concern = false;
                        else
                            patientDashboard.Concern = Convert.ToBoolean(dataReader["Concern"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByCareQuality", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByRecommendedReferral(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByRecommendedReferral", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["MCCDIssue"].ToString()))
                            patientDashboard.MCCDIssue = false;
                        else
                            patientDashboard.MCCDIssue = Convert.ToBoolean(dataReader["MCCDIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dataReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dataReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dataReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["Referral"].ToString()))
                            patientDashboard.Referral = false;
                        else
                            patientDashboard.Referral = Convert.ToBoolean(dataReader["Referral"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByRecommendedReferral", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByOtherReferral(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool patientsiri, bool safeguard, bool learningdisability, bool childdeath, bool wardteam, bool headcompliance, bool palscomplaints, bool other, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByReferrals", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");
                    dbCmd.Parameters.AddWithValue("@PatientSIRI", patientsiri);
                    dbCmd.Parameters.AddWithValue("@SafeGuard", safeguard);
                    dbCmd.Parameters.AddWithValue("@LearningDisability", learningdisability);
                    dbCmd.Parameters.AddWithValue("@ChildDeath", childdeath);
                    dbCmd.Parameters.AddWithValue("@WardTeam", wardteam);
                    dbCmd.Parameters.AddWithValue("@HeadOfCompliance", headcompliance);
                    dbCmd.Parameters.AddWithValue("@PALsComplaints", palscomplaints);
                    dbCmd.Parameters.AddWithValue("@Other", other);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["MCCDIssue"].ToString()))
                            patientDashboard.MCCDIssue = false;
                        else
                            patientDashboard.MCCDIssue = Convert.ToBoolean(dataReader["MCCDIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dataReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dataReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dataReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["PatientSIRI"].ToString()))
                            patientDashboard.PatientSIRI = false;
                        else
                            patientDashboard.PatientSIRI = Convert.ToBoolean(dataReader["PatientSIRI"]);
                        if (string.IsNullOrEmpty(dataReader["SafeGuard"].ToString()))
                            patientDashboard.SafeGuard = false;
                        else
                            patientDashboard.SafeGuard = Convert.ToBoolean(dataReader["SafeGuard"]);
                        if (string.IsNullOrEmpty(dataReader["LearningDisability"].ToString()))
                            patientDashboard.LearningDisability = false;
                        else
                            patientDashboard.LearningDisability = Convert.ToBoolean(dataReader["LearningDisability"]);
                        if (string.IsNullOrEmpty(dataReader["ChildDeath"].ToString()))
                            patientDashboard.ChildDeath = false;
                        else
                            patientDashboard.ChildDeath = Convert.ToBoolean(dataReader["ChildDeath"]);
                        if (string.IsNullOrEmpty(dataReader["WardTeam"].ToString()))
                            patientDashboard.WardTeam = false;
                        else
                            patientDashboard.WardTeam = Convert.ToBoolean(dataReader["WardTeam"]);
                        if (string.IsNullOrEmpty(dataReader["HeadOfCompliance"].ToString()))
                            patientDashboard.HeadOfCompliance = false;
                        else
                            patientDashboard.HeadOfCompliance = Convert.ToBoolean(dataReader["HeadOfCompliance"]);
                        if (string.IsNullOrEmpty(dataReader["PALsComplaints"].ToString()))
                            patientDashboard.PALsComplaints = false;
                        else
                            patientDashboard.PALsComplaints = Convert.ToBoolean(dataReader["PALsComplaints"]);
                        if (string.IsNullOrEmpty(dataReader["Other"].ToString()))
                            patientDashboard.Other = false;
                        else
                            patientDashboard.Other = Convert.ToBoolean(dataReader["Other"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByOtherReferral", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByProblemOccured(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByProblemOccured", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["MCCDIssue"].ToString()))
                            patientDashboard.MCCDIssue = false;
                        else
                            patientDashboard.MCCDIssue = Convert.ToBoolean(dataReader["MCCDIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dataReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dataReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dataReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["ProblemOccured"].ToString()))
                            patientDashboard.ProblemOccured = false;
                        else
                            patientDashboard.ProblemOccured = Convert.ToBoolean(dataReader["ProblemOccured"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByProblemOccured", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByKeyLearnings(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByKeyLearnings", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["MCCDIssue"].ToString()))
                            patientDashboard.MCCDIssue = false;
                        else
                            patientDashboard.MCCDIssue = Convert.ToBoolean(dataReader["MCCDIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dataReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dataReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dataReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["ProblemOccured"].ToString()))
                            patientDashboard.ProblemOccured = false;
                        else
                            patientDashboard.ProblemOccured = Convert.ToBoolean(dataReader["ProblemOccured"]);
                        if (string.IsNullOrEmpty(dataReader["KeyLearnings"].ToString()))
                            patientDashboard.KeyLearnings = "";
                        else
                            patientDashboard.KeyLearnings = Convert.ToString(dataReader["KeyLearnings"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByKeyLearnings", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJR(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool IsCompleted, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);

                    dbCmd.Parameters.AddWithValue("@IsCompleted", IsCompleted);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJR", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJR2(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool IsCompleted, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR2", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);

                    dbCmd.Parameters.AddWithValue("@IsCompleted", IsCompleted);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJR2", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJRGrade1(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool grade0, bool grade1, bool grade2, bool grade3, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR1Grade1", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade0", grade0);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade1", grade1);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade2", grade2);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade3", grade3);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["AvoidabilityScoreID"].ToString()))
                            patientDashboard.AvoidabilityScoreID = 0;
                        else
                            patientDashboard.AvoidabilityScoreID = Convert.ToInt32(dataReader["AvoidabilityScoreID"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJRGrade1", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJRGrade(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool grade0, bool grade2, bool grade3, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR1Grade1", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade0", grade0);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade2", grade2);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade3", grade3);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["AvoidabilityScoreID"].ToString()))
                            patientDashboard.AvoidabilityScoreID = 0;
                        else
                            patientDashboard.AvoidabilityScoreID = Convert.ToInt32(dataReader["AvoidabilityScoreID"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJRGrade", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJR2Grade(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool grade0, bool grade1, bool grade2, bool grade3, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR2Grade", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade0", grade0);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade1", grade1);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade2", grade2);
                    dbCmd.Parameters.AddWithValue("@SJR1Grade3", grade3);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["AvoidabilityScoreID"].ToString()))
                            patientDashboard.AvoidabilityScoreID = 0;
                        else
                            patientDashboard.AvoidabilityScoreID = Convert.ToInt32(dataReader["AvoidabilityScoreID"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJR2Grade", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJR1Care(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool verypoor, bool poor, bool adequate, bool good, bool excellent, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR1Care", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@VeryPoor", verypoor);
                    dbCmd.Parameters.AddWithValue("@Poor", poor);
                    dbCmd.Parameters.AddWithValue("@Adequate", adequate);
                    dbCmd.Parameters.AddWithValue("@Good", good);
                    dbCmd.Parameters.AddWithValue("@Excellent", excellent);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJR1Care", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJR2Care(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool verypoor, bool poor, bool adequate, bool good, bool excellent, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR2Care", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@VeryPoor", verypoor);
                    dbCmd.Parameters.AddWithValue("@Poor", poor);
                    dbCmd.Parameters.AddWithValue("@Adequate", adequate);
                    dbCmd.Parameters.AddWithValue("@Good", good);
                    dbCmd.Parameters.AddWithValue("@Excellent", excellent);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJR2Care", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByMSGGrade(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool grade0, bool grade2, bool grade3, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByMSGGrade", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@MSGGrade0", grade0);
                    dbCmd.Parameters.AddWithValue("@MSGGrade2", grade2);
                    dbCmd.Parameters.AddWithValue("@MSGGrade3", grade3);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["MSGAvoidabilityScoreID"].ToString()))
                            patientDashboard.MSGAvoidabilityScoreID = 0;
                        else
                            patientDashboard.MSGAvoidabilityScoreID = Convert.ToInt32(dataReader["MSGAvoidabilityScoreID"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByMSGGrade", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByCoronerDecision(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool nfaction, bool postmortem, bool forensicpm, bool gpissue, bool inquest, bool a100, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByCoronerDecision", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@NFAction", nfaction);
                    dbCmd.Parameters.AddWithValue("@PostMortem", postmortem);
                    dbCmd.Parameters.AddWithValue("@ForensicPM", forensicpm);
                    dbCmd.Parameters.AddWithValue("@GPIssue", gpissue);
                    dbCmd.Parameters.AddWithValue("@Inquest", inquest);
                    dbCmd.Parameters.AddWithValue("@A100", a100);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerDecisionNFAction"].ToString()))
                            patientDashboard.CoronerDecisionNFAction = false;
                        else
                            patientDashboard.CoronerDecisionNFAction = Convert.ToBoolean(dataReader["CoronerDecisionNFAction"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerDecisionPostMortem"].ToString()))
                            patientDashboard.CoronerDecisionPostMortem = false;
                        else
                            patientDashboard.CoronerDecisionPostMortem = Convert.ToBoolean(dataReader["CoronerDecisionPostMortem"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerDecisionForensicPM"].ToString()))
                            patientDashboard.CoronerDecisionForensicPM = false;
                        else
                            patientDashboard.CoronerDecisionForensicPM = Convert.ToBoolean(dataReader["CoronerDecisionForensicPM"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerDecisionGPIssue"].ToString()))
                            patientDashboard.CoronerDecisionGPIssue = false;
                        else
                            patientDashboard.CoronerDecisionGPIssue = Convert.ToBoolean(dataReader["CoronerDecisionGPIssue"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerDecisionInquest"].ToString()))
                            patientDashboard.CoronerDecisionInquest = false;
                        else
                            patientDashboard.CoronerDecisionInquest = Convert.ToBoolean(dataReader["CoronerDecisionInquest"]);
                        if (string.IsNullOrEmpty(dataReader["CoronerDecision100A"].ToString()))
                            patientDashboard.CoronerDecision100A = false;
                        else
                            patientDashboard.CoronerDecision100A = Convert.ToBoolean(dataReader["CoronerDecision100A"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByCoronerDecision", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByReason(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool learning, bool paeds, bool mental, bool elective, bool nok, bool chemo, bool other, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByReason", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@Learning", learning);
                    dbCmd.Parameters.AddWithValue("@Paeds", paeds);
                    dbCmd.Parameters.AddWithValue("@Mental", mental);
                    dbCmd.Parameters.AddWithValue("@Elective", elective);
                    dbCmd.Parameters.AddWithValue("@NOK", nok);
                    dbCmd.Parameters.AddWithValue("@Chemo", chemo);
                    dbCmd.Parameters.AddWithValue("@Other", other);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        if (string.IsNullOrEmpty(dataReader["LearningDisabilityPatient"].ToString()))
                            patientDashboard.LearningDisabilityPatient = false;
                        else
                            patientDashboard.LearningDisabilityPatient = Convert.ToBoolean(dataReader["LearningDisabilityPatient"]);
                        if (string.IsNullOrEmpty(dataReader["PaediatricPatient"].ToString()))
                            patientDashboard.PaediatricPatient = false;
                        else
                            patientDashboard.PaediatricPatient = Convert.ToBoolean(dataReader["PaediatricPatient"]);
                        if (string.IsNullOrEmpty(dataReader["MentalillnessPatient"].ToString()))
                            patientDashboard.MentalillnessPatient = false;
                        else
                            patientDashboard.MentalillnessPatient = Convert.ToBoolean(dataReader["MentalillnessPatient"]);
                        if (string.IsNullOrEmpty(dataReader["ElectiveAdmission"].ToString()))
                            patientDashboard.ElectiveAdmission = false;
                        else
                            patientDashboard.ElectiveAdmission = Convert.ToBoolean(dataReader["ElectiveAdmission"]);
                        if (string.IsNullOrEmpty(dataReader["NoKConcernsDeath"].ToString()))
                            patientDashboard.NoKConcernsDeath = false;
                        else
                            patientDashboard.NoKConcernsDeath = Convert.ToBoolean(dataReader["NoKConcernsDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DeathChemo"].ToString()))
                            patientDashboard.DeathChemo = false;
                        else
                            patientDashboard.DeathChemo = Convert.ToBoolean(dataReader["DeathChemo"]);
                        if (string.IsNullOrEmpty(dataReader["OtherConcern"].ToString()))
                            patientDashboard.OtherConcern = false;
                        else
                            patientDashboard.OtherConcern = Convert.ToBoolean(dataReader["OtherConcern"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByReason", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByFeedbackType(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int feedbackID, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByFeedbackType", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    dbCmd.Parameters.AddWithValue("@FeedbackTypeID", feedbackID);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByFeedbackType", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByAboveRecognition(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByAboveRecognition", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    //dbCmd.Parameters.AddWithValue("@FeedbackTypeID", feedbackID);
                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);

                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByAboveRecognition", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJRRequired(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool required, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJRRequired", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");
                    dbCmd.Parameters.AddWithValue("@SJRRequired", required);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJRRequired", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsBySJR2Required(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool required, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsBySJR2Required", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");
                    dbCmd.Parameters.AddWithValue("@SJRRequired", required);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsBySJR2Required", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByMEReview(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool iscompleted, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByMEReview", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");
                    dbCmd.Parameters.AddWithValue("@IsCompleted", iscompleted);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByMEReview", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetPatientDetailsByQAPReview(DateTime startDate, DateTime endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, bool iscompleted, int userID)
        {
            SqlDataReader dataReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByQAPReview", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (caregroup != null)
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (speciality != null)
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (mename != null)
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");
                    dbCmd.Parameters.AddWithValue("@IsCompleted", iscompleted);

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByQAPReview", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }

        /// <summary>
        /// This method brings in all patient lists or brings in a specific patient information based on the
        /// nhs number.
        /// </summary>
        /// <param name="nhsNumber">string</param>
        /// <returns>List<clsPatientDetails>Patient Details List</returns>
        public List<clsPatientDetails> GetPatientDetailsByMedTriage(int pageIndex, int pageSize, int? patientID, int userID, DateTime startDate, DateTime endDate, string dischargeConsultantCode, string wardOfDeath, string dischargeSpecialityCode, string patientType)
        {
            SqlDataReader dataReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByMedTriage", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@PageIndex", pageIndex);
                    dbCmd.Parameters.AddWithValue("@PageSize", pageSize);
                    if (patientID != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", 0);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (dischargeSpecialityCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", dischargeSpecialityCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dataReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);

                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByMedTriage", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }



        public List<clsPatientDetails> GetPatientDetailsByMEOReview(int pageIndex, int pageSize, int? patientID, int userID, DateTime startDate, DateTime endDate, string dischargeConsultantCode, string wardOfDeath, string dischargeSpecialityCode, string patientType)
        {
            SqlDataReader dataReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDashboardDetailsByMEOReview", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@PageIndex", pageIndex);
                    dbCmd.Parameters.AddWithValue("@PageSize", pageSize);
                    if (patientID != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", patientID);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", 0);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    if (startDate != null)
                        dbCmd.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCmd.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (dischargeSpecialityCode != null)
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", dischargeSpecialityCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeSpecialityCode", "");
                    if (patientType != null)
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");

                    dataReader = dbCmd.ExecuteReader();
                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dataReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "0";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                    //LogException("After loop", this.ToString(), "ValidateUser", System.DateTime.Now);
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByMEOReview", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCmd = null;
                }
            }
            return lstPatientDetails;
        }
        /// <summary>
        /// This method brings in all patient lists or brings in a specific patient information based on the
        /// nhs number.
        /// </summary>
        /// <param name="nhsNumber">string</param>
        /// <returns>List<clsPatientDetails>Patient Details List</returns>
        public List<clsPatientDetails> GetPatientDetailsByID(int? id, int userID)
        {
            IDataReader dbReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            List<NextOfKin> lstNextOfKin = new List<NextOfKin>();
            clsPatientDetails patientDashboard = new clsPatientDetails();
            NextOfKin nextOfkin;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDetailsByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["CRCreatedBy"].ToString()))
                            patientDashboard.CRCreatedBy = 0;
                        else
                            patientDashboard.CRCreatedBy = Convert.ToInt32(dbReader["CRCreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dbReader["PatientId"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["CRCreatedByName"].ToString()))
                            patientDashboard.CRCreatedByName = "";
                        else
                            patientDashboard.CRCreatedByName = Convert.ToString(dbReader["CRCreatedByName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dbReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dbReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["CRCreatedDate"].ToString()))
                            patientDashboard.CRCreatedDate = "";
                        else
                            patientDashboard.CRCreatedDate = Convert.ToDateTime(dbReader["CRCreatedDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dbReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dbReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dbReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dbReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dbReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dbReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dbReader["SJR1"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dbReader["SJR2"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dbReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dbReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dbReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dbReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dbReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dbReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dbReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dbReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dbReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dbReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dbReader["Comments"].ToString()))
                            patientDashboard.Comments = "";
                        else
                            patientDashboard.Comments = Convert.ToString(dbReader["Comments"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dbReader["ComorbiditiesCount"]);
                        //if (!string.IsNullOrEmpty(dbReader["DiagnosisCount"].ToString()))
                        //    patientDashboard.DiagnosisCount = 0;
                        //else
                        patientDashboard.DiagnosisCount = Convert.ToInt32(dbReader["DiagnosisCount"]);
                        //if (!string.IsNullOrEmpty(dbReader["ProcedureCount"].ToString()))
                        //    patientDashboard.ProcedureCount = 0;
                        //else
                        patientDashboard.ProcedureCount = Convert.ToInt32(dbReader["ProcedureCount"]);
                        if (string.IsNullOrEmpty(dbReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dbReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["CodingIssueIdentified"].ToString()))
                            patientDashboard.CodingIssueIdentified = false;
                        else
                            patientDashboard.CodingIssueIdentified = Convert.ToBoolean(dbReader["CodingIssueIdentified"]);
                        if (string.IsNullOrEmpty(dbReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dbReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["Occupation"].ToString()))
                            patientDashboard.Occupation = "";
                        else
                            patientDashboard.Occupation = Convert.ToString(dbReader["Occupation"]);
                        if (string.IsNullOrEmpty(dbReader["UserRole"].ToString()))
                            patientDashboard.UserRole = "";
                        else
                            patientDashboard.UserRole = Convert.ToString(dbReader["UserRole"]);
                        if (string.IsNullOrEmpty(dbReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dbReader["PatientType"]);
                        if (string.IsNullOrEmpty(dbReader["DataQualityComments"].ToString()))
                            patientDashboard.PatientType = "";
                        else
                            patientDashboard.DataQualityIssueComments = Convert.ToString(dbReader["DataQualityComments"]);
                        if (string.IsNullOrEmpty(dbReader["DataQualityIssuesIdentified"].ToString()))
                            patientDashboard.DataQualityIssuesIdentified = false;
                        else
                            patientDashboard.DataQualityIssuesIdentified = Convert.ToBoolean(dbReader["DataQualityIssuesIdentified"]);
                        if (string.IsNullOrEmpty(dbReader["UrgentMEReview"].ToString()))
                            patientDashboard.UrgentMEReview = false;
                        else
                            patientDashboard.UrgentMEReview = Convert.ToBoolean(dbReader["UrgentMEReview"]);
                        if (string.IsNullOrEmpty(dbReader["UrgentMEReviewComment"].ToString()))
                            patientDashboard.UrgentMEReviewComment = "";
                        else
                            patientDashboard.UrgentMEReviewComment = Convert.ToString(dbReader["UrgentMEReviewComment"]);
                        if (string.IsNullOrEmpty(dbReader["GPSurgery"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.GPSurgery = Convert.ToString(dbReader["GPSurgery"]);

                        if (string.IsNullOrEmpty(dbReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dbReader["PrimaryDiagnosis"]);

                        if (string.IsNullOrEmpty(dbReader["PrimaryProcedure"].ToString()))
                            patientDashboard.PrimaryProcedure = "";
                        else
                            patientDashboard.PrimaryProcedure = Convert.ToString(dbReader["PrimaryProcedure"]);
                        if (string.IsNullOrEmpty(dbReader["SHMICode"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.SHMICode = Convert.ToString(dbReader["SHMICode"]);
                        if (string.IsNullOrEmpty(dbReader["SHMIGroup"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.SHMIGroup = Convert.ToString(dbReader["SHMIGroup"]);
                        if (string.IsNullOrEmpty(dbReader["IsEnabled"].ToString()))
                            patientDashboard.IsEnabled = false;
                        else
                            patientDashboard.IsEnabled = Convert.ToBoolean(dbReader["IsEnabled"]);
                        lstPatientDetails.Add(patientDashboard);
                    }

                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            nextOfkin = new NextOfKin();
                            if (string.IsNullOrEmpty(dbReader["Patient_ID"].ToString()))
                                nextOfkin.PatientID = "";
                            else
                                nextOfkin.PatientID = Convert.ToString(dbReader["Patient_ID"]);
                            if (string.IsNullOrEmpty(dbReader["RelativeName"].ToString()))
                                nextOfkin.RelativeName = "";
                            else
                                nextOfkin.RelativeName = Convert.ToString(dbReader["RelativeName"]);
                            if (string.IsNullOrEmpty(dbReader["RelativeTelNo"].ToString()))
                                nextOfkin.RelativeTelNo = "";
                            else
                                nextOfkin.RelativeTelNo = Convert.ToString(dbReader["RelativeTelNo"]);

                            if (string.IsNullOrEmpty(dbReader["Relationship"].ToString()))
                                nextOfkin.Relationship = "";
                            else
                                nextOfkin.Relationship = Convert.ToString(dbReader["Relationship"]);

                            if (string.IsNullOrEmpty(dbReader["PresentAtDeath"].ToString()))
                                nextOfkin.PresentAtDeath = false;
                            else
                                nextOfkin.PresentAtDeath = Convert.ToBoolean(dbReader["PresentAtDeath"]);

                            if (string.IsNullOrEmpty(dbReader["IsInformed"].ToString()))
                                nextOfkin.IsInformed = false;
                            else
                                nextOfkin.IsInformed = Convert.ToBoolean(dbReader["IsInformed"]);

                            if (string.IsNullOrEmpty(dbReader["NextOfKinID"].ToString()))
                                nextOfkin.NextOfKinID = 0;
                            else
                                nextOfkin.NextOfKinID = Convert.ToInt32(dbReader["NextOfKinID"]);
                            lstNextOfKin.Add(nextOfkin);
                        }
                    }
                    patientDashboard.lstNEXTKin = lstNextOfKin;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (patientDashboard.ID == 0 || patientDashboard.ID == null) patientDashboard.ID = Convert.ToInt32(id);
            return lstPatientDetails;
        }

        public clsPatientDetails GetPatientDetailsByPatientID(int? id, int userID)
        {
            IDataReader dbReader = null;
            List<NextOfKin> lstNextOfKin = new List<NextOfKin>();
            clsPatientDetails patientDashboard = new clsPatientDetails();
            NextOfKin nextOfkin;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDetailsByPatientID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["CRCreatedBy"].ToString()))
                            patientDashboard.CRCreatedBy = 0;
                        else
                            patientDashboard.CRCreatedBy = Convert.ToInt32(dbReader["CRCreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dbReader["PatientId"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["CRCreatedByName"].ToString()))
                            patientDashboard.CRCreatedByName = "";
                        else
                            patientDashboard.CRCreatedByName = Convert.ToString(dbReader["CRCreatedByName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dbReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dbReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["CRCreatedDate"].ToString()))
                            patientDashboard.CRCreatedDate = "";
                        else
                            patientDashboard.CRCreatedDate = Convert.ToDateTime(dbReader["CRCreatedDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dbReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dbReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dbReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dbReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dbReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dbReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dbReader["SJR1"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dbReader["SJR2"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dbReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dbReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dbReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dbReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dbReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dbReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dbReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dbReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dbReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dbReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dbReader["Comments"].ToString()))
                            patientDashboard.Comments = "";
                        else
                            patientDashboard.Comments = Convert.ToString(dbReader["Comments"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dbReader["ComorbiditiesCount"]);
                        //if (!string.IsNullOrEmpty(dbReader["DiagnosisCount"].ToString()))
                        //    patientDashboard.DiagnosisCount = 0;
                        //else
                        patientDashboard.DiagnosisCount = Convert.ToInt32(dbReader["DiagnosisCount"]);
                        //if (!string.IsNullOrEmpty(dbReader["ProcedureCount"].ToString()))
                        //    patientDashboard.ProcedureCount = 0;
                        //else
                        patientDashboard.ProcedureCount = Convert.ToInt32(dbReader["ProcedureCount"]);
                        if (string.IsNullOrEmpty(dbReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dbReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["CodingIssueIdentified"].ToString()))
                            patientDashboard.CodingIssueIdentified = false;
                        else
                            patientDashboard.CodingIssueIdentified = Convert.ToBoolean(dbReader["CodingIssueIdentified"]);
                        if (string.IsNullOrEmpty(dbReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dbReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["Occupation"].ToString()))
                            patientDashboard.Occupation = "";
                        else
                            patientDashboard.Occupation = Convert.ToString(dbReader["Occupation"]);
                        if (string.IsNullOrEmpty(dbReader["UserRole"].ToString()))
                            patientDashboard.UserRole = "";
                        else
                            patientDashboard.UserRole = Convert.ToString(dbReader["UserRole"]);
                        if (string.IsNullOrEmpty(dbReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dbReader["PatientType"]);
                        if (string.IsNullOrEmpty(dbReader["DataQualityComments"].ToString()))
                            patientDashboard.PatientType = "";
                        else
                            patientDashboard.DataQualityIssueComments = Convert.ToString(dbReader["DataQualityComments"]);
                        if (string.IsNullOrEmpty(dbReader["DataQualityIssuesIdentified"].ToString()))
                            patientDashboard.DataQualityIssuesIdentified = false;
                        else
                            patientDashboard.DataQualityIssuesIdentified = Convert.ToBoolean(dbReader["DataQualityIssuesIdentified"]);
                        if (string.IsNullOrEmpty(dbReader["UrgentMEReview"].ToString()))
                            patientDashboard.UrgentMEReview = false;
                        else
                            patientDashboard.UrgentMEReview = Convert.ToBoolean(dbReader["UrgentMEReview"]);
                        if (string.IsNullOrEmpty(dbReader["UrgentMEReviewComment"].ToString()))
                            patientDashboard.UrgentMEReviewComment = "";
                        else
                            patientDashboard.UrgentMEReviewComment = Convert.ToString(dbReader["UrgentMEReviewComment"]);
                        if (string.IsNullOrEmpty(dbReader["GPSurgery"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.GPSurgery = Convert.ToString(dbReader["GPSurgery"]);

                        if (string.IsNullOrEmpty(dbReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dbReader["PrimaryDiagnosis"]);

                        if (string.IsNullOrEmpty(dbReader["PrimaryProcedure"].ToString()))
                            patientDashboard.PrimaryProcedure = "";
                        else
                            patientDashboard.PrimaryProcedure = Convert.ToString(dbReader["PrimaryProcedure"]);
                        if (string.IsNullOrEmpty(dbReader["SHMICode"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.SHMICode = Convert.ToString(dbReader["SHMICode"]);
                        if (string.IsNullOrEmpty(dbReader["SHMIGroup"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.SHMIGroup = Convert.ToString(dbReader["SHMIGroup"]);
                        if (string.IsNullOrEmpty(dbReader["IsEnabled"].ToString()))
                            patientDashboard.IsEnabled = false;
                        else
                            patientDashboard.IsEnabled = Convert.ToBoolean(dbReader["IsEnabled"]);
                    }

                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            nextOfkin = new NextOfKin();
                            if (string.IsNullOrEmpty(dbReader["Patient_ID"].ToString()))
                                nextOfkin.PatientID = "";
                            else
                                nextOfkin.PatientID = Convert.ToString(dbReader["Patient_ID"]);
                            if (string.IsNullOrEmpty(dbReader["RelativeName"].ToString()))
                                nextOfkin.RelativeName = "";
                            else
                                nextOfkin.RelativeName = Convert.ToString(dbReader["RelativeName"]);
                            if (string.IsNullOrEmpty(dbReader["RelativeTelNo"].ToString()))
                                nextOfkin.RelativeTelNo = "";
                            else
                                nextOfkin.RelativeTelNo = Convert.ToString(dbReader["RelativeTelNo"]);

                            if (string.IsNullOrEmpty(dbReader["Relationship"].ToString()))
                                nextOfkin.Relationship = "";
                            else
                                nextOfkin.Relationship = Convert.ToString(dbReader["Relationship"]);

                            if (string.IsNullOrEmpty(dbReader["PresentAtDeath"].ToString()))
                                nextOfkin.PresentAtDeath = false;
                            else
                                nextOfkin.PresentAtDeath = Convert.ToBoolean(dbReader["PresentAtDeath"]);

                            if (string.IsNullOrEmpty(dbReader["IsInformed"].ToString()))
                                nextOfkin.IsInformed = false;
                            else
                                nextOfkin.IsInformed = Convert.ToBoolean(dbReader["IsInformed"]);

                            if (string.IsNullOrEmpty(dbReader["NextOfKinID"].ToString()))
                                nextOfkin.NextOfKinID = 0;
                            else
                                nextOfkin.NextOfKinID = Convert.ToInt32(dbReader["NextOfKinID"]);
                            lstNextOfKin.Add(nextOfkin);
                        }
                    }
                    patientDashboard.lstNEXTKin = lstNextOfKin;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailsByPatientID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (patientDashboard.ID == 0 || patientDashboard.ID == null) patientDashboard.ID = Convert.ToInt32(id);
            return patientDashboard;
        }

        public SJR1Report GetSJR1Report(int? id, int userID)
        {
            IDataReader dbReader = null;
            SJR1Report patientDashboard = new SJR1Report();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetSJR1ReportByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            patientDashboard.PatientID = "";
                        else
                            patientDashboard.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["InitialManagement"].ToString()))
                            patientDashboard.InitialManagement = "";
                        else
                            patientDashboard.InitialManagement = Convert.ToString(dbReader["InitialManagement"]);
                        if (string.IsNullOrEmpty(dbReader["InitialManagementRating"].ToString()))
                            patientDashboard.InitialManagementRating = "";
                        else
                            patientDashboard.InitialManagementRating = Convert.ToString(dbReader["InitialManagementRating"]);
                        if (string.IsNullOrEmpty(dbReader["OngoingCare"].ToString()))
                            patientDashboard.OngoingCare = "";
                        else
                            patientDashboard.OngoingCare = Convert.ToString(dbReader["OngoingCare"]);
                        if (string.IsNullOrEmpty(dbReader["OngoingCareRating"].ToString()))
                            patientDashboard.OngoingCareRating = "";
                        else
                            patientDashboard.OngoingCareRating = Convert.ToString(dbReader["OngoingCareRating"]);
                        if (string.IsNullOrEmpty(dbReader["CareDuringProcedure"].ToString()))
                            patientDashboard.CareDuringProcedure = "";
                        else
                            patientDashboard.CareDuringProcedure = Convert.ToString(dbReader["CareDuringProcedure"]);
                        if (string.IsNullOrEmpty(dbReader["CareDuringProcedureRating"].ToString()))
                            patientDashboard.CareDuringProcedureRating = "";
                        else
                            patientDashboard.CareDuringProcedureRating = Convert.ToString(dbReader["CareDuringProcedureRating"]);
                        if (string.IsNullOrEmpty(dbReader["EndLifeCare"].ToString()))
                            patientDashboard.EndLifeCare = "";
                        else
                            patientDashboard.EndLifeCare = Convert.ToString(dbReader["EndLifeCare"]);
                        if (string.IsNullOrEmpty(dbReader["EndLifeCareRating"].ToString()))
                            patientDashboard.EndLifeCareRating = "";
                        else
                            patientDashboard.EndLifeCareRating = Convert.ToString(dbReader["EndLifeCareRating"]);
                        if (string.IsNullOrEmpty(dbReader["OverAllAssessment"].ToString()))
                            patientDashboard.OverAllAssessment = "";
                        else
                            patientDashboard.OverAllAssessment = Convert.ToString(dbReader["OverAllAssessment"]);
                        if (string.IsNullOrEmpty(dbReader["OverAllAssessmentRating"].ToString()))
                            patientDashboard.OverAllAssessmentRating = "";
                        else
                            patientDashboard.OverAllAssessmentRating = Convert.ToString(dbReader["OverAllAssessmentRating"]);
                        if (string.IsNullOrEmpty(dbReader["QualityDocumentationRating"].ToString()))
                            patientDashboard.QualityDocumentationRating = "";
                        else
                            patientDashboard.QualityDocumentationRating = Convert.ToString(dbReader["QualityDocumentationRating"]);
                        if (string.IsNullOrEmpty(dbReader["ProblemOccured"].ToString()))
                            patientDashboard.ProblemOccured = false;
                        else
                            patientDashboard.ProblemOccured = Convert.ToBoolean(dbReader["ProblemOccured"]);
                        if (string.IsNullOrEmpty(dbReader["AssessmentResponseID"].ToString()))
                            patientDashboard.AssessmentResponseID = 0;
                        else
                            patientDashboard.AssessmentResponseID = Convert.ToInt32(dbReader["AssessmentResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["AssessmentCarePhaseID"].ToString()))
                            patientDashboard.AssessmentCarePhaseID = 0;
                        else
                            patientDashboard.AssessmentCarePhaseID = Convert.ToInt32(dbReader["AssessmentCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["MedicationResponseID"].ToString()))
                            patientDashboard.MedicationResponseID = 0;
                        else
                            patientDashboard.MedicationResponseID = Convert.ToInt32(dbReader["MedicationResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["TreatmentCarePhaseID"].ToString()))
                            patientDashboard.TreatmentCarePhaseID = 0;
                        else
                            patientDashboard.TreatmentCarePhaseID = Convert.ToInt32(dbReader["TreatmentCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["InfectionResponseID"].ToString()))
                            patientDashboard.InfectionResponseID = 0;
                        else
                            patientDashboard.InfectionResponseID = Convert.ToInt32(dbReader["InfectionResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["InfectionCarePhaseID"].ToString()))
                            patientDashboard.InfectionCarePhaseID = 0;
                        else
                            patientDashboard.InfectionCarePhaseID = Convert.ToInt32(dbReader["InfectionCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["ProcedureResponseID"].ToString()))
                            patientDashboard.ProcedureResponseID = 0;
                        else
                            patientDashboard.ProcedureResponseID = Convert.ToInt32(dbReader["ProcedureResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["ProcedureCarePhaseID"].ToString()))
                            patientDashboard.ProcedureCarePhaseID = 0;
                        else
                            patientDashboard.ProcedureCarePhaseID = Convert.ToInt32(dbReader["ProcedureCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["MonitoringResponseID"].ToString()))
                            patientDashboard.MonitoringResponseID = 0;
                        else
                            patientDashboard.MonitoringResponseID = Convert.ToInt32(dbReader["MonitoringResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["ResuscitationResponseID"].ToString()))
                            patientDashboard.ResuscitationResponseID = 0;
                        else
                            patientDashboard.ResuscitationResponseID = Convert.ToInt32(dbReader["ResuscitationResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["OthertypeResponseID"].ToString()))
                            patientDashboard.OthertypeResponseID = 0;
                        else
                            patientDashboard.OthertypeResponseID = Convert.ToInt32(dbReader["OthertypeResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["OthertypeCarePhaseID"].ToString()))
                            patientDashboard.OthertypeCarePhaseID = 0;
                        else
                            patientDashboard.OthertypeCarePhaseID = Convert.ToInt32(dbReader["OthertypeCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["AvoidabilityScoreID"].ToString()))
                            patientDashboard.AvoidabilityScoreID = 0;
                        else
                            patientDashboard.AvoidabilityScoreID = Convert.ToInt32(dbReader["AvoidabilityScoreID"]);
                        if (string.IsNullOrEmpty(dbReader["LearningComments"].ToString()))
                            patientDashboard.LearningComments = "";
                        else
                            patientDashboard.LearningComments = Convert.ToString(dbReader["LearningComments"]);
                        if (string.IsNullOrEmpty(dbReader["SpecialityName"].ToString()))
                            patientDashboard.SpecialityName = "";
                        else
                            patientDashboard.SpecialityName = Convert.ToString(dbReader["SpecialityName"]);
                        if (string.IsNullOrEmpty(dbReader["CreatedBy"].ToString()))
                            patientDashboard.CreatedBy = "";
                        else
                            patientDashboard.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["CreateDate"].ToString()))
                            patientDashboard.CreateDate = "";
                        else
                            patientDashboard.CreateDate = Convert.ToDateTime(dbReader["CreateDate"]).ToString("dd/MM/yyyy");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJR1Report", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return patientDashboard;
        }

        public SJR2Report GetSJR2Report(int? id, int userID)
        {
            IDataReader dbReader = null;
            SJR2Report patientDashboard = new SJR2Report();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetSJR2ReportByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["PatientID"].ToString()))
                            patientDashboard.PatientID = "";
                        else
                            patientDashboard.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["InitialManagement"].ToString()))
                            patientDashboard.InitialManagement = "";
                        else
                            patientDashboard.InitialManagement = Convert.ToString(dbReader["InitialManagement"]);
                        if (string.IsNullOrEmpty(dbReader["InitialManagementRating"].ToString()))
                            patientDashboard.InitialManagementRating = "";
                        else
                            patientDashboard.InitialManagementRating = Convert.ToString(dbReader["InitialManagementRating"]);
                        if (string.IsNullOrEmpty(dbReader["OngoingCare"].ToString()))
                            patientDashboard.OngoingCare = "";
                        else
                            patientDashboard.OngoingCare = Convert.ToString(dbReader["OngoingCare"]);
                        if (string.IsNullOrEmpty(dbReader["OngoingCareRating"].ToString()))
                            patientDashboard.OngoingCareRating = "";
                        else
                            patientDashboard.OngoingCareRating = Convert.ToString(dbReader["OngoingCareRating"]);
                        if (string.IsNullOrEmpty(dbReader["CareDuringProcedure"].ToString()))
                            patientDashboard.CareDuringProcedure = "";
                        else
                            patientDashboard.CareDuringProcedure = Convert.ToString(dbReader["CareDuringProcedure"]);
                        if (string.IsNullOrEmpty(dbReader["CareDuringProcedureRating"].ToString()))
                            patientDashboard.CareDuringProcedureRating = "";
                        else
                            patientDashboard.CareDuringProcedureRating = Convert.ToString(dbReader["CareDuringProcedureRating"]);
                        if (string.IsNullOrEmpty(dbReader["EndLifeCare"].ToString()))
                            patientDashboard.EndLifeCare = "";
                        else
                            patientDashboard.EndLifeCare = Convert.ToString(dbReader["EndLifeCare"]);
                        if (string.IsNullOrEmpty(dbReader["EndLifeCareRating"].ToString()))
                            patientDashboard.EndLifeCareRating = "";
                        else
                            patientDashboard.EndLifeCareRating = Convert.ToString(dbReader["EndLifeCareRating"]);
                        if (string.IsNullOrEmpty(dbReader["OverAllAssessment"].ToString()))
                            patientDashboard.OverAllAssessment = "";
                        else
                            patientDashboard.OverAllAssessment = Convert.ToString(dbReader["OverAllAssessment"]);
                        if (string.IsNullOrEmpty(dbReader["OverAllAssessmentRating"].ToString()))
                            patientDashboard.OverAllAssessmentRating = "";
                        else
                            patientDashboard.OverAllAssessmentRating = Convert.ToString(dbReader["OverAllAssessmentRating"]);
                        if (string.IsNullOrEmpty(dbReader["QualityDocumentationRating"].ToString()))
                            patientDashboard.QualityDocumentationRating = "";
                        else
                            patientDashboard.QualityDocumentationRating = Convert.ToString(dbReader["QualityDocumentationRating"]);
                        if (string.IsNullOrEmpty(dbReader["ProblemOccured"].ToString()))
                            patientDashboard.ProblemOccured = false;
                        else
                            patientDashboard.ProblemOccured = Convert.ToBoolean(dbReader["ProblemOccured"]);
                        if (string.IsNullOrEmpty(dbReader["AssessmentResponseID"].ToString()))
                            patientDashboard.AssessmentResponseID = 0;
                        else
                            patientDashboard.AssessmentResponseID = Convert.ToInt32(dbReader["AssessmentResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["AssessmentCarePhaseID"].ToString()))
                            patientDashboard.AssessmentCarePhaseID = 0;
                        else
                            patientDashboard.AssessmentCarePhaseID = Convert.ToInt32(dbReader["AssessmentCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["MedicationResponseID"].ToString()))
                            patientDashboard.MedicationResponseID = 0;
                        else
                            patientDashboard.MedicationResponseID = Convert.ToInt32(dbReader["MedicationResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["TreatmentCarePhaseID"].ToString()))
                            patientDashboard.TreatmentCarePhaseID = 0;
                        else
                            patientDashboard.TreatmentCarePhaseID = Convert.ToInt32(dbReader["TreatmentCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["InfectionResponseID"].ToString()))
                            patientDashboard.InfectionResponseID = 0;
                        else
                            patientDashboard.InfectionResponseID = Convert.ToInt32(dbReader["InfectionResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["InfectionCarePhaseID"].ToString()))
                            patientDashboard.InfectionCarePhaseID = 0;
                        else
                            patientDashboard.InfectionCarePhaseID = Convert.ToInt32(dbReader["InfectionCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["ProcedureResponseID"].ToString()))
                            patientDashboard.ProcedureResponseID = 0;
                        else
                            patientDashboard.ProcedureResponseID = Convert.ToInt32(dbReader["ProcedureResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["ProcedureCarePhaseID"].ToString()))
                            patientDashboard.ProcedureCarePhaseID = 0;
                        else
                            patientDashboard.ProcedureCarePhaseID = Convert.ToInt32(dbReader["ProcedureCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["MonitoringResponseID"].ToString()))
                            patientDashboard.MonitoringResponseID = 0;
                        else
                            patientDashboard.MonitoringResponseID = Convert.ToInt32(dbReader["MonitoringResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["ResuscitationResponseID"].ToString()))
                            patientDashboard.ResuscitationResponseID = 0;
                        else
                            patientDashboard.ResuscitationResponseID = Convert.ToInt32(dbReader["ResuscitationResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["OthertypeResponseID"].ToString()))
                            patientDashboard.OthertypeResponseID = 0;
                        else
                            patientDashboard.OthertypeResponseID = Convert.ToInt32(dbReader["OthertypeResponseID"]);
                        if (string.IsNullOrEmpty(dbReader["OthertypeCarePhaseID"].ToString()))
                            patientDashboard.OthertypeCarePhaseID = 0;
                        else
                            patientDashboard.OthertypeCarePhaseID = Convert.ToInt32(dbReader["OthertypeCarePhaseID"]);
                        if (string.IsNullOrEmpty(dbReader["AvoidabilityScoreID"].ToString()))
                            patientDashboard.AvoidabilityScoreID = 0;
                        else
                            patientDashboard.AvoidabilityScoreID = Convert.ToInt32(dbReader["AvoidabilityScoreID"]);
                        if (string.IsNullOrEmpty(dbReader["LearningComments"].ToString()))
                            patientDashboard.LearningComments = "";
                        else
                            patientDashboard.LearningComments = Convert.ToString(dbReader["LearningComments"]);
                        if (string.IsNullOrEmpty(dbReader["SpecialityName"].ToString()))
                            patientDashboard.SpecialityName = "";
                        else
                            patientDashboard.SpecialityName = Convert.ToString(dbReader["SpecialityName"]);
                        if (string.IsNullOrEmpty(dbReader["CreatedBy"].ToString()))
                            patientDashboard.CreatedBy = "";
                        else
                            patientDashboard.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["CreateDate"].ToString()))
                            patientDashboard.CreateDate = "";
                        else
                            patientDashboard.CreateDate = Convert.ToDateTime(dbReader["CreateDate"]).ToString("dd/MM/yyyy");
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJR2Report", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return patientDashboard;
        }

        public PatientDetailView GetPatientDetailViewByID(int? id, int userID)
        {
            IDataReader dbReader = null;
            List<NextOfKin> lstNextOfKin = new List<NextOfKin>();
            PatientDetailView patientDashboard = new PatientDetailView();
            NextOfKin nextOfkin;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientDetailViewByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);
                    dbCmd.Parameters.AddWithValue("@UserID", userID);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dbReader["ID"]);
                        if (string.IsNullOrEmpty(dbReader["CRCreatedBy"].ToString()))
                            patientDashboard.CRCreatedBy = 0;
                        else
                            patientDashboard.CRCreatedBy = Convert.ToInt32(dbReader["CRCreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dbReader["PatientId"]);
                        if (string.IsNullOrEmpty(dbReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dbReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dbReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dbReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dbReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dbReader["PatientName"]);
                        if (string.IsNullOrEmpty(dbReader["CRCreatedByName"].ToString()))
                            patientDashboard.CRCreatedByName = "";
                        else
                            patientDashboard.CRCreatedByName = Convert.ToString(dbReader["CRCreatedByName"]);
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                            patientDashboard.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dbReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dbReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["CRCreatedDate"].ToString()))
                            patientDashboard.CRCreatedDate = "";
                        else
                            patientDashboard.CRCreatedDate = Convert.ToDateTime(dbReader["CRCreatedDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dbReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dbReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dbReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dbReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dbReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dbReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dbReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dbReader["SJR1"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dbReader["SJR2"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dbReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dbReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dbReader["Age"]);
                        if (string.IsNullOrEmpty(dbReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dbReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dbReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dbReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dbReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dbReader["Gender"]);
                        if (string.IsNullOrEmpty(dbReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dbReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dbReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dbReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dbReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dbReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dbReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dbReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dbReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dbReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dbReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dbReader["Comments"].ToString()))
                            patientDashboard.Comments = "";
                        else
                            patientDashboard.Comments = Convert.ToString(dbReader["Comments"]);
                        if (string.IsNullOrEmpty(dbReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dbReader["ComorbiditiesCount"]);
                        patientDashboard.DiagnosisCount = Convert.ToInt32(dbReader["DiagnosisCount"]);
                        patientDashboard.ProcedureCount = Convert.ToInt32(dbReader["ProcedureCount"]);
                        if (string.IsNullOrEmpty(dbReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dbReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["CodingIssueIdentified"].ToString()))
                            patientDashboard.CodingIssueIdentified = false;
                        else
                            patientDashboard.CodingIssueIdentified = Convert.ToBoolean(dbReader["CodingIssueIdentified"]);
                        if (string.IsNullOrEmpty(dbReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dbReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["Occupation"].ToString()))
                            patientDashboard.Occupation = "";
                        else
                            patientDashboard.Occupation = Convert.ToString(dbReader["Occupation"]);
                        if (string.IsNullOrEmpty(dbReader["UserRole"].ToString()))
                            patientDashboard.UserRole = "";
                        else
                            patientDashboard.UserRole = Convert.ToString(dbReader["UserRole"]);
                        if (string.IsNullOrEmpty(dbReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dbReader["PatientType"]);
                        if (string.IsNullOrEmpty(dbReader["DataQualityComments"].ToString()))
                            patientDashboard.PatientType = "";
                        else
                            patientDashboard.DataQualityIssueComments = Convert.ToString(dbReader["DataQualityComments"]);
                        if (string.IsNullOrEmpty(dbReader["DataQualityIssuesIdentified"].ToString()))
                            patientDashboard.DataQualityIssuesIdentified = false;
                        else
                            patientDashboard.DataQualityIssuesIdentified = Convert.ToBoolean(dbReader["DataQualityIssuesIdentified"]);
                        if (string.IsNullOrEmpty(dbReader["UrgentMEReview"].ToString()))
                            patientDashboard.UrgentMEReview = false;
                        else
                            patientDashboard.UrgentMEReview = Convert.ToBoolean(dbReader["UrgentMEReview"]);
                        if (string.IsNullOrEmpty(dbReader["UrgentMEReviewComment"].ToString()))
                            patientDashboard.UrgentMEReviewComment = "";
                        else
                            patientDashboard.UrgentMEReviewComment = Convert.ToString(dbReader["UrgentMEReviewComment"]);
                        if (string.IsNullOrEmpty(dbReader["GPSurgery"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.GPSurgery = Convert.ToString(dbReader["GPSurgery"]);

                        if (string.IsNullOrEmpty(dbReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dbReader["PrimaryDiagnosis"]);

                        if (string.IsNullOrEmpty(dbReader["PrimaryProcedure"].ToString()))
                            patientDashboard.PrimaryProcedure = "";
                        else
                            patientDashboard.PrimaryProcedure = Convert.ToString(dbReader["PrimaryProcedure"]);
                        if (string.IsNullOrEmpty(dbReader["SHMICode"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.SHMICode = Convert.ToString(dbReader["SHMICode"]);
                        if (string.IsNullOrEmpty(dbReader["SHMIGroup"].ToString()))
                            patientDashboard.GPSurgery = "";
                        else
                            patientDashboard.SHMIGroup = Convert.ToString(dbReader["SHMIGroup"]);
                        if (string.IsNullOrEmpty(dbReader["Nok_Discussion"].ToString()))
                            patientDashboard.Nok_Discussion = false;
                        else
                            patientDashboard.Nok_Discussion = Convert.ToBoolean(dbReader["Nok_Discussion"]);
                        if (string.IsNullOrEmpty(dbReader["QAP_Discussion"].ToString()))
                            patientDashboard.QAP_Discussion = false;
                        else
                            patientDashboard.QAP_Discussion = Convert.ToBoolean(dbReader["QAP_Discussion"]);
                        if (string.IsNullOrEmpty(dbReader["Notes_Review"].ToString()))
                            patientDashboard.Notes_Review = false;
                        else
                            patientDashboard.Notes_Review = Convert.ToBoolean(dbReader["Notes_Review"]);
                        if (string.IsNullOrEmpty(dbReader["QAPName"].ToString()))
                            patientDashboard.QAPName = "";
                        else
                            patientDashboard.QAPName = Convert.ToString(dbReader["QAPName"]);
                        if (string.IsNullOrEmpty(dbReader["MCCDissue"].ToString()))
                            patientDashboard.MCCDissue = false;
                        else
                            patientDashboard.MCCDissue = Convert.ToBoolean(dbReader["MCCDissue"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerReferral"].ToString()))
                            patientDashboard.CoronerReferral = false;
                        else
                            patientDashboard.CoronerReferral = Convert.ToBoolean(dbReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerReferralReason"].ToString()))
                            patientDashboard.CoronerReferralReason = "";
                        else
                            patientDashboard.CoronerReferralReason = Convert.ToString(dbReader["CoronerReferralReason"]);
                        if (string.IsNullOrEmpty(dbReader["HospitalPostMortem"].ToString()))
                            patientDashboard.HospitalPostMortem = false;
                        else
                            patientDashboard.HospitalPostMortem = Convert.ToBoolean(dbReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath1"].ToString()))
                            patientDashboard.CauseOfDeath1 = "";
                        else
                            patientDashboard.CauseOfDeath1 = Convert.ToString(dbReader["CauseOfDeath1"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath2"].ToString()))
                            patientDashboard.CauseOfDeath2 = "";
                        else
                            patientDashboard.CauseOfDeath2 = Convert.ToString(dbReader["CauseOfDeath2"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath3"].ToString()))
                            patientDashboard.CauseOfDeath3 = "";
                        else
                            patientDashboard.CauseOfDeath3 = Convert.ToString(dbReader["CauseOfDeath3"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath4"].ToString()))
                            patientDashboard.CauseOfDeath4 = "";
                        else
                            patientDashboard.CauseOfDeath4 = Convert.ToString(dbReader["CauseOfDeath4"]);
                        if (string.IsNullOrEmpty(dbReader["CauseID"].ToString()))
                            patientDashboard.CauseID = 0;
                        else
                            patientDashboard.CauseID = Convert.ToInt32(dbReader["CauseID"]);
                        if (string.IsNullOrEmpty(dbReader["CornerReferralComplete"].ToString()))
                            patientDashboard.CornerReferralComplete = false;
                        else
                            patientDashboard.CornerReferralComplete = Convert.ToBoolean(dbReader["CornerReferralComplete"]);
                        if (string.IsNullOrEmpty(dbReader["FullSJRRequired"].ToString()))
                            patientDashboard.FullSJRRequired = false;
                        else
                            patientDashboard.FullSJRRequired = Convert.ToBoolean(dbReader["FullSJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["SpecialityName"].ToString()))
                            patientDashboard.SpecialityName = "";
                        else
                            patientDashboard.SpecialityName = Convert.ToString(dbReader["SpecialityName"]);
                        if (string.IsNullOrEmpty(dbReader["PaediatricPatient"].ToString()))
                            patientDashboard.PaediatricPatient = false;
                        else
                            patientDashboard.PaediatricPatient = Convert.ToBoolean(dbReader["PaediatricPatient"]);
                        if (string.IsNullOrEmpty(dbReader["LearningDisabilityPatient"].ToString()))
                            patientDashboard.LearningDisabilityPatient = false;
                        else
                            patientDashboard.LearningDisabilityPatient = Convert.ToBoolean(dbReader["LearningDisabilityPatient"]);
                        if (string.IsNullOrEmpty(dbReader["MentalillnessPatient"].ToString()))
                            patientDashboard.MentalillnessPatient = false;
                        else
                            patientDashboard.MentalillnessPatient = Convert.ToBoolean(dbReader["MentalillnessPatient"]);
                        if (string.IsNullOrEmpty(dbReader["ElectiveAdmission"].ToString()))
                            patientDashboard.ElectiveAdmission = false;
                        else
                            patientDashboard.ElectiveAdmission = Convert.ToBoolean(dbReader["ElectiveAdmission"]);
                        if (string.IsNullOrEmpty(dbReader["NoKConcernsDeath"].ToString()))
                            patientDashboard.NoKConcernsDeath = false;
                        else
                            patientDashboard.NoKConcernsDeath = Convert.ToBoolean(dbReader["NoKConcernsDeath"]);
                        if (string.IsNullOrEmpty(dbReader["DeathChemo"].ToString()))
                            patientDashboard.DeathChemo = false;
                        else
                            patientDashboard.DeathChemo = Convert.ToBoolean(dbReader["DeathChemo"]);
                        if (string.IsNullOrEmpty(dbReader["OtherConcern"].ToString()))
                            patientDashboard.OtherConcern = false;
                        else
                            patientDashboard.OtherConcern = Convert.ToBoolean(dbReader["OtherConcern"]);
                        if (string.IsNullOrEmpty(dbReader["OtherSJRAssessementComments"].ToString()))
                            patientDashboard.OtherSJRAssessementComments = "";
                        else
                            patientDashboard.OtherSJRAssessementComments = Convert.ToString(dbReader["OtherSJRAssessementComments"]);
                        if (string.IsNullOrEmpty(dbReader["PatientSafetySIRI"].ToString()))
                            patientDashboard.PatientSafetySIRI = false;
                        else
                            patientDashboard.PatientSafetySIRI = Convert.ToBoolean(dbReader["PatientSafetySIRI"]);
                        if (string.IsNullOrEmpty(dbReader["PatientSafetySIRIReason"].ToString()))
                            patientDashboard.PatientSafetySIRIReason = "";
                        else
                            patientDashboard.PatientSafetySIRIReason = Convert.ToString(dbReader["PatientSafetySIRIReason"]);
                        if (string.IsNullOrEmpty(dbReader["ChildDeathCoordinator"].ToString()))
                            patientDashboard.ChildDeathCoordinator = false;
                        else
                            patientDashboard.ChildDeathCoordinator = Convert.ToBoolean(dbReader["ChildDeathCoordinator"]);
                        if (string.IsNullOrEmpty(dbReader["LearningDisabilityNurse"].ToString()))
                            patientDashboard.LearningDisabilityNurse = false;
                        else
                            patientDashboard.LearningDisabilityNurse = Convert.ToBoolean(dbReader["LearningDisabilityNurse"]);
                        if (string.IsNullOrEmpty(dbReader["HeadOfCompliance"].ToString()))
                            patientDashboard.HeadOfCompliance = false;
                        else
                            patientDashboard.HeadOfCompliance = Convert.ToBoolean(dbReader["HeadOfCompliance"]);
                        if (string.IsNullOrEmpty(dbReader["HeadOfComplianceReason"].ToString()))
                            patientDashboard.HeadOfComplianceReason = "";
                        else
                            patientDashboard.HeadOfComplianceReason = Convert.ToString(dbReader["HeadOfComplianceReason"]);
                        if (string.IsNullOrEmpty(dbReader["PALsComplaints"].ToString()))
                            patientDashboard.PALsComplaints = false;
                        else
                            patientDashboard.PALsComplaints = Convert.ToBoolean(dbReader["PALsComplaints"]);
                        if (string.IsNullOrEmpty(dbReader["WardTeam"].ToString()))
                            patientDashboard.WardTeam = false;
                        else
                            patientDashboard.WardTeam = Convert.ToBoolean(dbReader["WardTeam"]);
                        if (string.IsNullOrEmpty(dbReader["WardTeamReason"].ToString()))
                            patientDashboard.WardTeamReason = "";
                        else
                            patientDashboard.WardTeamReason = Convert.ToString(dbReader["WardTeamReason"]);
                        if (string.IsNullOrEmpty(dbReader["SafeGuardTeamNotified"].ToString()))
                            patientDashboard.SafeGuardTeamNotified = false;
                        else
                            patientDashboard.SafeGuardTeamNotified = Convert.ToBoolean(dbReader["SafeGuardTeamNotified"]);
                        if (string.IsNullOrEmpty(dbReader["Other"].ToString()))
                            patientDashboard.Other = false;
                        else
                            patientDashboard.Other = Convert.ToBoolean(dbReader["Other"]);
                        if (string.IsNullOrEmpty(dbReader["OtherReason"].ToString()))
                            patientDashboard.OtherReason = "";
                        else
                            patientDashboard.OtherReason = Convert.ToString(dbReader["OtherReason"]);
                        if (string.IsNullOrEmpty(dbReader["FormCompleted"].ToString()))
                            patientDashboard.FormCompleted = false;
                        else
                            patientDashboard.FormCompleted = Convert.ToBoolean(dbReader["FormCompleted"]);
                        if (string.IsNullOrEmpty(dbReader["ComplementsFedBack"].ToString()))
                            patientDashboard.ComplementsFedBack = false;
                        else
                            patientDashboard.ComplementsFedBack = Convert.ToBoolean(dbReader["ComplementsFedBack"]);
                        if (string.IsNullOrEmpty(dbReader["FeedbackCreatedBy"].ToString()))
                            patientDashboard.FeedbackCreatedBy = "";
                        else
                            patientDashboard.FeedbackCreatedBy = Convert.ToString(dbReader["FeedbackCreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["FeedbackCreatedDate"].ToString()))
                            patientDashboard.FeedbackCreatedDate = "";
                        else
                            patientDashboard.FeedbackCreatedDate = Convert.ToDateTime(dbReader["FeedbackCreatedDate"]).ToString("dd/MM/yyyy");
                    }

                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            nextOfkin = new NextOfKin();
                            if (string.IsNullOrEmpty(dbReader["Patient_ID"].ToString()))
                                nextOfkin.PatientID = "";
                            else
                                nextOfkin.PatientID = Convert.ToString(dbReader["Patient_ID"]);
                            if (string.IsNullOrEmpty(dbReader["RelativeName"].ToString()))
                                nextOfkin.RelativeName = "";
                            else
                                nextOfkin.RelativeName = Convert.ToString(dbReader["RelativeName"]);
                            if (string.IsNullOrEmpty(dbReader["RelativeTelNo"].ToString()))
                                nextOfkin.RelativeTelNo = "";
                            else
                                nextOfkin.RelativeTelNo = Convert.ToString(dbReader["RelativeTelNo"]);

                            if (string.IsNullOrEmpty(dbReader["Relationship"].ToString()))
                                nextOfkin.Relationship = "";
                            else
                                nextOfkin.Relationship = Convert.ToString(dbReader["Relationship"]);

                            if (string.IsNullOrEmpty(dbReader["PresentAtDeath"].ToString()))
                                nextOfkin.PresentAtDeath = false;
                            else
                                nextOfkin.PresentAtDeath = Convert.ToBoolean(dbReader["PresentAtDeath"]);

                            if (string.IsNullOrEmpty(dbReader["IsInformed"].ToString()))
                                nextOfkin.IsInformed = false;
                            else
                                nextOfkin.IsInformed = Convert.ToBoolean(dbReader["IsInformed"]);

                            if (string.IsNullOrEmpty(dbReader["NextOfKinID"].ToString()))
                                nextOfkin.NextOfKinID = 0;
                            else
                                nextOfkin.NextOfKinID = Convert.ToInt32(dbReader["NextOfKinID"]);
                            lstNextOfKin.Add(nextOfkin);
                        }
                    }
                    patientDashboard.lstNEXTKin = lstNextOfKin;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientDetailViewByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (patientDashboard.ID == 0 || patientDashboard.ID == null) patientDashboard.ID = Convert.ToInt32(id);
            return patientDashboard;
        }

        /// <summary>
        /// This method brings in coding review in a specific patient information based on the
        /// nhs number.
        /// </summary>
        /// <param name="nhsNumber">string</param>
        /// <returns>List<clsPatientDetails>Coding Review Details</returns>

        public clsPatientDetails GetCodingReviewByID(int? id, int userID)
        {
            IDataReader dbReader = null;


            clsPatientDetails pdtls = new clsPatientDetails();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCodingReviewByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;

                    dbCmd.Parameters.AddWithValue("@ID", id);



                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["Comments"].ToString()))
                            pdtls.Comments = "";
                        else
                            pdtls.Comments = Convert.ToString(dbReader["Comments"]);

                        if (string.IsNullOrEmpty(dbReader["CodingIssueIdentified"].ToString()))
                            pdtls.CodingIssueIdentified = false;
                        else
                            pdtls.CodingIssueIdentified = Convert.ToBoolean(dbReader["CodingIssueIdentified"]);
                    }


                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCodingReviewByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (pdtls.ID == 0 || pdtls.ID == null) pdtls.ID = Convert.ToInt32(id);
            return pdtls;
        }

        public int InsertKin(NextOfKin nextofkin, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_InsertNextOfKinDetails", connection);
                SqlDataReader dataReader = null;
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", nextofkin.PatientID);
                    dbCommand.Parameters.AddWithValue("@RelativeName", nextofkin.RelativeName);
                    dbCommand.Parameters.AddWithValue("@RelativeTelNo", nextofkin.RelativeTelNo);
                    dbCommand.Parameters.AddWithValue("@Relationship", nextofkin.Relationship);
                    dbCommand.Parameters.AddWithValue("@PresentAtDeath", nextofkin.PresentAtDeath);
                    dbCommand.Parameters.AddWithValue("@IsInformed", nextofkin.IsInformed);
                    dbCommand.Parameters.AddWithValue("@KinID", nextofkin.NextOfKinID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dataReader = dbCommand.ExecuteReader();
                    while (dataReader.Read())
                    {
                        retVal = Convert.ToInt32(dataReader["ID"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "InsertKin", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return retVal;

        }

        /// <summary>
        /// Update details of medical examiner decision tab into the database for a particular patient ID
        /// </summary>
        /// <param name="isMCCDissue">bool</param>
        /// <param name="isCoronerReferral">bool</param>
        /// <param name="isHospitalPostMortem">bool</param>
        /// <param name="isDeathCertificate">bool</param>
        /// <param name="isCornerReferralComplete">bool</param>
        /// <param name="isCoronerDecisionInquest">bool</param>
        /// <param name="isCoronerDecisionPostMortem">bool</param>
        /// <param name="isCoronerDecision100A">bool</param>
        /// <param name="isCoronerDecisionGPissue">bool</param>
        /// <param name="ReasonID">int</param>
        /// <param name="CauseOfDeath1">string</param>
        /// <param name="CauseOfDeath2">string</param>
        /// <param name="CauseOfDeath3">string</param>
        /// <param name="CauseOfDeath4">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateFinalOutcome(bool isDeathCertificate, bool isCornerReferralComplete, bool isCoronerDecisionInquest, bool isCoronerDecisionPostMortem,
            bool isCoronerDecision100A, bool isCoronerDecisionGPissue, string CauseOfDeath1, string CauseOfDeath2, string CauseOfDeath3,
            string CauseOfDeath4, DateTime? DeathCertificateDate, string DeathCertificateTime, string TimeType, string CauseID, int id, bool isCoronerDecisionNFAction, bool isForensicPM, bool IsBuried, bool IsCremated, bool IsBypassedMESystem, bool isMEOReviewCompleted, int specialityID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpsertFinalOutcome", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@isDeathCertificate", isDeathCertificate);
                    dbCommand.Parameters.AddWithValue("@isCornerReferralComplete", isCornerReferralComplete);
                    dbCommand.Parameters.AddWithValue("@isCoronerDecisionInquest", isCoronerDecisionInquest);
                    dbCommand.Parameters.AddWithValue("@isCoronerDecisionPostMortem", isCoronerDecisionPostMortem);
                    dbCommand.Parameters.AddWithValue("@isCoronerDecision100A", isCoronerDecision100A);
                    dbCommand.Parameters.AddWithValue("@isCoronerDecisionGPissue", isCoronerDecisionGPissue);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath1", CauseOfDeath1);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath2", CauseOfDeath2);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath3", CauseOfDeath3);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath4", CauseOfDeath4);
                    dbCommand.Parameters.AddWithValue("@DeathCertificateDate", DeathCertificateDate ?? (object)DBNull.Value);
                    dbCommand.Parameters.AddWithValue("@DeathCertificateTime", DeathCertificateTime);
                    dbCommand.Parameters.AddWithValue("@TimeType", TimeType);
                    dbCommand.Parameters.AddWithValue("@CauseID", Convert.ToInt32(CauseID));
                    dbCommand.Parameters.AddWithValue("@isCornerDecisionNoFurtherAction", isCoronerDecisionNFAction);
                    dbCommand.Parameters.AddWithValue("@IsForensicPM", isForensicPM);
                    dbCommand.Parameters.AddWithValue("@IsBuried", IsBuried);
                    dbCommand.Parameters.AddWithValue("@IsCremated", IsCremated);
                    dbCommand.Parameters.AddWithValue("@IsBypassedMESystem", IsBypassedMESystem);
                    dbCommand.Parameters.AddWithValue("@IsMEOReviewCompleted", isMEOReviewCompleted);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@MEOSpecialityID", specialityID);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateFinalOutcome", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Update details of medical examiner decision tab into the database for a particular patient ID
        /// </summary>
        /// <param name="isMCCDissue">bool</param>
        /// <param name="isCoronerReferral">bool</param>
        /// <param name="isHospitalPostMortem">bool</param>
        /// <param name="isDeathCertificate">bool</param>
        /// <param name="isCornerReferralComplete">bool</param>
        /// <param name="isCoronerDecisionInquest">bool</param>
        /// <param name="isCoronerDecisionPostMortem">bool</param>
        /// <param name="isCoronerDecision100A">bool</param>
        /// <param name="isCoronerDecisionGPissue">bool</param>
        /// <param name="ReasonID">int</param>
        /// <param name="CauseOfDeath1">string</param>
        /// <param name="CauseOfDeath2">string</param>
        /// <param name="CauseOfDeath3">string</param>
        /// <param name="CauseOfDeath4">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateMedicalExaminerDecision(bool isMCCDissue, bool isCoronerReferral, bool isHospitalPostMortem, bool isCornerReferralComplete, string Reason, string CauseOfDeath1, string CauseOfDeath2, string CauseOfDeath3,
            string CauseOfDeath4, string CauseID, int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpsertMedExaminerDecision", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@isMCCDissue", isMCCDissue);
                    dbCommand.Parameters.AddWithValue("@isCoronerReferral", isCoronerReferral);
                    dbCommand.Parameters.AddWithValue("@isHospitalPostMortem", isHospitalPostMortem);
                    dbCommand.Parameters.AddWithValue("@isCornerReferralComplete", isCornerReferralComplete);
                    dbCommand.Parameters.AddWithValue("@Reason", Reason);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath1", CauseOfDeath1);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath2", CauseOfDeath2);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath3", CauseOfDeath3);
                    dbCommand.Parameters.AddWithValue("@CauseOfDeath4", CauseOfDeath4);
                    dbCommand.Parameters.AddWithValue("@CauseID", Convert.ToInt32(CauseID));
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateMedicalExaminerDecision", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Get distinct discharge speciality names for the filter drop down.
        /// </summary>
        /// <returns>List<DischargeSpecialityNames></returns>
        public List<DischargeSpecialityNames> GetSpecialities(int userID)
        {
            SqlDataReader dataReader = null;
            List<DischargeSpecialityNames> dischargeSpecialityNames = new List<DischargeSpecialityNames>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetSpecialityNames", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        DischargeSpecialityNames dischargeSpeciality = new DischargeSpecialityNames();
                        dischargeSpeciality.DischargeSpecialityCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        dischargeSpeciality.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        dischargeSpecialityNames.Add(dischargeSpeciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSpecialities", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return dischargeSpecialityNames;
        }

        public List<clsDataManagement> GetDataSets(int userID)
        {
            SqlDataReader dataReader = null;
            List<clsDataManagement> datasets = new List<clsDataManagement>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DataManagementDetails", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        clsDataManagement dataset = new clsDataManagement();
                        dataset.SourceSystem = Convert.ToString(dataReader["SourceSystem"]);
                        dataset.DataSet = Convert.ToString(dataReader["DataSet"]);
                        dataset.DQRag = Convert.ToInt32(dataReader["DQRag"]);
                        dataset.UpdateDate = Convert.ToDateTime(dataReader["UpdateDate"]).ToString("dd-MMM-yyyy");
                        dataset.UpdateTime = Convert.ToDateTime(dataReader["UpdateTime"].ToString()).ToString("HH:mm");
                        datasets.Add(dataset);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetDataSets", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return datasets;
        }

        /// <summary>
        /// Get positive feedback form details for particular patient ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsFeedBackModel</returns>
        public clsFeedBackModel GetFeedback(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            List<clsFeedBackModel> lstFBM = new List<clsFeedBackModel>();
            clsFeedBackModel feedback = new clsFeedBackModel();
            FeedBackComments fbcomments;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetFeedbackData", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {

                        feedback.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        feedback.FormCompleted = Convert.ToBoolean(dataReader["FormCompleted"]);
                        feedback.ComplementsFedBack = Convert.ToBoolean(dataReader["ComplementsFedBack"]);
                        feedback.CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        if (!string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            feedback.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        else
                            feedback.MedTriage = 2;

                    }
                    if (dataReader.NextResult())
                    {
                        while (dataReader.Read())
                        {
                            fbcomments = new FeedBackComments();
                            if (string.IsNullOrEmpty(dataReader["FeedBackCommentID"].ToString()))
                                fbcomments.FeedBackCommentID = 0;
                            else
                                fbcomments.FeedBackCommentID = Convert.ToInt32(dataReader["FeedBackCommentID"]);

                            if (string.IsNullOrEmpty(dataReader["Patient_ID"].ToString()))
                                fbcomments.Patient_ID = 0;
                            else
                                fbcomments.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);

                            if (string.IsNullOrEmpty(dataReader["Comments"].ToString()))
                                fbcomments.Comments = "";
                            else
                                fbcomments.Comments = Convert.ToString(dataReader["Comments"]);


                            fbcomments.CreatedDate = Convert.ToDateTime(dataReader["CreatedDate"]);

                            if (!string.IsNullOrEmpty(dataReader["CreatedDate"].ToString()))
                            {
                                fbcomments.CreatedTime = Convert.ToDateTime(dataReader["CreatedDate"]).TimeOfDay.ToString().Substring(0, 5);
                            }
                            else
                                fbcomments.CreatedTime = "";



                            if (string.IsNullOrEmpty(dataReader["FBTypeID"].ToString()))
                                fbcomments.FBTypeID = 0;
                            else
                                fbcomments.FBTypeID = Convert.ToInt32(dataReader["FBTypeID"]);

                            if (string.IsNullOrEmpty(dataReader["name"].ToString()))
                                fbcomments.Name = "";
                            else
                                fbcomments.Name = Convert.ToString(dataReader["name"]);

                            if (string.IsNullOrEmpty(dataReader["role"].ToString()))
                                fbcomments.Role = "";
                            else
                                fbcomments.Role = Convert.ToString(dataReader["role"]);

                            feedback.lstFBComments.Add(fbcomments);
                        }
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetFeedback", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            DateTime dt = System.DateTime.Now.Date;
            if (feedback.CreatedBy == null) feedback.CreatedBy = "";
            //if (feedback.Patient_ID == 0) feedback.Patient_ID = Convert.ToInt32(id);
            return feedback;
        }


        public int GetRatingIDByName(string name, int userID)
        {
            SqlDataReader dataReader = null;
            int ratingID = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetRatingIDByName", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Name", name);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        ratingID = Convert.ToInt32(dataReader["CareRatingID"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetRatingIDByName", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return ratingID;
        }

        /// <summary>
        /// Get SJR1 Form step 1 details based on patientID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsSJRFormInitial</returns>
        public clsSJRFormInitial GetSJRFormInitial(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            clsSJRFormInitial sjrFormInitial = new clsSJRFormInitial();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetSJRFormInitial", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        sjrFormInitial.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        sjrFormInitial.PatientID = Convert.ToString(dataReader["PatientID"]);
                        string InitialManagement = "";
                        if (dataReader["InitialManagement"] != null) InitialManagement = Convert.ToString(dataReader["InitialManagement"]);
                        sjrFormInitial.InitialManagement = InitialManagement;
                        int InitialManagementCareRatingID = 0;
                        if (dataReader["InitialManagementCareRatingID"] != null) InitialManagementCareRatingID = Convert.ToInt32(dataReader["InitialManagementCareRatingID"]);
                        sjrFormInitial.InitialManagementCareRatingID = InitialManagementCareRatingID;
                        string OngoingCare = "";
                        if (dataReader["OngoingCare"] != null) OngoingCare = Convert.ToString(dataReader["OngoingCare"]);
                        sjrFormInitial.OngoingCare = OngoingCare;
                        int OngoingCareRatingID = 0;
                        if (dataReader["OngoingCareRatingID"] != null) OngoingCareRatingID = Convert.ToInt32(dataReader["OngoingCareRatingID"]);
                        sjrFormInitial.OngoingCareRatingID = OngoingCareRatingID;
                        string CareDuringProcedure = "";
                        if (dataReader["CareDuringProcedure"] != null) CareDuringProcedure = Convert.ToString(dataReader["CareDuringProcedure"]);
                        sjrFormInitial.CareDuringProcedure = CareDuringProcedure;
                        int CareDuringProcedureCareRatingID = 0;
                        if (dataReader["CareDuringProcedureCareRatingID"] != null) CareDuringProcedureCareRatingID = Convert.ToInt32(dataReader["CareDuringProcedureCareRatingID"]);
                        sjrFormInitial.CareDuringProcedureCareRatingID = CareDuringProcedureCareRatingID;
                        string EndLifeCare = "";
                        if (dataReader["EndLifeCare"] != null) EndLifeCare = Convert.ToString(dataReader["EndLifeCare"]);
                        sjrFormInitial.EndLifeCare = EndLifeCare;
                        int EndLifeCareRatingID = 0;
                        if (dataReader["EndLifeCareRatingID"] != null) EndLifeCareRatingID = Convert.ToInt32(dataReader["EndLifeCareRatingID"]);
                        sjrFormInitial.EndLifeCareRatingID = EndLifeCareRatingID;
                        string OverAllAssessment = "";
                        if (dataReader["OverAllAssessment"] != null) OverAllAssessment = Convert.ToString(dataReader["OverAllAssessment"]);
                        sjrFormInitial.OverAllAssessment = OverAllAssessment;
                        string CreatedBy = "";
                        if (dataReader["CreatedBy"] != null) CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        sjrFormInitial.CreatedBy = CreatedBy;
                        int OverAllAssessmentCareRatingID = 0;
                        if (dataReader["OverAllAssessmentCareRatingID"] != null) OverAllAssessmentCareRatingID = Convert.ToInt32(dataReader["OverAllAssessmentCareRatingID"]);
                        sjrFormInitial.OverAllAssessmentCareRatingID = OverAllAssessmentCareRatingID;
                        int QualityDocumentation = 0;
                        if (dataReader["QualityDocumentation"] != null) QualityDocumentation = Convert.ToInt32(dataReader["QualityDocumentation"]);
                        sjrFormInitial.QualityDocumentation = Convert.ToInt32(dataReader["QualityDocumentation"]);
                        int SJR1 = 0;
                        if (dataReader["SJR1"] != null) SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        sjrFormInitial.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJRFormInitial", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return sjrFormInitial;
        }

        public clsSJRFormInitial GetSJR2FormInitial(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            clsSJRFormInitial sjrFormInitial = new clsSJRFormInitial();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetSJR2FormInitial", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        sjrFormInitial.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        sjrFormInitial.PatientID = Convert.ToString(dataReader["PatientID"]);
                        string InitialManagement = "";
                        if (dataReader["InitialManagement"] != null) InitialManagement = Convert.ToString(dataReader["InitialManagement"]);
                        sjrFormInitial.InitialManagement = InitialManagement;
                        int InitialManagementCareRatingID = 0;
                        if (dataReader["InitialManagementCareRatingID"] != null) InitialManagementCareRatingID = Convert.ToInt32(dataReader["InitialManagementCareRatingID"]);
                        sjrFormInitial.InitialManagementCareRatingID = InitialManagementCareRatingID;
                        string OngoingCare = "";
                        if (dataReader["OngoingCare"] != null) OngoingCare = Convert.ToString(dataReader["OngoingCare"]);
                        sjrFormInitial.OngoingCare = OngoingCare;
                        int OngoingCareRatingID = 0;
                        if (dataReader["OngoingCareRatingID"] != null) OngoingCareRatingID = Convert.ToInt32(dataReader["OngoingCareRatingID"]);
                        sjrFormInitial.OngoingCareRatingID = OngoingCareRatingID;
                        string CareDuringProcedure = "";
                        if (dataReader["CareDuringProcedure"] != null) CareDuringProcedure = Convert.ToString(dataReader["CareDuringProcedure"]);
                        sjrFormInitial.CareDuringProcedure = CareDuringProcedure;
                        int CareDuringProcedureCareRatingID = 0;
                        if (dataReader["CareDuringProcedureCareRatingID"] != null) CareDuringProcedureCareRatingID = Convert.ToInt32(dataReader["CareDuringProcedureCareRatingID"]);
                        sjrFormInitial.CareDuringProcedureCareRatingID = CareDuringProcedureCareRatingID;
                        string EndLifeCare = "";
                        if (dataReader["EndLifeCare"] != null) EndLifeCare = Convert.ToString(dataReader["EndLifeCare"]);
                        sjrFormInitial.EndLifeCare = EndLifeCare;
                        int EndLifeCareRatingID = 0;
                        if (dataReader["EndLifeCareRatingID"] != null) EndLifeCareRatingID = Convert.ToInt32(dataReader["EndLifeCareRatingID"]);
                        sjrFormInitial.EndLifeCareRatingID = EndLifeCareRatingID;
                        string OverAllAssessment = "";
                        if (dataReader["OverAllAssessment"] != null) OverAllAssessment = Convert.ToString(dataReader["OverAllAssessment"]);
                        sjrFormInitial.OverAllAssessment = OverAllAssessment;
                        string CreatedBy = "";
                        if (dataReader["CreatedBy"] != null) CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        sjrFormInitial.CreatedBy = CreatedBy;
                        int OverAllAssessmentCareRatingID = 0;
                        if (dataReader["OverAllAssessmentCareRatingID"] != null) OverAllAssessmentCareRatingID = Convert.ToInt32(dataReader["OverAllAssessmentCareRatingID"]);
                        sjrFormInitial.OverAllAssessmentCareRatingID = OverAllAssessmentCareRatingID;
                        int QualityDocumentation = 0;
                        if (dataReader["QualityDocumentation"] != null) QualityDocumentation = Convert.ToInt32(dataReader["QualityDocumentation"]);
                        sjrFormInitial.QualityDocumentation = Convert.ToInt32(dataReader["QualityDocumentation"]);
                        int SJR2 = 0;
                        if (dataReader["SJR2"] != null) SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        sjrFormInitial.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJR2FormInitial", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return sjrFormInitial;
        }

        /// <summary>
        /// Get all sjr outcome form details for particular patient ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsSJROutcome</returns>
        public clsSJROutcome GetSJROutcome(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            clsSJROutcome sjrOutcome = new clsSJROutcome();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetSJROutcome", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Patient_ID"])))
                            sjrOutcome.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        else
                            sjrOutcome.Patient_ID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            sjrOutcome.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            sjrOutcome.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Stage2SJRRequired"])))
                            sjrOutcome.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        else
                            sjrOutcome.Stage2SJRRequired = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Stage2SJRDateSent"])))
                            sjrOutcome.Stage2SJRDateSent = Convert.ToDateTime(dataReader["Stage2SJRDateSent"]).ToString("dd/MM/yyyy");
                        else
                            sjrOutcome.Stage2SJRDateSent = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Stage2SJRSentTo"])))
                            sjrOutcome.Stage2SJRSentTo = Convert.ToString(dataReader["Stage2SJRSentTo"]);
                        else
                            sjrOutcome.Stage2SJRSentTo = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReferenceNumber"])))
                            sjrOutcome.ReferenceNumber = Convert.ToString(dataReader["ReferenceNumber"]);
                        else
                            sjrOutcome.ReferenceNumber = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateReceived"])))
                            sjrOutcome.DateReceived = Convert.ToDateTime(dataReader["DateReceived"]).ToString("dd/MM/yyyy");
                        else
                            sjrOutcome.DateReceived = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AvoidabilityScoreID"])))
                            sjrOutcome.AvoidabilityScoreID = Convert.ToInt32(dataReader["AvoidabilityScoreID"]);
                        else
                            sjrOutcome.AvoidabilityScoreID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MSGRequired"])))
                            sjrOutcome.MSGRequired = Convert.ToBoolean(dataReader["MSGRequired"]);
                        else
                            sjrOutcome.MSGRequired = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MSGDiscussionDate"])))
                            sjrOutcome.MSGDiscussionDate = Convert.ToDateTime(dataReader["MSGDiscussionDate"]).ToString("dd/MM/yyyy");
                        else
                            sjrOutcome.MSGDiscussionDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Comments"])))
                            sjrOutcome.Comments = Convert.ToString(dataReader["Comments"]);
                        else
                            sjrOutcome.Comments = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SIRIComments"])))
                            sjrOutcome.SIRIComments = Convert.ToString(dataReader["SIRIComments"]);
                        else
                            sjrOutcome.SIRIComments = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["FeedbackToNoK"])))
                            sjrOutcome.FeedbackToNoK = Convert.ToString(dataReader["FeedbackToNoK"]);
                        else
                            sjrOutcome.FeedbackToNoK = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["CreatedBy"])))
                            sjrOutcome.CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        else
                            sjrOutcome.CreatedBy = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["CreateDate"])))
                            sjrOutcome.CreateDate = Convert.ToDateTime(dataReader["CreateDate"]).ToString("dd/MM/yyyy");
                        else
                            sjrOutcome.CreateDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SJROutcome"])))
                            sjrOutcome.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        else
                            sjrOutcome.SJROutcome = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReviewCompleted"])))
                            sjrOutcome.ReviewCompleted = Convert.ToBoolean(dataReader["ReviewCompleted"]);
                        else
                            sjrOutcome.ReviewCompleted = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateSJR1Requested"])))
                            sjrOutcome.DateSJR1Requested = Convert.ToDateTime(dataReader["DateSJR1Requested"]).ToString("dd/MM/yyyy");
                        else
                            sjrOutcome.DateSJR1Requested = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SJR1RequestSentTo"])))
                            sjrOutcome.SJR1RequestSentTo = Convert.ToString(dataReader["SJR1RequestSentTo"]);
                        else
                            sjrOutcome.SJR1RequestSentTo = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["RandomSampleReview"])))
                            sjrOutcome.RandomSampleReview = Convert.ToBoolean(dataReader["RandomSampleReview"]);
                        else
                            sjrOutcome.RandomSampleReview = false;
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJROutcome", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            if (sjrOutcome.CreatedBy == null) sjrOutcome.CreatedBy = "";
            return sjrOutcome;
        }

        /// <summary>
        /// Get all details for SJR1 step 2 for particular patient ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsSJRFormProblemType</returns>
        public clsSJRFormProblemType GetSJRProblemType(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            clsSJRFormProblemType sjrProblemType = new clsSJRFormProblemType();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetSJRProblemType", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Patient_ID"])))
                            sjrProblemType.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        else
                            sjrProblemType.Patient_ID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            sjrProblemType.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            sjrProblemType.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ProblemOccured"])))
                            sjrProblemType.ProblemOccured = Convert.ToBoolean(dataReader["ProblemOccured"]);
                        else
                            sjrProblemType.ProblemOccured = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AssessmentResponseID"])))
                            sjrProblemType.AssessmentResponseID = Convert.ToInt32(dataReader["AssessmentResponseID"]);
                        else
                            sjrProblemType.AssessmentResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AssessmentCarePhaseID"])))
                            sjrProblemType.AssessmentCarePhaseID = Convert.ToInt32(dataReader["AssessmentCarePhaseID"]);
                        else
                            sjrProblemType.AssessmentCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MedicationResponseID"])))
                            sjrProblemType.MedicationResponseID = Convert.ToInt32(dataReader["MedicationResponseID"]);
                        else
                            sjrProblemType.MedicationResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MedicationCarePhaseID"])))
                            sjrProblemType.MedicationCarePhaseID = Convert.ToInt32(dataReader["MedicationCarePhaseID"]);
                        else
                            sjrProblemType.MedicationCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["TreatmentResponseID"])))
                            sjrProblemType.TreatmentResponseID = Convert.ToInt32(dataReader["TreatmentResponseID"]);
                        else
                            sjrProblemType.TreatmentResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["TreatmentCarePhaseID"])))
                            sjrProblemType.TreatmentCarePhaseID = Convert.ToInt32(dataReader["TreatmentCarePhaseID"]);
                        else
                            sjrProblemType.TreatmentCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["InfectionResponseID"])))
                            sjrProblemType.InfectionResponseID = Convert.ToInt32(dataReader["InfectionResponseID"]);
                        else
                            sjrProblemType.InfectionResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["InfectionCarePhaseID"])))
                            sjrProblemType.InfectionCarePhaseID = Convert.ToInt32(dataReader["InfectionCarePhaseID"]);
                        else
                            sjrProblemType.InfectionCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ProcedureResponseID"])))
                            sjrProblemType.ProcedureResponseID = Convert.ToInt32(dataReader["ProcedureResponseID"]);
                        else
                            sjrProblemType.ProcedureResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ProcedureCarePhaseID"])))
                            sjrProblemType.ProcedureCarePhaseID = Convert.ToInt32(dataReader["ProcedureCarePhaseID"]);
                        else
                            sjrProblemType.ProcedureCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MonitoringResponseID"])))
                            sjrProblemType.MonitoringResponseID = Convert.ToInt32(dataReader["MonitoringResponseID"]);
                        else
                            sjrProblemType.MonitoringResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ResuscitationResponseID"])))
                            sjrProblemType.ResuscitationResponseID = Convert.ToInt32(dataReader["ResuscitationResponseID"]);
                        else
                            sjrProblemType.ResuscitationResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["OthertypeResponseID"])))
                            sjrProblemType.OthertypeResponseID = Convert.ToInt32(dataReader["OthertypeResponseID"]);
                        else
                            sjrProblemType.OthertypeResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["OthertypeCarePhaseID"])))
                            sjrProblemType.OthertypeCarePhaseID = Convert.ToInt32(dataReader["OthertypeCarePhaseID"]);
                        else
                            sjrProblemType.OthertypeCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AvoidabilityScoreID"])))
                            sjrProblemType.AvoidabilityScoreID = Convert.ToInt32(dataReader["AvoidabilityScoreID"]);
                        else
                            sjrProblemType.AvoidabilityScoreID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SpecialityID"])))
                            sjrProblemType.SpecialityID = Convert.ToInt32(dataReader["SpecialityID"]);
                        else
                            sjrProblemType.SpecialityID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReviewCompleted"])))
                            sjrProblemType.ReviewCompleted = Convert.ToBoolean(dataReader["ReviewCompleted"]);
                        else
                            sjrProblemType.ReviewCompleted = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Comments"])))
                            sjrProblemType.Comments = Convert.ToString(dataReader["Comments"]);
                        else
                            sjrProblemType.Comments = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["CreatedBy"])))
                            sjrProblemType.CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        else
                            sjrProblemType.CreatedBy = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["CreateDate"])))
                            sjrProblemType.CreateDate = Convert.ToDateTime(dataReader["CreateDate"]).ToString("dd/MM/yyyy");
                        else
                            sjrProblemType.CreateDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SJR1"])))
                            sjrProblemType.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        else
                            sjrProblemType.SJR1 = 0;                        
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJRProblemType", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return sjrProblemType;
        }

        public clsSJRFormProblemType GetSJR2ProblemType(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            clsSJRFormProblemType sjrProblemType = new clsSJRFormProblemType();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetSJR2ProblemType", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Patient_ID"])))
                            sjrProblemType.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        else
                            sjrProblemType.Patient_ID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            sjrProblemType.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            sjrProblemType.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ProblemOccured"])))
                            sjrProblemType.ProblemOccured = Convert.ToBoolean(dataReader["ProblemOccured"]);
                        else
                            sjrProblemType.ProblemOccured = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AssessmentResponseID"])))
                            sjrProblemType.AssessmentResponseID = Convert.ToInt32(dataReader["AssessmentResponseID"]);
                        else
                            sjrProblemType.AssessmentResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AssessmentCarePhaseID"])))
                            sjrProblemType.AssessmentCarePhaseID = Convert.ToInt32(dataReader["AssessmentCarePhaseID"]);
                        else
                            sjrProblemType.AssessmentCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MedicationResponseID"])))
                            sjrProblemType.MedicationResponseID = Convert.ToInt32(dataReader["MedicationResponseID"]);
                        else
                            sjrProblemType.MedicationResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MedicationCarePhaseID"])))
                            sjrProblemType.MedicationCarePhaseID = Convert.ToInt32(dataReader["MedicationCarePhaseID"]);
                        else
                            sjrProblemType.MedicationCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["TreatmentResponseID"])))
                            sjrProblemType.TreatmentResponseID = Convert.ToInt32(dataReader["TreatmentResponseID"]);
                        else
                            sjrProblemType.TreatmentResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["TreatmentCarePhaseID"])))
                            sjrProblemType.TreatmentCarePhaseID = Convert.ToInt32(dataReader["TreatmentCarePhaseID"]);
                        else
                            sjrProblemType.TreatmentCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["InfectionResponseID"])))
                            sjrProblemType.InfectionResponseID = Convert.ToInt32(dataReader["InfectionResponseID"]);
                        else
                            sjrProblemType.InfectionResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["InfectionCarePhaseID"])))
                            sjrProblemType.InfectionCarePhaseID = Convert.ToInt32(dataReader["InfectionCarePhaseID"]);
                        else
                            sjrProblemType.InfectionCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ProcedureResponseID"])))
                            sjrProblemType.ProcedureResponseID = Convert.ToInt32(dataReader["ProcedureResponseID"]);
                        else
                            sjrProblemType.ProcedureResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ProcedureCarePhaseID"])))
                            sjrProblemType.ProcedureCarePhaseID = Convert.ToInt32(dataReader["ProcedureCarePhaseID"]);
                        else
                            sjrProblemType.ProcedureCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["MonitoringResponseID"])))
                            sjrProblemType.MonitoringResponseID = Convert.ToInt32(dataReader["MonitoringResponseID"]);
                        else
                            sjrProblemType.MonitoringResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ResuscitationResponseID"])))
                            sjrProblemType.ResuscitationResponseID = Convert.ToInt32(dataReader["ResuscitationResponseID"]);
                        else
                            sjrProblemType.ResuscitationResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["OthertypeResponseID"])))
                            sjrProblemType.OthertypeResponseID = Convert.ToInt32(dataReader["OthertypeResponseID"]);
                        else
                            sjrProblemType.OthertypeResponseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["OthertypeCarePhaseID"])))
                            sjrProblemType.OthertypeCarePhaseID = Convert.ToInt32(dataReader["OthertypeCarePhaseID"]);
                        else
                            sjrProblemType.OthertypeCarePhaseID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["AvoidabilityScoreID"])))
                            sjrProblemType.AvoidabilityScoreID = Convert.ToInt32(dataReader["AvoidabilityScoreID"]);
                        else
                            sjrProblemType.AvoidabilityScoreID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReviewCompleted"])))
                            sjrProblemType.ReviewCompleted = Convert.ToBoolean(dataReader["ReviewCompleted"]);
                        else
                            sjrProblemType.ReviewCompleted = false;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SpecialityID"])))
                            sjrProblemType.SpecialityID = Convert.ToInt32(dataReader["SpecialityID"]);
                        else
                            sjrProblemType.SpecialityID = 0;
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Comments"])))
                            sjrProblemType.Comments = Convert.ToString(dataReader["Comments"]);
                        else
                            sjrProblemType.Comments = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["CreatedBy"])))
                            sjrProblemType.CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        else
                            sjrProblemType.CreatedBy = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["CreateDate"])))
                            sjrProblemType.CreateDate = Convert.ToDateTime(dataReader["CreateDate"]).ToString("dd/MM/yyyy");
                        else
                            sjrProblemType.CreateDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["SJR2"])))
                            sjrProblemType.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        else
                            sjrProblemType.SJR2 = 0;                        
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJR2ProblemType", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return sjrProblemType;
        }

        /// <summary>
        /// Get distinct discharge consultant names for the filter drop down.
        /// </summary>
        /// <returns>List<DischargeConsultants></returns>
        public List<DischargeConsultants> GetConsultants(int userID)
        {
            List<DischargeConsultants> dischargeConsultants = new List<DischargeConsultants>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetConsultants", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        DischargeConsultants dischargeConsultant = new DischargeConsultants();
                        dischargeConsultant.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        dischargeConsultant.DischargeConsultantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        dischargeConsultants.Add(dischargeConsultant);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetConsultants", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return dischargeConsultants;
        }

        public List<PatientTypes> GetPatientTypes(int userID)
        {
            List<PatientTypes> patienttypes = new List<PatientTypes>();
            SqlDataReader dataReader = null;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetPatientTypes", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        PatientTypes patienttype = new PatientTypes();
                        patienttype.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        patienttype.PatientType = Convert.ToString(dataReader["PatientType"]);
                        patienttype.ID = Convert.ToInt32(dataReader["ID"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientTypes", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public List<TestStatuses> GetTestStatuses(int userID)
        {
            List<TestStatuses> patienttypes = new List<TestStatuses>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetTestStatuses", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        TestStatuses patienttype = new TestStatuses();
                        patienttype.TestStatus = Convert.ToString(dataReader["TestStatus"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetTestStatuses", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public COVIDFilterDDM GetCOVIDFilterDDM(int userID)
        {
            IDataReader dbReader = null;
            COVIDFilterDDM testresultsdto = new COVIDFilterDDM();
            List<Notifications> lstPatientTypes = new List<Notifications>();
            List<TestStatuses> lstTestStatus = new List<TestStatuses>();
            List<TestResults> lstTestResult = new List<TestResults>();
            List<TestOrderLocations> lstTestOrderLocation = new List<TestOrderLocations>();
            List<LastLocations> lstLastLocation = new List<LastLocations>();
            List<AdmissionStatuses> lstAdmissionStatus = new List<AdmissionStatuses>();
            clsDataManagement datamanagement = new clsDataManagement();
            COVIDTestResults testresults = new COVIDTestResults();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19FilterDropDown", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        Notifications patienttype = new Notifications();
                        patienttype.Notification = Convert.ToString(dbReader["Notification"]);
                        lstPatientTypes.Add(patienttype);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            TestStatuses patienttype = new TestStatuses();
                            patienttype.TestStatus = Convert.ToString(dbReader["TestStatus"]);
                            lstTestStatus.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            TestResults patienttype = new TestResults();
                            patienttype.TestResult = Convert.ToString(dbReader["TestResult"]);
                            lstTestResult.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            TestOrderLocations patienttype = new TestOrderLocations();
                            patienttype.TestOrderLocation = Convert.ToString(dbReader["TestOrderLocation"]);
                            lstTestOrderLocation.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            LastLocations patienttype = new LastLocations();
                            patienttype.LastLocation = Convert.ToString(dbReader["LastLocation"]);
                            lstLastLocation.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            AdmissionStatuses patienttype = new AdmissionStatuses();
                            patienttype.AdmissionStatus = Convert.ToString(dbReader["AdmissionStatus"]);
                            lstAdmissionStatus.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            datamanagement.SourceSystem = Convert.ToString(dbReader["SourceSystem"]);
                            datamanagement.UpdateDate = Convert.ToDateTime(dbReader["UpdateDate"]).ToString("dd/MM/yyyy HH:mm");
                        }
                    }
                    testresultsdto.lstNotification = lstPatientTypes;
                    testresultsdto.lstTestStatus = lstTestStatus;
                    testresultsdto.lstTestResult = lstTestResult;
                    testresultsdto.lstTestOrderLocation = lstTestOrderLocation;
                    testresultsdto.lstLastLocation = lstLastLocation;
                    testresultsdto.lstAdmissionStatus = lstAdmissionStatus;
                    testresultsdto.datamanagement = datamanagement;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDFilterDDM", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return testresultsdto;
        }

        public MortalityFilterDDM GetMortalityFilterDDM(int userID)
        {
            IDataReader dbReader = null;
            MortalityFilterDDM testresultsdto = new MortalityFilterDDM();
            List<DischargeSpecialityNames> lstSpecialities = new List<DischargeSpecialityNames>();
            List<PatientTypes> lstPatientTypes = new List<PatientTypes>();
            List<WardOfDeaths> lstWardOfDeaths = new List<WardOfDeaths>();
            List<DischargeConsultants> lstDischargeConsultants = new List<DischargeConsultants>();
            clsDataManagement datamanagement = new clsDataManagement();
            COVIDTestResults testresults = new COVIDTestResults();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMortalityFilterDropDown", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        DischargeSpecialityNames dischargeSpeciality = new DischargeSpecialityNames();
                        dischargeSpeciality.DischargeSpecialityCode = Convert.ToString(dbReader["DischargeSpecialityCode"]);
                        dischargeSpeciality.DischargeSpeciality = Convert.ToString(dbReader["DischargeSpeciality"]);
                        lstSpecialities.Add(dischargeSpeciality);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            PatientTypes patienttype = new PatientTypes();
                            patienttype.PatientTypeLongText = Convert.ToString(dbReader["PatientTypeLongText"]);
                            patienttype.PatientType = Convert.ToString(dbReader["PatientType"]);
                            patienttype.ID = Convert.ToInt32(dbReader["ID"]);
                            lstPatientTypes.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            WardOfDeaths wardOfDeath = new WardOfDeaths();
                            wardOfDeath.WardOfDeath = Convert.ToString(dbReader["WardOfDeath"]);
                            lstWardOfDeaths.Add(wardOfDeath);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            DischargeConsultants dischargeConsultant = new DischargeConsultants();
                            dischargeConsultant.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                            dischargeConsultant.DischargeConsultantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                            lstDischargeConsultants.Add(dischargeConsultant);
                        }
                    }
                    testresultsdto.lstSpecialities = lstSpecialities;
                    testresultsdto.lstPatientTypes = lstPatientTypes;
                    testresultsdto.lstWardOfDeaths = lstWardOfDeaths;
                    testresultsdto.lstDischargeConsultants = lstDischargeConsultants;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMortalityFilterDDM", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return testresultsdto;
        }

        public PatientExtractFilterDDM GetPatientExtractFilterDDM(int userID)
        {
            IDataReader dbReader = null;
            PatientExtractFilterDDM testresultsdto = new PatientExtractFilterDDM();
            List<CareGroups> lstCareGroups = new List<CareGroups>();
            List<DischargeSpecialityNames> lstSpecialities = new List<DischargeSpecialityNames>();
            List<PatientTypes> lstPatientTypes = new List<PatientTypes>();
            List<WardOfDeaths> lstWardOfDeaths = new List<WardOfDeaths>();
            List<DischargeConsultants> lstDischargeConsultants = new List<DischargeConsultants>();
            List<MENames> lstMENames = new List<MENames>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPatientExtractFilterDropDown", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        CareGroups caregroup = new CareGroups();
                        caregroup.CareGroup = Convert.ToString(dbReader["CareGroup"]);
                        lstCareGroups.Add(caregroup);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            DischargeSpecialityNames dischargeSpeciality = new DischargeSpecialityNames();
                            dischargeSpeciality.DischargeSpecialityCode = Convert.ToString(dbReader["DischargeSpecialityCode"]);
                            dischargeSpeciality.DischargeSpeciality = Convert.ToString(dbReader["DischargeSpeciality"]);
                            lstSpecialities.Add(dischargeSpeciality);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            PatientTypes patienttype = new PatientTypes();
                            patienttype.PatientTypeLongText = Convert.ToString(dbReader["PatientTypeLongText"]);
                            patienttype.PatientType = Convert.ToString(dbReader["PatientType"]);
                            patienttype.ID = Convert.ToInt32(dbReader["ID"]);
                            lstPatientTypes.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            WardOfDeaths wardOfDeath = new WardOfDeaths();
                            wardOfDeath.WardOfDeath = Convert.ToString(dbReader["WardOfDeath"]);
                            lstWardOfDeaths.Add(wardOfDeath);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            DischargeConsultants dischargeConsultant = new DischargeConsultants();
                            dischargeConsultant.DischargeConsultantCode = Convert.ToString(dbReader["DischargeConsultantCode"]);
                            dischargeConsultant.DischargeConsultantName = Convert.ToString(dbReader["DischargeConsultantName"]);
                            lstDischargeConsultants.Add(dischargeConsultant);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            MENames dischargeConsultant = new MENames();
                            dischargeConsultant.MEName = Convert.ToString(dbReader["MEName"]);
                            dischargeConsultant.MEUserName = Convert.ToString(dbReader["MEUserName"]);
                            lstMENames.Add(dischargeConsultant);
                        }
                    }
                    testresultsdto.lstCareGroups = lstCareGroups;
                    testresultsdto.lstSpecialities = lstSpecialities;
                    testresultsdto.lstPatientTypes = lstPatientTypes;
                    testresultsdto.lstWardOfDeaths = lstWardOfDeaths;
                    testresultsdto.lstDischargeConsultants = lstDischargeConsultants;
                    testresultsdto.lstMENames = lstMENames;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPatientExtractFilterDDM", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return testresultsdto;
        }

        public COVIDPatientFilterDDM GetCOVIDpatientFilterDDM(int userID)
        {
            IDataReader dbReader = null;
            COVIDPatientFilterDDM testresultsdto = new COVIDPatientFilterDDM();
            List<PatientTypes> lstPatientTypes = new List<PatientTypes>();
            List<AgeGroup> lstAgeGroup = new List<AgeGroup>();
            List<TestResults> lstTestResult = new List<TestResults>();
            List<BreathingStatuses> lstBreathingStatuses = new List<BreathingStatuses>();
            List<LastLocations> lstLastLocation = new List<LastLocations>();
            List<AdmissionStatuses> lstAdmissionStatus = new List<AdmissionStatuses>();
            clsDataManagement datamanagement = new clsDataManagement();
            COVIDTestResults testresults = new COVIDTestResults();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCOVID19PatientFilterDropDown", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        PatientTypes patienttype = new PatientTypes();
                        patienttype.PatientType = Convert.ToString(dbReader["PatientType"]);
                        lstPatientTypes.Add(patienttype);
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            AgeGroup patienttype = new AgeGroup();
                            patienttype.Age_Group = Convert.ToString(dbReader["Age_Group"]);
                            lstAgeGroup.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            TestResults patienttype = new TestResults();
                            patienttype.TestResult = Convert.ToString(dbReader["TestResult"]);
                            lstTestResult.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            BreathingStatuses patienttype = new BreathingStatuses();
                            patienttype.BreathingStatus = Convert.ToString(dbReader["BreathingStatus"]);
                            lstBreathingStatuses.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            LastLocations patienttype = new LastLocations();
                            patienttype.LastLocation = Convert.ToString(dbReader["LastLocation"]);
                            lstLastLocation.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            AdmissionStatuses patienttype = new AdmissionStatuses();
                            patienttype.AdmissionStatus = Convert.ToString(dbReader["AdmissionStatus"]);
                            lstAdmissionStatus.Add(patienttype);
                        }
                    }
                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            datamanagement.SourceSystem = Convert.ToString(dbReader["SourceSystem"]);
                            datamanagement.UpdateDate = Convert.ToDateTime(dbReader["UpdateDate"]).ToString("dd/MM/yyyy HH:mm");
                        }
                    }
                    testresultsdto.lstPatientType = lstPatientTypes;
                    testresultsdto.lstAgeGroup = lstAgeGroup;
                    testresultsdto.lstTestResult = lstTestResult;
                    testresultsdto.lstBreathingStatuses = lstBreathingStatuses;
                    testresultsdto.lstLastLocation = lstLastLocation;
                    testresultsdto.lstAdmissionStatus = lstAdmissionStatus;
                    testresultsdto.datamanagement = datamanagement;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCOVIDpatientFilterDDM", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return testresultsdto;
        }

        public List<TestResults> GetTestResults(int userID)
        {
            List<TestResults> patienttypes = new List<TestResults>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetTestResultsDDM", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        TestResults patienttype = new TestResults();
                        patienttype.TestResult = Convert.ToString(dataReader["TestResult"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetTestResults", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public List<TestOrderLocations> GetTestOrderLocations(int userID)
        {
            List<TestOrderLocations> patienttypes = new List<TestOrderLocations>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetTestOrderLocation", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        TestOrderLocations patienttype = new TestOrderLocations();
                        patienttype.TestOrderLocation = Convert.ToString(dataReader["TestOrderLocation"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetTestOrderLocations", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public List<LastLocations> GetLastLocations(int userID)
        {
            List<LastLocations> patienttypes = new List<LastLocations>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetLastLocation", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        LastLocations patienttype = new LastLocations();
                        patienttype.LastLocation = Convert.ToString(dataReader["LastLocation"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetLastLocations", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public List<AdmissionStatuses> GetAdmissionStatus(int userID)
        {
            List<AdmissionStatuses> patienttypes = new List<AdmissionStatuses>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetAdmissionStatus", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        AdmissionStatuses patienttype = new AdmissionStatuses();
                        patienttype.AdmissionStatus = Convert.ToString(dataReader["AdmissionStatus"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetAdmissionStatus", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public List<AdmissionTypes> GetAdmissionTypes(int userID)
        {
            List<AdmissionTypes> patienttypes = new List<AdmissionTypes>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetAdmissionTypes", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        AdmissionTypes patienttype = new AdmissionTypes();
                        patienttype.Admission_Method_Code = Convert.ToString(dataReader["Admission_Method_Code"]);
                        patienttype.Admission_Method = Convert.ToString(dataReader["Admission_Method"]);
                        patienttypes.Add(patienttype);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetAdmissionTypes", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttypes;
        }

        public WebsiteSetting GetWebsiteSettings(int userID)
        {
            WebsiteSetting patienttype = new WebsiteSetting();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetWebsiteSetting", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        patienttype.EmailID = Convert.ToString(dataReader["EmailID"]);
                        patienttype.Password = Convert.ToString(dataReader["Password"]);
                        patienttype.DomainName = Convert.ToString(dataReader["DomainName"]);
                        patienttype.SMTPServer = Convert.ToString(dataReader["SMTPServer"]);
                        patienttype.Port = Convert.ToInt32(dataReader["Port"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetWebsiteSettings", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return patienttype;
        }


        public List<Roles> GetRoles(int userID, bool IsInternal = false)
        {
            List<Roles> roles = new List<Roles>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetRoles", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@IsInternal", IsInternal);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Roles role = new Roles();
                        role.RoleName = Convert.ToString(dataReader["RoleName"]);
                        role.ID = Convert.ToInt32(dataReader["ID"]);
                        roles.Add(role);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetRoles", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return roles;
        }

        public List<Roles> GetEmailDetails(int userID, bool IsInternal = false)
        {
            List<Roles> roles = new List<Roles>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetRoles", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@IsInternal", IsInternal);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Roles role = new Roles();
                        role.RoleName = Convert.ToString(dataReader["RoleName"]);
                        role.ID = Convert.ToInt32(dataReader["ID"]);
                        roles.Add(role);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetEmailDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return roles;
        }

        public List<Modules> GetModules(int userID)
        {
            List<Modules> roles = new List<Modules>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetModules", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Modules role = new Modules();
                        role.ModuleName = Convert.ToString(dataReader["ModuleName"]);
                        role.ID = Convert.ToInt32(dataReader["ID"]);
                        roles.Add(role);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetModules", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return roles;
        }

        public List<NotificationTriggers> GetNotificationTriggers(int userID)
        {
            List<NotificationTriggers> roles = new List<NotificationTriggers>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetNotificationTriggers", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        NotificationTriggers role = new NotificationTriggers();
                        role.ID = Convert.ToInt32(dataReader["ID"]);
                        role.NotificationTrigger = Convert.ToString(dataReader["NotificationTrigger"]);
                        roles.Add(role);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetNotificationTriggers", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return roles;
        }

        public List<Specialities> GetSpecialitiesForDropDown(int userID, string term = "")
        {
            List<Specialities> specialities = new List<Specialities>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetSpecialities", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@term", term);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Specialities speciality = new Specialities();
                        speciality.SpecialityName = Convert.ToString(dataReader["SpecialityName"]);
                        speciality.SpecialityID = Convert.ToInt32(dataReader["SpecialityID"]);
                        speciality.SpecialityCode = Convert.ToString(dataReader["SpecialityCode"]);
                        speciality.CareGroup = Convert.ToString(dataReader["CareGroup"]);
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSpecialitiesForDropDown", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<CareGroups> GetCareGroups(int userID)
        {
            List<CareGroups> specialities = new List<CareGroups>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetCareGroups", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        CareGroups speciality = new CareGroups();
                        speciality.CareGroup = Convert.ToString(dataReader["CareGroup"]);
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCareGroups", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<MENames> GetMENames(int userID)
        {
            List<MENames> specialities = new List<MENames>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetMENames", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        MENames speciality = new MENames();
                        speciality.MEName = Convert.ToString(dataReader["MEName"]);
                        speciality.MEUserName = Convert.ToString(dataReader["MEUserName"]);
                        speciality.ID = Convert.ToInt32(dataReader["ID"]);
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMENames", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<CodingIssueSummary> GetCodingIssueSummary(int userID)
        {
            List<CodingIssueSummary> specialities = new List<CodingIssueSummary>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetCodingIssueSummary", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        CodingIssueSummary speciality = new CodingIssueSummary();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            speciality.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            speciality.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientName"])))
                            speciality.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            speciality.PatientName = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateOfDeath"])))
                            speciality.DateOfDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        else
                            speciality.DateOfDeath = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["IssueDate"])))
                            speciality.IssueDate = Convert.ToDateTime(dataReader["IssueDate"]).ToString("dd/MM/yyyy");
                        else
                            speciality.IssueDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["IssuedBy"])))
                            speciality.IssuedBy = Convert.ToString(dataReader["IssuedBy"]);
                        else
                            speciality.IssuedBy = "";
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCodingIssueSummary", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<DQIssueSummary> GetDQIssueSummary(int userID)
        {
            List<DQIssueSummary> specialities = new List<DQIssueSummary>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetDQIssueSummary", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        DQIssueSummary speciality = new DQIssueSummary();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            speciality.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            speciality.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientName"])))
                            speciality.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            speciality.PatientName = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateOfDeath"])))
                            speciality.DateOfDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        else
                            speciality.DateOfDeath = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["IssuedDate"])))
                            speciality.IssueDate = Convert.ToDateTime(dataReader["IssuedDate"]).ToString("dd/MM/yyyy");
                        else
                            speciality.IssueDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["IssuedBy"])))
                            speciality.IssuedBy = Convert.ToString(dataReader["IssuedBy"]);
                        else
                            speciality.IssuedBy = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Comments"])))
                            speciality.Comments = Convert.ToString(dataReader["Comments"]);
                        else
                            speciality.Comments = "";
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetDQIssueSummary", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<UrgentMESummary> GetUrgentMESummary(int userID)
        {
            List<UrgentMESummary> specialities = new List<UrgentMESummary>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetUrgentMESummary", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        UrgentMESummary speciality = new UrgentMESummary();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            speciality.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            speciality.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientName"])))
                            speciality.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            speciality.PatientName = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateOfDeath"])))
                            speciality.DateOfDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        else
                            speciality.DateOfDeath = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["IssuedDate"])))
                            speciality.IssueDate = Convert.ToDateTime(dataReader["IssuedDate"]).ToString("dd/MM/yyyy");
                        else
                            speciality.IssueDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["IssuedBy"])))
                            speciality.IssuedBy = Convert.ToString(dataReader["IssuedBy"]);
                        else
                            speciality.IssuedBy = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["Comments"])))
                            speciality.Comments = Convert.ToString(dataReader["Comments"]);
                        else
                            speciality.Comments = "";
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetUrgentMESummary", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<FullSJR2Summary> GetFullSJR2Summary(int userID)
        {
            List<FullSJR2Summary> specialities = new List<FullSJR2Summary>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetFullSJR2Summary", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        FullSJR2Summary speciality = new FullSJR2Summary();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            speciality.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            speciality.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientName"])))
                            speciality.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            speciality.PatientName = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateOfDeath"])))
                            speciality.DateOfDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        else
                            speciality.DateOfDeath = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["RequestedDate"])))
                            speciality.RequestedDate = Convert.ToDateTime(dataReader["RequestedDate"]).ToString("dd/MM/yyyy");
                        else
                            speciality.RequestedDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["RequestedBy"])))
                            speciality.RequestedBy = Convert.ToString(dataReader["RequestedBy"]);
                        else
                            speciality.RequestedBy = "";
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetFullSJR2Summary", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<FullSJRSummary> GetFullSJRSummary(int userID)
        {
            List<FullSJRSummary> specialities = new List<FullSJRSummary>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetFullSJRSummary", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        FullSJRSummary speciality = new FullSJRSummary();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            speciality.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            speciality.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientName"])))
                            speciality.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            speciality.PatientName = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateOfDeath"])))
                            speciality.DateOfDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        else
                            speciality.DateOfDeath = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["RequestedDate"])))
                            speciality.RequestedDate = Convert.ToDateTime(dataReader["RequestedDate"]).ToString("dd/MM/yyyy");
                        else
                            speciality.RequestedDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["RequestedBy"])))
                            speciality.RequestedBy = Convert.ToString(dataReader["RequestedBy"]);
                        else
                            speciality.RequestedBy = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReviewSpeciality"])))
                            speciality.ReviewSpeciality = Convert.ToString(dataReader["ReviewSpeciality"]);
                        else
                            speciality.ReviewSpeciality = "";
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetFullSJRSummary", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public List<OtherReferralSummary> GetOtherReferralSummary(int userID)
        {
            List<OtherReferralSummary> specialities = new List<OtherReferralSummary>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetOtherReferralSummary", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        OtherReferralSummary speciality = new OtherReferralSummary();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientID"])))
                            speciality.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            speciality.PatientID = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["PatientName"])))
                            speciality.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            speciality.PatientName = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["DateOfDeath"])))
                            speciality.DateOfDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        else
                            speciality.DateOfDeath = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReferralDate"])))
                            speciality.ReferralDate = Convert.ToDateTime(dataReader["ReferralDate"]).ToString("dd/MM/yyyy");
                        else
                            speciality.ReferralDate = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReferralType"])))
                            speciality.ReferralType = Convert.ToString(dataReader["ReferralType"]);
                        else
                            speciality.ReferralType = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReferralReason"])))
                            speciality.ReferralReason = Convert.ToString(dataReader["ReferralReason"]);
                        else
                            speciality.ReferralReason = "";
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["ReferredBy"])))
                            speciality.ReferredBy = Convert.ToString(dataReader["ReferredBy"]);
                        else
                            speciality.ReferredBy = "";
                        specialities.Add(speciality);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetOtherReferralSummary", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return specialities;
        }

        public SJRTracking GetSJRTrackingDashboard(string startDate, string endDate, string caregroup, string patientType, string wardOfDeath, string dischargeConsultantCode, string speciality, string mename, int userID)
        {
            IDataReader dbReader = null;
            if (caregroup == "0") caregroup = "";
            if (patientType == "0") patientType = "";
            if (wardOfDeath == "0") wardOfDeath = "";
            if (dischargeConsultantCode == "0") dischargeConsultantCode = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            List<FeedbackType> lstFeedbackTypes = new List<FeedbackType>();
            SJRTracking patientDashboard = new SJRTracking();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetSJRTrackingDashboard", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (!string.IsNullOrEmpty(startDate))
                        dbCmd.Parameters.AddWithValue("@StartDate", Convert.ToDateTime(startDate));
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", System.DateTime.Now.AddDays(-30));
                    if (!string.IsNullOrEmpty(endDate))
                        dbCmd.Parameters.AddWithValue("@EndDate", Convert.ToDateTime(endDate));
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", System.DateTime.Now);
                    if (!string.IsNullOrEmpty(dischargeConsultantCode))
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCmd.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (!string.IsNullOrEmpty(wardOfDeath))
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (!string.IsNullOrEmpty(caregroup))
                        dbCmd.Parameters.AddWithValue("@CareGroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@CareGroup", "");
                    if (!string.IsNullOrEmpty(patientType))
                        dbCmd.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (!string.IsNullOrEmpty(speciality))
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (!string.IsNullOrEmpty(mename))
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["AdultDeathCount"].ToString()))
                            patientDashboard.AdultDeathCount = 0;
                        else
                            patientDashboard.AdultDeathCount = Convert.ToInt32(dbReader["AdultDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["LearningDisabilityCount"].ToString()))
                            patientDashboard.LearningDisabilityCount = 0;
                        else
                            patientDashboard.LearningDisabilityCount = Convert.ToInt32(dbReader["LearningDisabilityCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1RequiredPercentage"].ToString()))
                            patientDashboard.SJR1RequiredPercentage = 0;
                        else
                            patientDashboard.SJR1RequiredPercentage = Convert.ToDecimal(dbReader["SJR1RequiredPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1Required"].ToString()))
                            patientDashboard.SJR1Required = 0;
                        else
                            patientDashboard.SJR1Required = Convert.ToInt32(dbReader["SJR1Required"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1NotRequired"].ToString()))
                            patientDashboard.SJR1NotRequired = 0;
                        else
                            patientDashboard.SJR1NotRequired = Convert.ToInt32(dbReader["SJR1NotRequired"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1Completed"].ToString()))
                            patientDashboard.SJR1Completed = 0;
                        else
                            patientDashboard.SJR1Completed = Convert.ToInt32(dbReader["SJR1Completed"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1Outstanding"].ToString()))
                            patientDashboard.SJR1Outstanding = 0;
                        else
                            patientDashboard.SJR1Outstanding = Convert.ToInt32(dbReader["SJR1Outstanding"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcomeGrade0Count"].ToString()))
                            patientDashboard.SJROutcomeGrade0Count = 0;
                        else
                            patientDashboard.SJROutcomeGrade0Count = Convert.ToInt32(dbReader["SJROutcomeGrade0Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcomeGrade1Count"].ToString()))
                            patientDashboard.SJROutcomeGrade1Count = 0;
                        else
                            patientDashboard.SJROutcomeGrade1Count = Convert.ToInt32(dbReader["SJROutcomeGrade1Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcomeGrade2Count"].ToString()))
                            patientDashboard.SJROutcomeGrade2Count = 0;
                        else
                            patientDashboard.SJROutcomeGrade2Count = Convert.ToInt32(dbReader["SJROutcomeGrade2Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJROutcomeGrade3Count"].ToString()))
                            patientDashboard.SJROutcomeGrade3Count = 0;
                        else
                            patientDashboard.SJROutcomeGrade3Count = Convert.ToInt32(dbReader["SJROutcomeGrade3Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJRCareVeryPoorCount"].ToString()))
                            patientDashboard.SJRCareVeryPoorCount = 0;
                        else
                            patientDashboard.SJRCareVeryPoorCount = Convert.ToInt32(dbReader["SJRCareVeryPoorCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJRCarePoorCount"].ToString()))
                            patientDashboard.SJRCarePoorCount = 0;
                        else
                            patientDashboard.SJRCarePoorCount = Convert.ToInt32(dbReader["SJRCarePoorCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJRCareAdequateCount"].ToString()))
                            patientDashboard.SJRCareAdequateCount = 0;
                        else
                            patientDashboard.SJRCareAdequateCount = Convert.ToInt32(dbReader["SJRCareAdequateCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJRCareVeryGoodCount"].ToString()))
                            patientDashboard.SJRCareVeryGoodCount = 0;
                        else
                            patientDashboard.SJRCareVeryGoodCount = Convert.ToInt32(dbReader["SJRCareVeryGoodCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJ2Required"].ToString()))
                            patientDashboard.SJR2Required = 0;
                        else
                            patientDashboard.SJR2Required = Convert.ToInt32(dbReader["SJ2Required"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2NotRequired"].ToString()))
                            patientDashboard.SJR2NotRequired = 0;
                        else
                            patientDashboard.SJR2NotRequired = Convert.ToInt32(dbReader["SJR2NotRequired"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2Completed"].ToString()))
                            patientDashboard.SJR2Completed = 0;
                        else
                            patientDashboard.SJR2Completed = Convert.ToInt32(dbReader["SJR2Completed"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2Outstanding"].ToString()))
                            patientDashboard.SJR2Outstanding = 0;
                        else
                            patientDashboard.SJR2Outstanding = Convert.ToInt32(dbReader["SJR2Outstanding"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2OutcomeGrade0Count"].ToString()))
                            patientDashboard.SJR2OutcomeGrade0Count = 0;
                        else
                            patientDashboard.SJR2OutcomeGrade0Count = Convert.ToInt32(dbReader["SJR2OutcomeGrade0Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2OutcomeGrade1Count"].ToString()))
                            patientDashboard.SJR2OutcomeGrade1Count = 0;
                        else
                            patientDashboard.SJR2OutcomeGrade1Count = Convert.ToInt32(dbReader["SJR2OutcomeGrade1Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2OutcomeGrade2Count"].ToString()))
                            patientDashboard.SJR2OutcomeGrade2Count = 0;
                        else
                            patientDashboard.SJR2OutcomeGrade2Count = Convert.ToInt32(dbReader["SJR2OutcomeGrade2Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2OutcomeGrade3Count"].ToString()))
                            patientDashboard.SJR2OutcomeGrade3Count = 0;
                        else
                            patientDashboard.SJR2OutcomeGrade3Count = Convert.ToInt32(dbReader["SJR2OutcomeGrade3Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2CareVeryPoorCount"].ToString()))
                            patientDashboard.SJR2CareVeryPoorCount = 0;
                        else
                            patientDashboard.SJR2CareVeryPoorCount = Convert.ToInt32(dbReader["SJR2CareVeryPoorCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2CarePoorCount"].ToString()))
                            patientDashboard.SJR2CarePoorCount = 0;
                        else
                            patientDashboard.SJR2CarePoorCount = Convert.ToInt32(dbReader["SJR2CarePoorCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2CareAdequateCount"].ToString()))
                            patientDashboard.SJR2CareAdequateCount = 0;
                        else
                            patientDashboard.SJR2CareAdequateCount = Convert.ToInt32(dbReader["SJR2CareAdequateCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2CareGoodCount"].ToString()))
                            patientDashboard.SJR2CareGoodCount = 0;
                        else
                            patientDashboard.SJR2CareGoodCount = Convert.ToInt32(dbReader["SJR2CareGoodCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2CareVeryGoodCount"].ToString()))
                            patientDashboard.SJR2CareVeryGoodCount = 0;
                        else
                            patientDashboard.SJR2CareVeryGoodCount = Convert.ToInt32(dbReader["SJR2CareVeryGoodCount"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJRTrackingDashboard", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return patientDashboard;
        }

        public MROutcomeDashbaord GetMROutComeDashboard(string startdate, string enddate, string caregroup, string patienttype, string wardofdeath, string consultant, string speciality, string mename, int userID)
        {
            IDataReader dbReader = null;
            List<FeedbackType> lstFeedbackTypes = new List<FeedbackType>();
            MROutcomeDashbaord patientDashboard = new MROutcomeDashbaord();
            if (caregroup == "0") caregroup = "";
            if (patienttype == "0") patienttype = "";
            if (wardofdeath == "0") wardofdeath = "";
            if (consultant == "0") consultant = "";
            if (speciality == "0") speciality = "";
            if (mename == "0") mename = "";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMROutcomeDashboard", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    LogException(startdate, "", "", System.DateTime.Now, 1);
                    if (!string.IsNullOrEmpty(startdate))
                        dbCmd.Parameters.AddWithValue("@StartDate", Convert.ToDateTime(startdate));
                    else
                        dbCmd.Parameters.AddWithValue("@StartDate", System.DateTime.Now.AddDays(-30));
                    if (!string.IsNullOrEmpty(enddate))
                        dbCmd.Parameters.AddWithValue("@EndDate", Convert.ToDateTime(enddate));
                    else
                        dbCmd.Parameters.AddWithValue("@EndDate", System.DateTime.Now);
                    if (!string.IsNullOrEmpty(caregroup))
                        dbCmd.Parameters.AddWithValue("@Caregroup", caregroup);
                    else
                        dbCmd.Parameters.AddWithValue("@Caregroup", "");
                    if (!string.IsNullOrEmpty(patienttype))
                        dbCmd.Parameters.AddWithValue("@PatientType", patienttype);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientType", "");
                    if (!string.IsNullOrEmpty(wardofdeath))
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", wardofdeath);
                    else
                        dbCmd.Parameters.AddWithValue("@WardOfDeath", "");
                    if (!string.IsNullOrEmpty(consultant))
                        dbCmd.Parameters.AddWithValue("@Consultant", consultant);
                    else
                        dbCmd.Parameters.AddWithValue("@Consultant", "");
                    if (!string.IsNullOrEmpty(consultant))
                        dbCmd.Parameters.AddWithValue("@Speciality", speciality);
                    else
                        dbCmd.Parameters.AddWithValue("@Speciality", "");
                    if (!string.IsNullOrEmpty(mename))
                        dbCmd.Parameters.AddWithValue("@MEName", mename);
                    else
                        dbCmd.Parameters.AddWithValue("@MEName", "");

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        if (string.IsNullOrEmpty(dbReader["TotalDeaths"].ToString()))
                            patientDashboard.TotalDeaths = 0;
                        else
                            patientDashboard.TotalDeaths = Convert.ToInt32(dbReader["TotalDeaths"]);
                        if (string.IsNullOrEmpty(dbReader["AandEDeathCount"].ToString()))
                            patientDashboard.AandEDeathCount = 0;
                        else
                            patientDashboard.AandEDeathCount = Convert.ToInt32(dbReader["AandEDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["AdultDeathCount"].ToString()))
                            patientDashboard.AdultDeathCount = 0;
                        else
                            patientDashboard.AdultDeathCount = Convert.ToInt32(dbReader["AdultDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["QAPCompleted"].ToString()))
                            patientDashboard.QAPCompleted = 0;
                        else
                            patientDashboard.QAPCompleted = Convert.ToInt32(dbReader["QAPCompleted"]);
                        if (string.IsNullOrEmpty(dbReader["QAPOutstanding"].ToString()))
                            patientDashboard.QAPOutstanding = 0;
                        else
                            patientDashboard.QAPOutstanding = Convert.ToInt32(dbReader["QAPOutstanding"]);
                        if (string.IsNullOrEmpty(dbReader["CareQualityCount"].ToString()))
                            patientDashboard.CareQualityCount = 0;
                        else
                            patientDashboard.CareQualityCount = Convert.ToInt32(dbReader["CareQualityCount"]);
                        if (string.IsNullOrEmpty(dbReader["RecommendReferralCoronerCount"].ToString()))
                            patientDashboard.RecommendReferralCoronerCount = 0;
                        else
                            patientDashboard.RecommendReferralCoronerCount = Convert.ToInt32(dbReader["RecommendReferralCoronerCount"]);
                        if (string.IsNullOrEmpty(dbReader["MEReviewCompleted"].ToString()))
                            patientDashboard.MEReviewCompleted = 0;
                        else
                            patientDashboard.MEReviewCompleted = Convert.ToInt32(dbReader["MEReviewCompleted"]);
                        if (string.IsNullOrEmpty(dbReader["MEReviewOutstanding"].ToString()))
                            patientDashboard.MEReviewOutstanding = 0;
                        else
                            patientDashboard.MEReviewOutstanding = Convert.ToInt32(dbReader["MEReviewOutstanding"]);
                        if (string.IsNullOrEmpty(dbReader["ExpectedDeathCount"].ToString()))
                            patientDashboard.ExpectedDeathCount = 0;
                        else
                            patientDashboard.ExpectedDeathCount = Convert.ToInt32(dbReader["ExpectedDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["UnexpectedDeathCount"].ToString()))
                            patientDashboard.UnexpectedDeathCount = 0;
                        else
                            patientDashboard.UnexpectedDeathCount = Convert.ToInt32(dbReader["UnexpectedDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["SuddenNotUnexpectedDeathCount"].ToString()))
                            patientDashboard.SuddenNotUnexpectedDeathCount = 0;
                        else
                            patientDashboard.SuddenNotUnexpectedDeathCount = Convert.ToInt32(dbReader["SuddenNotUnexpectedDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["IndividualEndOfLifeDeathCount"].ToString()))
                            patientDashboard.IndividualEndOfLifeDeathCount = 0;
                        else
                            patientDashboard.IndividualEndOfLifeDeathCount = Convert.ToInt32(dbReader["IndividualEndOfLifeDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["MCCDIssuedCount"].ToString()))
                            patientDashboard.MCCDIssuedCount = 0;
                        else
                            patientDashboard.MCCDIssuedCount = Convert.ToInt32(dbReader["MCCDIssuedCount"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerReferralCount"].ToString()))
                            patientDashboard.CoronerReferralCount = 0;
                        else
                            patientDashboard.CoronerReferralCount = Convert.ToInt32(dbReader["CoronerReferralCount"]);
                        if (string.IsNullOrEmpty(dbReader["HospitalPortMortemCount"].ToString()))
                            patientDashboard.HospitalPortMortemCount = 0;
                        else
                            patientDashboard.HospitalPortMortemCount = Convert.ToInt32(dbReader["HospitalPortMortemCount"]);
                        if (string.IsNullOrEmpty(dbReader["SIRIScopingCount"].ToString()))
                            patientDashboard.SIRIScopingCount = 0;
                        else
                            patientDashboard.SIRIScopingCount = Convert.ToInt32(dbReader["SIRIScopingCount"]);
                        if (string.IsNullOrEmpty(dbReader["SafeGuardingCount"].ToString()))
                            patientDashboard.SafeGuardingCount = 0;
                        else
                            patientDashboard.SafeGuardingCount = Convert.ToInt32(dbReader["SafeGuardingCount"]);
                        if (string.IsNullOrEmpty(dbReader["LearningDisabilityCount"].ToString()))
                            patientDashboard.LearningDisabilityCount = 0;
                        else
                            patientDashboard.LearningDisabilityCount = Convert.ToInt32(dbReader["LearningDisabilityCount"]);
                        if (string.IsNullOrEmpty(dbReader["ChildDeathCount"].ToString()))
                            patientDashboard.ChildDeathCount = 0;
                        else
                            patientDashboard.ChildDeathCount = Convert.ToInt32(dbReader["ChildDeathCount"]);
                        if (string.IsNullOrEmpty(dbReader["WardTeamCount"].ToString()))
                            patientDashboard.WardTeamCount = 0;
                        else
                            patientDashboard.WardTeamCount = Convert.ToInt32(dbReader["WardTeamCount"]);
                        if (string.IsNullOrEmpty(dbReader["HeadComplianceCount"].ToString()))
                            patientDashboard.HeadComplianceCount = 0;
                        else
                            patientDashboard.HeadComplianceCount = Convert.ToInt32(dbReader["HeadComplianceCount"]);
                        if (string.IsNullOrEmpty(dbReader["PALSComplaintsCount"].ToString()))
                            patientDashboard.PALSComplaintsCount = 0;
                        else
                            patientDashboard.PALSComplaintsCount = Convert.ToInt32(dbReader["PALSComplaintsCount"]);
                        if (string.IsNullOrEmpty(dbReader["OtherCount"].ToString()))
                            patientDashboard.OtherCount = 0;
                        else
                            patientDashboard.OtherCount = Convert.ToInt32(dbReader["OtherCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJRRequired"].ToString()))
                            patientDashboard.SJRRequired = 0;
                        else
                            patientDashboard.SJRRequired = Convert.ToInt32(dbReader["SJRRequired"]);
                        if (string.IsNullOrEmpty(dbReader["SJRNotRequired"].ToString()))
                            patientDashboard.SJRNotRequired = 0;
                        else
                            patientDashboard.SJRNotRequired = Convert.ToInt32(dbReader["SJRNotRequired"]);
                        if (string.IsNullOrEmpty(dbReader["SJRequestedPercentage"].ToString()))
                            patientDashboard.SJRequestedPercentage = 0;
                        else
                            patientDashboard.SJRequestedPercentage = Convert.ToDecimal(dbReader["SJRequestedPercentage"]);
                        if (string.IsNullOrEmpty(dbReader["PaediatricPatientCount"].ToString()))
                            patientDashboard.PaediatricPatientCount = 0;
                        else
                            patientDashboard.PaediatricPatientCount = Convert.ToInt32(dbReader["PaediatricPatientCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJRLearningDisabilityCount"].ToString()))
                            patientDashboard.SJRLearningDisabilityCount = 0;
                        else
                            patientDashboard.SJRLearningDisabilityCount = Convert.ToInt32(dbReader["SJRLearningDisabilityCount"]);
                        if (string.IsNullOrEmpty(dbReader["MentalIllnessPatientCount"].ToString()))
                            patientDashboard.MentalIllnessPatientCount = 0;
                        else
                            patientDashboard.MentalIllnessPatientCount = Convert.ToInt32(dbReader["MentalIllnessPatientCount"]);
                        if (string.IsNullOrEmpty(dbReader["ElectiveAdmissionCount"].ToString()))
                            patientDashboard.ElectiveAdmissionCount = 0;
                        else
                            patientDashboard.ElectiveAdmissionCount = Convert.ToInt32(dbReader["ElectiveAdmissionCount"]);
                        if (string.IsNullOrEmpty(dbReader["NOKConcernsCount"].ToString()))
                            patientDashboard.NOKConcernsCount = 0;
                        else
                            patientDashboard.NOKConcernsCount = Convert.ToInt32(dbReader["NOKConcernsCount"]);
                        if (string.IsNullOrEmpty(dbReader["DeathChemoCount"].ToString()))
                            patientDashboard.DeathChemoCount = 0;
                        else
                            patientDashboard.DeathChemoCount = Convert.ToInt32(dbReader["DeathChemoCount"]);
                        if (string.IsNullOrEmpty(dbReader["OtherConcernCount"].ToString()))
                            patientDashboard.OtherConcernCount = 0;
                        else
                            patientDashboard.OtherConcernCount = Convert.ToInt32(dbReader["OtherConcernCount"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1Completed"].ToString()))
                            patientDashboard.SJR1Completed = 0;
                        else
                            patientDashboard.SJR1Completed = Convert.ToInt32(dbReader["SJR1Completed"]);
                        if (string.IsNullOrEmpty(dbReader["SJR1Outstanding"].ToString()))
                            patientDashboard.SJR1Outstanding = 0;
                        else
                            patientDashboard.SJR1Outstanding = Convert.ToInt32(dbReader["SJR1Outstanding"]);
                        if (string.IsNullOrEmpty(dbReader["ProblemWithCareCount"].ToString()))
                            patientDashboard.ProblemWithCareCount = 0;
                        else
                            patientDashboard.ProblemWithCareCount = Convert.ToInt32(dbReader["ProblemWithCareCount"]);
                        if (string.IsNullOrEmpty(dbReader["KeyLearningsCount"].ToString()))
                            patientDashboard.KeyLearningsCount = 0;
                        else
                            patientDashboard.KeyLearningsCount = Convert.ToInt32(dbReader["KeyLearningsCount"]);
                        if (string.IsNullOrEmpty(dbReader["ConsultantReviewGrade0Count"].ToString()))
                            patientDashboard.ConsultantReviewGrade0Count = 0;
                        else
                            patientDashboard.ConsultantReviewGrade0Count = Convert.ToInt32(dbReader["ConsultantReviewGrade0Count"]);
                        if (string.IsNullOrEmpty(dbReader["ConsultantReviewGrade2Count"].ToString()))
                            patientDashboard.ConsultantReviewGrade2Count = 0;
                        else
                            patientDashboard.ConsultantReviewGrade2Count = Convert.ToInt32(dbReader["ConsultantReviewGrade2Count"]);
                        if (string.IsNullOrEmpty(dbReader["ConsultantReviewGrade3Count"].ToString()))
                            patientDashboard.ConsultantReviewGrade3Count = 0;
                        else
                            patientDashboard.ConsultantReviewGrade3Count = Convert.ToInt32(dbReader["ConsultantReviewGrade3Count"]);
                        if (string.IsNullOrEmpty(dbReader["MSGReviewGrade0Count"].ToString()))
                            patientDashboard.MSGReviewGrade0Count = 0;
                        else
                            patientDashboard.MSGReviewGrade0Count = Convert.ToInt32(dbReader["MSGReviewGrade0Count"]);
                        if (string.IsNullOrEmpty(dbReader["MSGReviewGrade2Count"].ToString()))
                            patientDashboard.MSGReviewGrade2Count = 0;
                        else
                            patientDashboard.MSGReviewGrade2Count = Convert.ToInt32(dbReader["MSGReviewGrade2Count"]);
                        if (string.IsNullOrEmpty(dbReader["MSGReviewGrade3Count"].ToString()))
                            patientDashboard.MSGReviewGrade3Count = 0;
                        else
                            patientDashboard.MSGReviewGrade3Count = Convert.ToInt32(dbReader["MSGReviewGrade3Count"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2Required"].ToString()))
                            patientDashboard.SJR2Required = 0;
                        else
                            patientDashboard.SJR2Required = Convert.ToInt32(dbReader["SJR2Required"]);
                        if (string.IsNullOrEmpty(dbReader["SJR2Completed"].ToString()))
                            patientDashboard.SJR2Completed = 0;
                        else
                            patientDashboard.SJR2Completed = Convert.ToInt32(dbReader["SJR2Completed"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionNoFurtherActionCount"].ToString()))
                            patientDashboard.CoronerDecisionNoFurtherActionCount = 0;
                        else
                            patientDashboard.CoronerDecisionNoFurtherActionCount = Convert.ToInt32(dbReader["CoronerDecisionNoFurtherActionCount"]);
                        if (string.IsNullOrEmpty(dbReader["CorononerDecisionPostMortemCount"].ToString()))
                            patientDashboard.CorononerDecisionPostMortemCount = 0;
                        else
                            patientDashboard.CorononerDecisionPostMortemCount = Convert.ToInt32(dbReader["CorononerDecisionPostMortemCount"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionForensicPMCount"].ToString()))
                            patientDashboard.CoronerDecisionForensicPMCount = 0;
                        else
                            patientDashboard.CoronerDecisionForensicPMCount = Convert.ToInt32(dbReader["CoronerDecisionForensicPMCount"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionGPIssueCount"].ToString()))
                            patientDashboard.CoronerDecisionGPIssueCount = 0;
                        else
                            patientDashboard.CoronerDecisionGPIssueCount = Convert.ToInt32(dbReader["CoronerDecisionGPIssueCount"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionInquestCount"].ToString()))
                            patientDashboard.CoronerDecisionInquestCount = 0;
                        else
                            patientDashboard.CoronerDecisionInquestCount = Convert.ToInt32(dbReader["CoronerDecisionInquestCount"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecision100ACount"].ToString()))
                            patientDashboard.CoronerDecision100ACount = 0;
                        else
                            patientDashboard.CoronerDecision100ACount = Convert.ToInt32(dbReader["CoronerDecision100ACount"]);
                        if (string.IsNullOrEmpty(dbReader["AboveandBeyondCount"].ToString()))
                            patientDashboard.AboveandBeyondCount = 0;
                        else
                            patientDashboard.AboveandBeyondCount = Convert.ToInt32(dbReader["AboveandBeyondCount"]);
                    }

                    if (dbReader.NextResult())
                    {
                        while (dbReader.Read())
                        {
                            FeedbackType feedbacktype = new FeedbackType();
                            if (string.IsNullOrEmpty(dbReader["FBType"].ToString()))
                                feedbacktype.FBType = "";
                            else
                                feedbacktype.FBType = Convert.ToString(dbReader["FBType"]);
                            if (string.IsNullOrEmpty(dbReader["ID"].ToString()))
                                feedbacktype.FeedbackTypeID = 0;
                            else
                                feedbacktype.FeedbackTypeID = Convert.ToInt32(dbReader["ID"]);
                            if (string.IsNullOrEmpty(dbReader["Count"].ToString()))
                                feedbacktype.Count = 0;
                            else
                                feedbacktype.Count = Convert.ToInt32(dbReader["Count"]);
                            lstFeedbackTypes.Add(feedbacktype);
                        }
                    }
                    patientDashboard.FeedbackTypes = lstFeedbackTypes;
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMROutComeDashboard", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return patientDashboard;
        }

        /// <summary>
        /// Get distinct ward of death names for the filter drop down.
        /// </summary>
        /// <returns>List<WardOfDeaths></returns>
        public List<WardOfDeaths> GetWardOfDeaths(int userID)
        {
            List<WardOfDeaths> wardOfDeaths = new List<WardOfDeaths>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetWardOfDeaths", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        WardOfDeaths wardOfDeath = new WardOfDeaths();
                        wardOfDeath.WardOfDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        wardOfDeaths.Add(wardOfDeath);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetWardOfDeaths", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return wardOfDeaths;
        }

        /// <summary>
        /// This method brings in all patient lists or brings in a specific patient information based on the
        /// nhs number.
        /// </summary>
        /// <param name="nhsNumber">string</param>
        /// <returns>List<clsPatientDetails>Patient Details List</returns>
        public List<clsPatientDetails> GetFilteredPatientDetails(int pageIndex, int pageSize, DateTime startDate, DateTime endDate, string patientType, string dischargeSpecialityCode, string wardOfDeath, string dischargeConsultantCode, bool IsTotal, bool IsQAP, bool IsMedtriage, bool IsMEO, string Column, string SortType, string searchfield, bool showdisabled, int userID)
        {
            //LogException("In db engine method", this.ToString(), "ValidateUser", System.DateTime.Now);
            SqlDataReader dataReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetFilteredPatientDetails", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PageIndex", pageIndex);
                    dbCommand.Parameters.AddWithValue("@PageSize", pageSize);
                    if (startDate != null)
                        dbCommand.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCommand.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCommand.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCommand.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCommand.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCommand.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCommand.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCommand.Parameters.AddWithValue("@WardOfDeath", "");
                    if (dischargeSpecialityCode != null)
                        dbCommand.Parameters.AddWithValue("@DischargeSpecialityCode", dischargeSpecialityCode);
                    else
                        dbCommand.Parameters.AddWithValue("@DischargeSpecialityCode", "");
                    if (patientType != null && patientType != "")
                        dbCommand.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCommand.Parameters.AddWithValue("@PatientType", 0);
                    dbCommand.Parameters.AddWithValue("@IsTotal", IsTotal);
                    dbCommand.Parameters.AddWithValue("@IsQAP", IsQAP);
                    dbCommand.Parameters.AddWithValue("@IsMedtriage", IsMedtriage);
                    dbCommand.Parameters.AddWithValue("@IsMEO", IsMEO);
                    dbCommand.Parameters.AddWithValue("@OrderColumn", Column);
                    dbCommand.Parameters.AddWithValue("@SearchText", searchfield);
                    dbCommand.Parameters.AddWithValue("@SortType", SortType);
                    dbCommand.Parameters.AddWithValue("@ShowDisabled", showdisabled);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                        {

                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");

                        }
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["TotalRecords"].ToString()))
                            patientDashboard.TotalRecords = 0;
                        else
                            patientDashboard.TotalRecords = Convert.ToInt32(dataReader["TotalRecords"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                            patientDashboard.MEOCount = 0;
                        else
                            patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);
                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);


                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetFilteredPatientDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstPatientDetails;
        }

        public List<clsPatientDetails> GetAllPatientDetails(DateTime startDate, DateTime endDate, string dischargeConsultantCode, string wardOfDeath, string dischargeSpecialityCode, string patientType, int userID)
        {
            //LogException("In db engine method", this.ToString(), "ValidateUser", System.DateTime.Now);
            SqlDataReader dataReader = null;
            List<clsPatientDetails> lstPatientDetails = new List<clsPatientDetails>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetAllPatientDetails", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    if (startDate != null)
                        dbCommand.Parameters.AddWithValue("@StartDate", startDate);
                    else
                        dbCommand.Parameters.AddWithValue("@StartDate", "");
                    if (endDate != null)
                        dbCommand.Parameters.AddWithValue("@EndDate", endDate);
                    else
                        dbCommand.Parameters.AddWithValue("@EndDate", "");
                    if (dischargeConsultantCode != null)
                        dbCommand.Parameters.AddWithValue("@DischargeConsultantCode", dischargeConsultantCode);
                    else
                        dbCommand.Parameters.AddWithValue("@DischargeConsultantCode", "");
                    if (wardOfDeath != null)
                        dbCommand.Parameters.AddWithValue("@WardOfDeath", wardOfDeath);
                    else
                        dbCommand.Parameters.AddWithValue("@WardOfDeath", "");
                    if (dischargeSpecialityCode != null)
                        dbCommand.Parameters.AddWithValue("@DischargeSpecialityCode", dischargeSpecialityCode);
                    else
                        dbCommand.Parameters.AddWithValue("@DischargeSpecialityCode", "");
                    if (patientType != null && patientType != "")
                        dbCommand.Parameters.AddWithValue("@PatientType", patientType);
                    else
                        dbCommand.Parameters.AddWithValue("@PatientType", 0);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        clsPatientDetails patientDashboard = new clsPatientDetails();
                        if (string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            patientDashboard.ID = 0;
                        else
                            patientDashboard.ID = Convert.ToInt32(dataReader["ID"]);
                        if (string.IsNullOrEmpty(dataReader["PatientId"].ToString()))
                            patientDashboard.PatientId = "";
                        else
                            patientDashboard.PatientId = Convert.ToString(dataReader["PatientId"]);
                        if (string.IsNullOrEmpty(dataReader["SpellNumber"].ToString()))
                            patientDashboard.SpellNumber = "";
                        else
                            patientDashboard.SpellNumber = Convert.ToString(dataReader["SpellNumber"]);
                        if (string.IsNullOrEmpty(dataReader["NHSNumber"].ToString()))
                            patientDashboard.NHSNumber = "";
                        else
                            patientDashboard.NHSNumber = Convert.ToString(dataReader["NHSNumber"]);
                        if (string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            patientDashboard.PatientName = "";
                        else
                            patientDashboard.PatientName = Convert.ToString(dataReader["PatientName"]);
                        if (string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            patientDashboard.DOB = "Pending";
                        else
                        {

                            patientDashboard.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");

                        }
                        if (string.IsNullOrEmpty(dataReader["DateOfAdmission"].ToString()))
                            patientDashboard.DateofAdmission = "";
                        else
                            patientDashboard.DateofAdmission = Convert.ToDateTime(dataReader["DateOfAdmission"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["DateOfDeath"].ToString()))
                            patientDashboard.DateofDeath = "";
                        else
                            patientDashboard.DateofDeath = Convert.ToDateTime(dataReader["DateOfDeath"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["WardOfDeath"].ToString()))
                            patientDashboard.WardofDeath = "";
                        else
                            patientDashboard.WardofDeath = Convert.ToString(dataReader["WardOfDeath"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            patientDashboard.DischargeConsutantName = "";
                        else
                            patientDashboard.DischargeConsutantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["AdmissionType"].ToString()))
                            patientDashboard.AdmissionType = "";
                        else
                            patientDashboard.AdmissionType = Convert.ToString(dataReader["AdmissionType"]);
                        if (string.IsNullOrEmpty(dataReader["MedTriage"].ToString()))
                            patientDashboard.MedTriage = 2;
                        else
                            patientDashboard.MedTriage = Convert.ToInt32(dataReader["MedTriage"]);
                        if (string.IsNullOrEmpty(dataReader["SJR1"].ToString()))
                            patientDashboard.SJR1 = 0;
                        else
                            patientDashboard.SJR1 = Convert.ToInt32(dataReader["SJR1"]);
                        if (string.IsNullOrEmpty(dataReader["SJR2"].ToString()))
                            patientDashboard.SJR2 = 0;
                        else
                            patientDashboard.SJR2 = Convert.ToInt32(dataReader["SJR2"]);
                        if (string.IsNullOrEmpty(dataReader["SJROutcome"].ToString()))
                            patientDashboard.SJROutcome = 0;
                        else
                            patientDashboard.SJROutcome = Convert.ToInt32(dataReader["SJROutcome"]);
                        if (string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            patientDashboard.QAPReview = 2;
                        else
                            patientDashboard.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        if (string.IsNullOrEmpty(dataReader["CodingReview"].ToString()))
                            patientDashboard.CodingReview = 2;
                        else
                            patientDashboard.CodingReview = Convert.ToInt32(dataReader["CodingReview"]);
                        if (string.IsNullOrEmpty(dataReader["Age"].ToString()))
                            patientDashboard.Age = 0;
                        else
                            patientDashboard.Age = Convert.ToInt32(dataReader["Age"]);
                        if (string.IsNullOrEmpty(dataReader["AgeAtDeath"].ToString()))
                            patientDashboard.AgeAtDeath = 0;
                        else
                            patientDashboard.AgeAtDeath = Convert.ToInt32(dataReader["AgeAtDeath"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeActual"].ToString()))
                            patientDashboard.PatientTypeActual = 0;
                        else
                            patientDashboard.PatientTypeActual = Convert.ToInt32(dataReader["PatientTypeActual"]);
                        if (string.IsNullOrEmpty(dataReader["Gender"].ToString()))
                            patientDashboard.Gender = "";
                        else
                            patientDashboard.Gender = Convert.ToString(dataReader["Gender"]);
                        if (string.IsNullOrEmpty(dataReader["TimeofAdmission"].ToString()))
                            patientDashboard.TimeofAdmission = "";
                        else
                            patientDashboard.TimeofAdmission = Convert.ToDateTime(dataReader["TimeofAdmission"].ToString()).ToString("HH:mm");
                        if (!string.IsNullOrEmpty(dataReader["TimeOfDeath"].ToString()))
                            patientDashboard.TimeofDeath = Convert.ToDateTime(dataReader["TimeOfDeath"].ToString()).ToString("HH:mm");
                        else
                            patientDashboard.TimeofDeath = "";
                        if (string.IsNullOrEmpty(dataReader["DischargeWard"].ToString()))
                            patientDashboard.DischargeWard = "";
                        else
                            patientDashboard.DischargeWard = Convert.ToString(dataReader["DischargeWard"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantCode"].ToString()))
                            patientDashboard.DischargeConsultantCode = "0";
                        else
                            patientDashboard.DischargeConsultantCode = Convert.ToString(dataReader["DischargeConsultantCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpecialityCode"].ToString()))
                            patientDashboard.DischargeSpecialtyCode = "0";
                        else
                            patientDashboard.DischargeSpecialtyCode = Convert.ToString(dataReader["DischargeSpecialityCode"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            patientDashboard.DischargeSpeciality = "";
                        else
                            patientDashboard.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["Caregroup"].ToString()))
                            patientDashboard.Caregroup = "";
                        else
                            patientDashboard.Caregroup = Convert.ToString(dataReader["Caregroup"]);
                        if (string.IsNullOrEmpty(dataReader["ComorbiditiesCount"].ToString()))
                            patientDashboard.ComorbiditiesCount = 0;
                        else
                            patientDashboard.ComorbiditiesCount = Convert.ToInt32(dataReader["ComorbiditiesCount"]);
                        if (string.IsNullOrEmpty(dataReader["IsFullSJRRequired"].ToString()))
                            patientDashboard.IsFullSJRRequired = false;
                        else
                            patientDashboard.IsFullSJRRequired = Convert.ToBoolean(dataReader["IsFullSJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["Stage2SJRRequired"].ToString()))
                            patientDashboard.Stage2SJRRequired = false;
                        else
                            patientDashboard.Stage2SJRRequired = Convert.ToBoolean(dataReader["Stage2SJRRequired"]);
                        if (string.IsNullOrEmpty(dataReader["PatientType"].ToString()))
                            patientDashboard.PatientType = "AAPC";
                        else
                            patientDashboard.PatientType = Convert.ToString(dataReader["PatientType"]);
                        if (string.IsNullOrEmpty(dataReader["PatientTypeLongText"].ToString()))
                            patientDashboard.PatientTypeLongText = "Adult Inpatients";
                        else
                            patientDashboard.PatientTypeLongText = Convert.ToString(dataReader["PatientTypeLongText"]);
                        if (string.IsNullOrEmpty(dataReader["QAPCount"].ToString()))
                            patientDashboard.QAPCount = 0;
                        else
                            patientDashboard.QAPCount = Convert.ToInt32(dataReader["QAPCount"]);
                        if (string.IsNullOrEmpty(dataReader["MedCount"].ToString()))
                            patientDashboard.MedCount = 0;
                        else
                            patientDashboard.MedCount = Convert.ToInt32(dataReader["MedCount"]);
                        //if (string.IsNullOrEmpty(dataReader["MEOCount"].ToString()))
                        //    patientDashboard.MEOCount = 0;
                        //else
                        //    patientDashboard.MEOCount = Convert.ToInt32(dataReader["MEOCount"]);

                        if (string.IsNullOrEmpty(dataReader["MEOReview"].ToString()))
                            patientDashboard.MEOReview = 0;
                        else
                            patientDashboard.MEOReview = Convert.ToInt32(dataReader["MEOReview"]);


                        if (string.IsNullOrEmpty(dataReader["PrimaryDiagnosis"].ToString()))
                            patientDashboard.PrimaryDiagnosis = "";
                        else
                            patientDashboard.PrimaryDiagnosis = Convert.ToString(dataReader["PrimaryDiagnosis"]);
                        lstPatientDetails.Add(patientDashboard);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetAllPatientDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstPatientDetails;
        }

        /// <summary>
        /// Get diagnosis details based on nhs number
        /// </summary>
        /// <returns>List<DischargeConsultants></returns>
        public List<Diagnosis> GetDiagnosisDetails(int? id, int userID)
        {
            List<Diagnosis> diagnoses = new List<Diagnosis>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetDiagnosisByPatientID", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Diagnosis diagnosis = new Diagnosis();
                        if (string.IsNullOrEmpty(dataReader["FCENumber"].ToString()))
                            diagnosis.FCENumber = 0;
                        else
                            diagnosis.FCENumber = Convert.ToInt32(dataReader["FCENumber"]);

                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            diagnosis.DischargeConsultantName = "";
                        else
                            diagnosis.DischargeConsultantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            diagnosis.DischargeSpeciality = "";
                        else
                            diagnosis.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["EpisodeStart"].ToString()))
                            diagnosis.EpisodeStart = "";
                        else
                            diagnosis.EpisodeStart = Convert.ToDateTime(dataReader["EpisodeStart"]).ToString("dd/MM/yyyy-hh:mm tt");
                        if (string.IsNullOrEmpty(dataReader["EpisodeEnd"].ToString()))
                            diagnosis.EpisodeEnd = "";
                        else
                            diagnosis.EpisodeEnd = Convert.ToDateTime(dataReader["EpisodeEnd"]).ToString("dd/MM/yyyy-hh:mm tt");
                        if (string.IsNullOrEmpty(dataReader["LOSEpisode"].ToString()))
                            diagnosis.LOSEpisode = "";
                        else
                            diagnosis.LOSEpisode = Convert.ToString(dataReader["LOSEpisode"]) + " days";
                        if (string.IsNullOrEmpty(dataReader["ComorbidityFlag"].ToString()))
                            diagnosis.ComorbidityFlag = 0;
                        else
                            diagnosis.ComorbidityFlag = Convert.ToInt32(dataReader["ComorbidityFlag"]);
                        if (string.IsNullOrEmpty(dataReader["PrimaryInt"].ToString()))
                            diagnosis.PrimaryInt = 0;
                        else
                            diagnosis.PrimaryInt = Convert.ToInt32(dataReader["PrimaryInt"]);
                        if (string.IsNullOrEmpty(dataReader["DiagnosisDescription"].ToString()))
                            diagnosis.DiagnosisDescription = "";
                        else
                            diagnosis.DiagnosisDescription = Convert.ToString(dataReader["DiagnosisDescription"]);
                        diagnoses.Add(diagnosis);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetDiagnosisDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return diagnoses;
        }

        /// <summary>
        /// Get procedure details based on nhs number
        /// </summary>
        /// <returns>List<DischargeConsultants></returns>
        public List<Procedures> GetProcedureDetails(int? id, int userID)
        {
            List<Procedures> procedures = new List<Procedures>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetProcedureByPatientID", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Procedures procedure = new Procedures();
                        if (string.IsNullOrEmpty(dataReader["FCENumber"].ToString()))
                            procedure.FCENumber = 0;
                        else
                            procedure.FCENumber = Convert.ToInt32(dataReader["FCENumber"]);
                        if (string.IsNullOrEmpty(dataReader["Position"].ToString()))
                            procedure.Position = "";
                        else
                            procedure.Position = Convert.ToString(dataReader["Position"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeConsultantName"].ToString()))
                            procedure.DischargeConsultantName = "";
                        else
                            procedure.DischargeConsultantName = Convert.ToString(dataReader["DischargeConsultantName"]);
                        if (string.IsNullOrEmpty(dataReader["DischargeSpeciality"].ToString()))
                            procedure.DischargeSpeciality = "";
                        else
                            procedure.DischargeSpeciality = Convert.ToString(dataReader["DischargeSpeciality"]);
                        if (string.IsNullOrEmpty(dataReader["EpisodeStart"].ToString()))
                            procedure.EpisodeStart = "";
                        else
                            procedure.EpisodeStart = Convert.ToDateTime(dataReader["EpisodeStart"]).ToString("dd/MM/yyyy-hh:mm tt");
                        if (string.IsNullOrEmpty(dataReader["EpisodeEnd"].ToString()))
                            procedure.EpisodeEnd = "";
                        else
                            procedure.EpisodeEnd = Convert.ToDateTime(dataReader["EpisodeEnd"]).ToString("dd/MM/yyyy-hh:mm tt");
                        if (string.IsNullOrEmpty(dataReader["LOSEpisode"].ToString()))
                            procedure.LOSEpisode = "";
                        else
                            procedure.LOSEpisode = Convert.ToString(dataReader["LOSEpisode"]) + " days";
                        if (string.IsNullOrEmpty(dataReader["ProcedureDescription"].ToString()))
                            procedure.ProcedureDescription = "";
                        else
                            procedure.ProcedureDescription = Convert.ToString(dataReader["ProcedureDescription"]);
                        procedures.Add(procedure);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetProcedureDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return procedures;
        }

        public List<FeedbackType> GetFeedbackType(int userID)
        {
            List<FeedbackType> lstFeedbackType = new List<FeedbackType>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetFeedbackType", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        FeedbackType feedbackType = new FeedbackType();
                        feedbackType.FeedbackTypeID = Convert.ToInt32(dataReader["FeedbackTypeID"]);
                        feedbackType.FBType = Convert.ToString(dataReader["FBType"]);

                        lstFeedbackType.Add(feedbackType);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetFeedbackType", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstFeedbackType;
        }

        public List<Wards> GetWards(int userID, string term = "")
        {
            List<Wards> lstWards = new List<Wards>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetWards", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@term", term);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Wards ward = new Wards();
                        ward.WardID = Convert.ToInt32(dataReader["WardID"]);
                        ward.WardCode = Convert.ToString(dataReader["WardCode"]);
                        ward.WardName = Convert.ToString(dataReader["WardName"]);

                        lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetWards", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstWards;
        }

        public List<RolePermission> GetRolePermission(int pageNumber, int pageSize, string Column, string SortType, string searchfield, int userID, string modulename = "", string role = "")
        {
            List<RolePermission> lstWards = new List<RolePermission>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetRoleModuleMapping", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PageIndex", pageNumber);
                    dbCommand.Parameters.AddWithValue("@PageSize", pageSize);
                    dbCommand.Parameters.AddWithValue("@OrderColumn", Column);
                    dbCommand.Parameters.AddWithValue("@SortType", SortType);
                    dbCommand.Parameters.AddWithValue("@SearchText", searchfield);
                    dbCommand.Parameters.AddWithValue("@ModuleName", modulename);
                    dbCommand.Parameters.AddWithValue("@Role", role);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        RolePermission ward = new RolePermission();
                        ward.ID = Convert.ToInt32(dataReader["ID"]);
                        ward.RoleID = Convert.ToInt32(dataReader["RoleID"]);
                        ward.ModuleID = Convert.ToInt32(dataReader["ModuleID"]);
                        ward.ModuleName = Convert.ToString(dataReader["ModuleName"]);
                        ward.RoleName = Convert.ToString(dataReader["RoleName"]);
                        ward.IsFullAccess = Convert.ToBoolean(dataReader["IsFullAccess"]);
                        ward.IsReadOnly = Convert.ToBoolean(dataReader["IsReadOnly"]);
                        ward.NoAccess = Convert.ToBoolean(dataReader["NoAccess"]);
                        ward.TotalRecords = Convert.ToInt32(dataReader["TotalRecords"]);
                        lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetRolePermission", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstWards;
        }

        public List<Consultant> GetCORSConsultants(int userID, string term = "")
        {
            List<Consultant> lstWards = new List<Consultant>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetCORSConsultants", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@term", term);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        Consultant ward = new Consultant();
                        ward.ConsID = Convert.ToInt32(dataReader["ID"]);
                        ward.GMCCode = Convert.ToString(dataReader["GMCCode"]);
                        ward.Consultant_Name = Convert.ToString(dataReader["Consultant_Name"]);
                        ward.FirstName = Convert.ToString(dataReader["FirstName"]);
                        ward.LastName = Convert.ToString(dataReader["LastName"]);
                        ward.EmailID = Convert.ToString(dataReader["EmailID"]);
                        lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCORSConsultants", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstWards;
        }

        public Consultant GetCORSConsultantsByID(int id, int userID)
        {
            SqlDataReader dataReader = null;
            Consultant ward = new Consultant();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetCORSConsultantsByID", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {

                        ward.ConsID = Convert.ToInt32(dataReader["ID"]);
                        ward.GMCCode = Convert.ToString(dataReader["GMCCode"]);
                        ward.FirstName = Convert.ToString(dataReader["FirstName"]);
                        ward.LastName = Convert.ToString(dataReader["LastName"]);
                        ward.EmailID = Convert.ToString(dataReader["EmailID"]);
                        ward.Consultant_Name = Convert.ToString(dataReader["Consultant_Name"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCORSConsultants", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return ward;
        }

        public List<CommentType> GetCommentType(string category, int userID)
        {
            List<CommentType> lstCommentType = new List<CommentType>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetCommentType", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dbCommand.Parameters.AddWithValue("@Category", category);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        CommentType commentType = new CommentType();
                        commentType.CommonTypeID = Convert.ToInt32(dataReader["CommonTypeID"]);
                        commentType.Type = Convert.ToString(dataReader["Type"]);

                        lstCommentType.Add(commentType);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCommentType", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstCommentType;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public List<CommentHistory> GetComments(int? id, string category, int userID)
        {
            List<CommentHistory> comments = new List<CommentHistory>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetComments", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);
                    dbCommand.Parameters.AddWithValue("@Category", category);

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        CommentHistory comment = new CommentHistory();
                        if (!string.IsNullOrEmpty(dataReader["UserID"].ToString()))
                            comment.UserID = Convert.ToInt32(dataReader["UserID"]);
                        else
                            comment.UserID = 0;
                        if (!string.IsNullOrEmpty(dataReader["Name"].ToString()))
                            comment.Name = Convert.ToString(dataReader["Name"]);
                        else
                            comment.Name = "";
                        if (!string.IsNullOrEmpty(dataReader["Comments"].ToString()))
                            comment.Comments = Convert.ToString(dataReader["Comments"]);
                        else
                            comment.Comments = "";
                        if (!string.IsNullOrEmpty(dataReader["CommentType"].ToString()))
                            comment.CommentType = Convert.ToString(dataReader["CommentType"]);
                        else
                            comment.CommentType = "";
                        if (!string.IsNullOrEmpty(dataReader["CreatedDate"].ToString()))
                            comment.CreatedDate = Convert.ToDateTime(dataReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        else
                            comment.CreatedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["CreatedDate"].ToString()))
                            comment.CreatedTime = Convert.ToDateTime(dataReader["CreatedDate"]).TimeOfDay.ToString().Substring(0, 5);
                        else
                            comment.CreatedTime = "";
                        if (!string.IsNullOrEmpty(dataReader["CommentTypeID"].ToString()))
                            comment.CommentTypeID = Convert.ToInt32(dataReader["CommentTypeID"]);
                        else
                            comment.CommentTypeID = 0;
                        if (!string.IsNullOrEmpty(dataReader["Role"].ToString()))
                            comment.Role = Convert.ToString(dataReader["Role"]);
                        else
                            comment.Role = "";
                        comments.Add(comment);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetComments", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return comments;
        }

        public List<CORSUsers> GetUsers(int pageNumber, int pageSize, string SearchText, string OrderColumn, string SortType, int userID)
        {
            SqlDataReader dataReader = null;
            List<CORSUsers> users = new List<CORSUsers>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetUsers", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PageIndex", pageNumber);
                    dbCommand.Parameters.AddWithValue("@PageSize", pageSize);
                    dbCommand.Parameters.AddWithValue("@SearchText", SearchText);
                    dbCommand.Parameters.AddWithValue("@OrderColumn", OrderColumn);
                    dbCommand.Parameters.AddWithValue("@SortType", SortType);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        CORSUsers user = new CORSUsers();
                        user.ID = Convert.ToInt32(dataReader["ID"]);
                        user.EmailID = Convert.ToString(dataReader["Email"]);
                        user.Role = Convert.ToString(dataReader["Role"]);
                        user.Code = Convert.ToString(dataReader["Code"]);
                        user.FirstName = Convert.ToString(dataReader["FirstName"]);
                        user.LastName = Convert.ToString(dataReader["LastName"]);
                        user.UserName = Convert.ToString(dataReader["UserName"]);
                        user.Speciality = Convert.ToString(dataReader["Speciality"]);
                        user.IsApproved = Convert.ToBoolean(dataReader["IsApproved"]);
                        user.CreatedDate = Convert.ToDateTime(dataReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dataReader["LastLoginDateTime"].ToString()))
                            user.LastLoginDateTime = "";
                        else
                            user.LastLoginDateTime = Convert.ToDateTime(dataReader["LastLoginDateTime"]).ToString("dd/MM/yyyy HH:mm");
                        user.Action = "";
                        user.TotalRecords = Convert.ToInt32(dataReader["TotalRecords"]);
                        users.Add(user);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetUsers", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return users;
        }

        public clsQAPReview GetQAPReview(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            clsQAPReview qapreview = new clsQAPReview();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetQAPReview", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", id);

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        if (!string.IsNullOrEmpty(dataReader["Patient_ID"].ToString()))
                            qapreview.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        else
                            qapreview.Patient_ID = 0;
                        if (!string.IsNullOrEmpty(dataReader["Synopsis"].ToString()))
                            qapreview.Synopsis = Convert.ToString(dataReader["Synopsis"]);
                        else
                            qapreview.Synopsis = "";
                        if (!string.IsNullOrEmpty(dataReader["MCCD"].ToString()))
                            qapreview.MCCD = Convert.ToBoolean(dataReader["MCCD"]);
                        else
                            qapreview.MCCD = false;
                        if (!string.IsNullOrEmpty(dataReader["Referral"].ToString()))
                            qapreview.Referral = Convert.ToBoolean(dataReader["Referral"]);
                        else
                            qapreview.Referral = false;
                        if (!string.IsNullOrEmpty(dataReader["CreatedDate"].ToString()))
                            qapreview.CreatedDate = Convert.ToDateTime(dataReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.CreatedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["FullName"].ToString()))
                            qapreview.FullName = Convert.ToString(dataReader["FullName"]);
                        else
                            qapreview.FullName = "";
                        if (!string.IsNullOrEmpty(dataReader["GMCNo"].ToString()))
                            qapreview.GMCNo = Convert.ToString(dataReader["GMCNo"]);
                        else
                            qapreview.GMCNo = "";
                        if (!string.IsNullOrEmpty(dataReader["Location"].ToString()))
                            qapreview.Location = Convert.ToString(dataReader["Location"]);
                        else
                            qapreview.Location = "";
                        if (!string.IsNullOrEmpty(dataReader["Phone"].ToString()))
                            qapreview.Phone = Convert.ToString(dataReader["Phone"]);
                        else
                            qapreview.Phone = "";
                        if (!string.IsNullOrEmpty(dataReader["AlternatePhone"].ToString()))
                            qapreview.AlternatePhone = Convert.ToString(dataReader["AlternatePhone"]);
                        else
                            qapreview.AlternatePhone = "";
                        if (!string.IsNullOrEmpty(dataReader["CreatedBy"].ToString()))
                            qapreview.CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        else
                            qapreview.CreatedBy = "";
                        if (!string.IsNullOrEmpty(dataReader["CreatedDate"].ToString()))
                            qapreview.CreatedDate = Convert.ToDateTime(dataReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.CreatedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["UpdatedBy"].ToString()))
                            qapreview.UpdatedBy = Convert.ToString(dataReader["UpdatedBy"]);
                        else
                            qapreview.UpdatedBy = "";
                        if (!string.IsNullOrEmpty(dataReader["UpdatedDate"].ToString()))
                            qapreview.UpdatedDate = Convert.ToDateTime(dataReader["UpdatedDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.UpdatedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["Concern"].ToString()))
                            qapreview.Concern = Convert.ToBoolean(dataReader["Concern"]);
                        else
                            qapreview.Concern = false;
                        if (!string.IsNullOrEmpty(dataReader["Reason1a"].ToString()))
                            qapreview.Reason1a = Convert.ToString(dataReader["Reason1a"]);
                        else
                            qapreview.Reason1a = "";
                        if (!string.IsNullOrEmpty(dataReader["Reason1b"].ToString()))
                            qapreview.Reason1b = Convert.ToString(dataReader["Reason1b"]);
                        else
                            qapreview.Reason1b = "";
                        if (!string.IsNullOrEmpty(dataReader["Reason1c"].ToString()))
                            qapreview.Reason1c = Convert.ToString(dataReader["Reason1c"]);
                        else
                            qapreview.Reason1c = "";
                        if (!string.IsNullOrEmpty(dataReader["Reason2"].ToString()))
                            qapreview.Reason2 = Convert.ToString(dataReader["Reason2"]);
                        else
                            qapreview.Reason2 = "";
                        if (!string.IsNullOrEmpty(dataReader["Period1a"].ToString()))
                            qapreview.Period1a = Convert.ToString(dataReader["Period1a"]);
                        else
                            qapreview.Period1a = "";
                        if (!string.IsNullOrEmpty(dataReader["Value1a"].ToString()))
                            qapreview.Value1a = Convert.ToString(dataReader["Value1a"]);
                        else
                            qapreview.Value1a = "";
                        if (!string.IsNullOrEmpty(dataReader["Period1b"].ToString()))
                            qapreview.Period1b = Convert.ToString(dataReader["Period1b"]);
                        else
                            qapreview.Period1b = "";
                        if (!string.IsNullOrEmpty(dataReader["Value1b"].ToString()))
                            qapreview.Value1b = Convert.ToString(dataReader["Value1b"]);
                        else
                            qapreview.Value1b = "";
                        if (!string.IsNullOrEmpty(dataReader["Period1c"].ToString()))
                            qapreview.Period1c = Convert.ToString(dataReader["Period1c"]);
                        else
                            qapreview.Period1c = "";
                        if (!string.IsNullOrEmpty(dataReader["Value1c"].ToString()))
                            qapreview.Value1c = Convert.ToString(dataReader["Value1c"]);
                        else
                            qapreview.Value1c = "";
                        if (!string.IsNullOrEmpty(dataReader["Period2"].ToString()))
                            qapreview.Period2 = Convert.ToString(dataReader["Period2"]);
                        else
                            qapreview.Period2 = "";
                        if (!string.IsNullOrEmpty(dataReader["Value2"].ToString()))
                            qapreview.Value2 = Convert.ToString(dataReader["Value2"]);
                        else
                            qapreview.Value2 = "";
                        if (!string.IsNullOrEmpty(dataReader["Reason"].ToString()))
                            qapreview.Reason = Convert.ToString(dataReader["Reason"]);
                        else
                            qapreview.Reason = "";
                        if (!string.IsNullOrEmpty(dataReader["QAPReview"].ToString()))
                            qapreview.QAPReview = Convert.ToInt32(dataReader["QAPReview"]);
                        else
                            qapreview.QAPReview = 0;
                        if (!string.IsNullOrEmpty(dataReader["ReviewCompleted"].ToString()))
                            qapreview.ReviewCompleted = Convert.ToBoolean(dataReader["ReviewCompleted"]);
                        else
                            qapreview.ReviewCompleted = false;
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetQAPReview", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            if (qapreview.Value1a == "0") qapreview.Value1a = "";
            if (qapreview.Value1b == "0") qapreview.Value1b = "";
            if (qapreview.Value1c == "0") qapreview.Value1c = "";
            if (qapreview.Value2 == "0") qapreview.Value2 = "";
            return qapreview;
        }

        public NoKFeedback GetNoKFeedback(int? id, int userID)
        {
            SqlDataReader dataReader = null;
            NoKFeedback qapreview = new NoKFeedback();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetNoKFeedback", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        if (!string.IsNullOrEmpty(dataReader["ID"].ToString()))
                            qapreview.ID = Convert.ToInt32(dataReader["ID"]);
                        else
                            qapreview.ID = 0;
                        if (!string.IsNullOrEmpty(dataReader["Patient_ID"].ToString()))
                            qapreview.Patient_ID = Convert.ToInt32(dataReader["Patient_ID"]);
                        else
                            qapreview.Patient_ID = 0;
                        if (!string.IsNullOrEmpty(dataReader["PatientID"].ToString()))
                            qapreview.PatientID = Convert.ToString(dataReader["PatientID"]);
                        else
                            qapreview.PatientID = "";
                        if (!string.IsNullOrEmpty(dataReader["PatientName"].ToString()))
                            qapreview.PatientName = Convert.ToString(dataReader["PatientName"]);
                        else
                            qapreview.PatientName = "";
                        if (!string.IsNullOrEmpty(dataReader["DOB"].ToString()))
                            qapreview.DOB = Convert.ToDateTime(dataReader["DOB"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.DOB = "";
                        if (!string.IsNullOrEmpty(dataReader["NoKConcerns"].ToString()))
                            qapreview.NoKConcerns = Convert.ToBoolean(dataReader["NoKConcerns"]);
                        else
                            qapreview.NoKConcerns = false;
                        if (!string.IsNullOrEmpty(dataReader["NokConcernComments"].ToString()))
                            qapreview.NokConcernComments = Convert.ToString(dataReader["NokConcernComments"]);
                        else
                            qapreview.NokConcernComments = "";
                        if (!string.IsNullOrEmpty(dataReader["InitialLetterDate"].ToString()))
                            qapreview.InitialLetterDate = Convert.ToDateTime(dataReader["InitialLetterDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.InitialLetterDate = "";
                        if (!string.IsNullOrEmpty(dataReader["SJRDueDate"].ToString()))
                            qapreview.SJRDueDate = Convert.ToDateTime(dataReader["SJRDueDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.SJRDueDate = "";
                        if (!string.IsNullOrEmpty(dataReader["SJR1CompletedDate"].ToString()))
                            qapreview.SJR1CompletedDate = Convert.ToDateTime(dataReader["SJR1CompletedDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.SJR1CompletedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["HoldingLetterDate"].ToString()))
                            qapreview.HoldingLetterDate = Convert.ToDateTime(dataReader["HoldingLetterDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.HoldingLetterDate = "";
                        if (!string.IsNullOrEmpty(dataReader["HoldingLetterComments"].ToString()))
                            qapreview.HoldingLetterComments = Convert.ToString(dataReader["HoldingLetterComments"]);
                        else
                            qapreview.HoldingLetterComments = "";
                        if (!string.IsNullOrEmpty(dataReader["SuboptimalCareIdentified"].ToString()))
                            qapreview.SuboptimalCareIdentified = Convert.ToBoolean(dataReader["SuboptimalCareIdentified"]);
                        else
                            qapreview.SuboptimalCareIdentified = false;
                        if (!string.IsNullOrEmpty(dataReader["NokCompleted"].ToString()))
                            qapreview.NokCompleted = Convert.ToBoolean(dataReader["NokCompleted"]);
                        else
                            qapreview.NokCompleted = false;
                        if (!string.IsNullOrEmpty(dataReader["FollowUpCallDate"].ToString()))
                            qapreview.FollowUpCallDate = Convert.ToDateTime(dataReader["FollowUpCallDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.FollowUpCallDate = "";
                        if (!string.IsNullOrEmpty(dataReader["FollowUpLetterSent"].ToString()))
                            qapreview.FollowUpLetterSent = Convert.ToDateTime(dataReader["FollowUpLetterSent"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.FollowUpLetterSent = "";
                        if (!string.IsNullOrEmpty(dataReader["FollowLetterComments"].ToString()))
                            qapreview.FollowLetterComments = Convert.ToString(dataReader["FollowLetterComments"]);
                        else
                            qapreview.FollowLetterComments = "";
                        if (!string.IsNullOrEmpty(dataReader["CreatedDate"].ToString()))
                            qapreview.CreatedDate = Convert.ToDateTime(dataReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.CreatedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["UpdatedDate"].ToString()))
                            qapreview.UpdatedDate = Convert.ToDateTime(dataReader["UpdatedDate"]).ToString("dd/MM/yyyy");
                        else
                            qapreview.UpdatedDate = "";
                        if (!string.IsNullOrEmpty(dataReader["CreatedBy"].ToString()))
                            qapreview.CreatedBy = Convert.ToString(dataReader["CreatedBy"]);
                        else
                            qapreview.CreatedBy = "";
                        if (!string.IsNullOrEmpty(dataReader["UpdatedBy"].ToString()))
                            qapreview.UpdatedBy = Convert.ToString(dataReader["UpdatedBy"]);
                        else
                            qapreview.UpdatedBy = "";
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetNoKFeedback", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return qapreview;
        }


        //changes

        /// <summary>
        /// Update patient details first tab details.
        /// </summary>
        /// <param name="isCodingIssueIdentified">bool</param>
        /// <param name="comments">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdatePatientDetailsV2(bool isDataQualityIssuesIdentified, string dataqualitycomments, bool isCodingIssueIdentified, string comments, string occupation, bool isUrgentMEReview,
            string UrgentMEReviewComments, string RelativeName, string RelativeTelNo, string Relationship, string GPSurgery, string fname, string lname, string gender, string DOD, string patientType, string DOB, int? id, int UserId)
        {
            int retVal = 0;
            List<string> ids = new List<string>();
            string PatientID = "";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdatePatientDetails", connection);
                SqlDataReader dataReader = null; int PK = 0;
                connection.Open();
                try
                {
                    if (occupation == null) occupation = "";
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@IsDataQualityIssuesIdentified", isDataQualityIssuesIdentified);
                    dbCommand.Parameters.AddWithValue("@IsCodingIssueIdentified", isCodingIssueIdentified);
                    dbCommand.Parameters.AddWithValue("@DataQualityComments", dataqualitycomments);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@Occupation", occupation);
                    dbCommand.Parameters.AddWithValue("@UrgentMEReview", isUrgentMEReview);
                    dbCommand.Parameters.AddWithValue("@UrgentMEReviewComment", UrgentMEReviewComments);
                    dbCommand.Parameters.AddWithValue("@RelativeName", RelativeName);
                    dbCommand.Parameters.AddWithValue("@RelativeTelNo", RelativeTelNo);
                    dbCommand.Parameters.AddWithValue("@Relationship", Relationship);
                    dbCommand.Parameters.AddWithValue("@GPSurgery", GPSurgery);
                    //changes
                    dbCommand.Parameters.AddWithValue("@fname", fname);
                    dbCommand.Parameters.AddWithValue("@lname", lname);
                    dbCommand.Parameters.AddWithValue("@gender", gender);
                    dbCommand.Parameters.AddWithValue("@DOD", Convert.ToDateTime(DOD).Date);
                    dbCommand.Parameters.AddWithValue("@patientType", patientType);
                    dbCommand.Parameters.AddWithValue("@DOB", Convert.ToDateTime(DOB).Date);

                    dbCommand.Parameters.AddWithValue("@UserId", UserId);
                    //changes
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    //dbCommand.Parameters.AddWithValue("@patientID", patientID);

                    //retVal = dbCommand.ExecuteNonQuery();
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        retVal = Convert.ToInt32(dataReader["ID"]);
                        //PK=(Convert.ToInt32(dataReader["PKID"]));
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdatePatientDetailsV2", System.DateTime.Now, UserId);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return retVal;
        }
        //changse

        /// <summary>
        /// Update patient details first tab details.
        /// </summary>
        /// <param name="isCodingIssueIdentified">bool</param>
        /// <param name="comments">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdatePatientDetails(bool isDataQualityIssuesIdentified, string dataqualitycomments, bool isCodingIssueIdentified, string comments, string occupation, bool isUrgentMEReview,
            string UrgentMEReviewComments, string RelativeName, string RelativeTelNo, string Relationship, string GPSurgery, int? id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdatePatientDetails", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@IsDataQualityIssuesIdentified", isDataQualityIssuesIdentified);
                    dbCommand.Parameters.AddWithValue("@IsCodingIssueIdentified", isCodingIssueIdentified);
                    dbCommand.Parameters.AddWithValue("@DataQualityComments", dataqualitycomments);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@Occupation", occupation);
                    dbCommand.Parameters.AddWithValue("@UrgentMEReview", isUrgentMEReview);
                    dbCommand.Parameters.AddWithValue("@UrgentMEReviewComment", UrgentMEReviewComments);
                    dbCommand.Parameters.AddWithValue("@RelativeName", RelativeName);
                    dbCommand.Parameters.AddWithValue("@RelativeTelNo", RelativeTelNo);
                    dbCommand.Parameters.AddWithValue("@Relationship", Relationship);
                    dbCommand.Parameters.AddWithValue("@GPSurgery", GPSurgery);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdatePatientDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Insert/Update medical examiner review details for a particular patient ID.
        /// </summary>
        /// <param name="isQAP_Discussion"></param>
        /// <param name="isNotes_Review"></param>
        /// <param name="isNok_Discussion"></param>
        /// <param name="med_id"></param>
        /// <param name="qapname"></param>
        /// <param name="comments"></param>
        /// <param name="id"></param>
        /// <returns></returns>
        public int UpdateMedicalExaminerReview(bool isQAP_Discussion, bool isNotes_Review, bool isNok_Discussion, int med_id, string comments, int? id, int userID, int commentTypeID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateMedicalExaminerReview", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@QAPDiscussion", isQAP_Discussion);
                    dbCommand.Parameters.AddWithValue("@NotesReview", isNotes_Review);
                    dbCommand.Parameters.AddWithValue("@NoKDiscussion", isNok_Discussion);
                    dbCommand.Parameters.AddWithValue("@MedID", med_id);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@CommentTypeID", commentTypeID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateMedicalExaminerReview", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int MRESaveComments(string comments, int? id, int userID, int commentTypeID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_MERSaveComments", connection);
                SqlDataReader dataReader = null;
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@CommentTypeID", commentTypeID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@ID", id);

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {

                        retVal = Convert.ToInt32(dataReader["CID"]);
                    }

                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "MRESaveComments", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Update SJR 1 step 1 details to database based on patientID
        /// </summary>
        /// <param name="initialManagement">string</param>
        /// <param name="initialManagementRating">int</param>
        /// <param name="ongoingCare">string</param>
        /// <param name="ongoingCareRating">int</param>
        /// <param name="careduringProcedure">string</param>
        /// <param name="careduringProcedureRating">int</param>
        /// <param name="endlifeCare">string</param>
        /// <param name="endlifecareRating">int</param>
        /// <param name="overallAssessment">string</param>
        /// <param name="overallAssessmentRating">int</param>
        /// <param name="qualitOfDocumentation">int</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateSJRFormInitial(string initialManagement, string initialManagementRating, string ongoingCare, string ongoingCareRating,
            string careduringProcedure, string careduringProcedureRating, string endlifeCare, string endlifecareRating, string overallAssessment,
            string overallAssessmentRating, string qualitOfDocumentation, int? id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSJRFormInitial", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@InitialManagement", initialManagement);
                    dbCommand.Parameters.AddWithValue("@InitialManagementRating", initialManagementRating);
                    dbCommand.Parameters.AddWithValue("@OngoingCare", ongoingCare);
                    dbCommand.Parameters.AddWithValue("@OngoingCareRating", ongoingCareRating);
                    dbCommand.Parameters.AddWithValue("@CareduringProcedure", careduringProcedure);
                    dbCommand.Parameters.AddWithValue("@CareduringProcedureRating", careduringProcedureRating);
                    dbCommand.Parameters.AddWithValue("@EndlifeCare", endlifeCare);
                    dbCommand.Parameters.AddWithValue("@EndlifecareRating", endlifecareRating);
                    dbCommand.Parameters.AddWithValue("@OverallAssessment", overallAssessment);
                    dbCommand.Parameters.AddWithValue("@OverallAssessmentRating", overallAssessmentRating);
                    dbCommand.Parameters.AddWithValue("@QualitOfDocumentation", qualitOfDocumentation);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSJRFormInitial", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateSJR2FormInitial(string initialManagement, string initialManagementRating, string ongoingCare, string ongoingCareRating,
            string careduringProcedure, string careduringProcedureRating, string endlifeCare, string endlifecareRating, string overallAssessment,
            string overallAssessmentRating, string qualitOfDocumentation, int? id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSJR2FormInitial", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@InitialManagement", initialManagement);
                    dbCommand.Parameters.AddWithValue("@InitialManagementRating", initialManagementRating);
                    dbCommand.Parameters.AddWithValue("@OngoingCare", ongoingCare);
                    dbCommand.Parameters.AddWithValue("@OngoingCareRating", ongoingCareRating);
                    dbCommand.Parameters.AddWithValue("@CareduringProcedure", careduringProcedure);
                    dbCommand.Parameters.AddWithValue("@CareduringProcedureRating", careduringProcedureRating);
                    dbCommand.Parameters.AddWithValue("@EndlifeCare", endlifeCare);
                    dbCommand.Parameters.AddWithValue("@EndlifecareRating", endlifecareRating);
                    dbCommand.Parameters.AddWithValue("@OverallAssessment", overallAssessment);
                    dbCommand.Parameters.AddWithValue("@OverallAssessmentRating", overallAssessmentRating);
                    dbCommand.Parameters.AddWithValue("@QualitOfDocumentation", qualitOfDocumentation);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSJR2FormInitial", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int AddNewPatient(string PatientName, string PatientId, string SpellNumber, string NHSNumber, DateTime DOB, DateTime TimeofDeath, DateTime
            DateofDeath, int PatientType, string gender, DateTime DateOfAdmission, DateTime TimeofAdmission, string DischargeWard, string WardofDeath,
            string DischargeConsutantName, string DischargeSpeciality, string AdmissionType, string Occupation, int userID)
        {
            int retVal = 0;
            int id = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddPatient", connection);
                connection.Open();
                //SqlParameter outPutVal = new SqlParameter("@ID", SqlDbType.Int);
                //outPutVal.Value = 0;
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientName", PatientName);
                    dbCommand.Parameters.AddWithValue("@PatientID", PatientId);
                    dbCommand.Parameters.AddWithValue("@SpellNumber", SpellNumber);
                    dbCommand.Parameters.AddWithValue("@NHSNumber", NHSNumber);
                    dbCommand.Parameters.AddWithValue("@DOB", DOB);
                    dbCommand.Parameters.AddWithValue("@TimeofDeath", TimeofDeath);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", DateofDeath);
                    dbCommand.Parameters.AddWithValue("@PatientTypeActual", PatientType);
                    dbCommand.Parameters.AddWithValue("@Gender", gender);
                    dbCommand.Parameters.AddWithValue("@DateOfAdmission", DateOfAdmission);
                    dbCommand.Parameters.AddWithValue("@TimeofAdmission", TimeofAdmission);
                    dbCommand.Parameters.AddWithValue("@DischargeWard", DischargeWard);
                    dbCommand.Parameters.AddWithValue("@WardofDeath", WardofDeath);
                    dbCommand.Parameters.AddWithValue("@DischargeConsutantName", DischargeConsutantName);
                    dbCommand.Parameters.AddWithValue("@DischargeSpeciality", DischargeSpeciality);
                    dbCommand.Parameters.AddWithValue("@AdmissionType", AdmissionType);
                    dbCommand.Parameters.AddWithValue("@Occupation", Occupation);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;
                    retVal = dbCommand.ExecuteNonQuery();
                    id = Convert.ToInt32(dbCommand.Parameters["@id"].Value.ToString());
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "AddNewPatient", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return id;
        }

        public int CreateUser(string emailID, string firstname, string lastname, string username, string speciality, int roleID, string code, int userID)
        {
            int retVal = 0;
            int id = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_CreateUser", connection);
                connection.Open();
                //SqlParameter outPutVal = new SqlParameter("@ID", SqlDbType.Int);
                //outPutVal.Value = 0;
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@EmailID", emailID);
                    dbCommand.Parameters.AddWithValue("@FirstName", firstname);
                    dbCommand.Parameters.AddWithValue("@LastName", lastname);
                    dbCommand.Parameters.AddWithValue("@UserName", username);
                    if (speciality == null) speciality = "";
                    dbCommand.Parameters.AddWithValue("@Speciality", speciality);
                    dbCommand.Parameters.AddWithValue("@RoleID", roleID);
                    dbCommand.Parameters.AddWithValue("@Code", code);
                    dbCommand.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;
                    retVal = dbCommand.ExecuteNonQuery();
                    id = Convert.ToInt32(dbCommand.Parameters["@id"].Value.ToString());
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateUser", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return id;
        }

        public List<NotificationSettings> GetNotificationSettings(int userID)
        {
            List<NotificationSettings> lstWards = new List<NotificationSettings>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetNotificationSettings", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        NotificationSettings ward = new NotificationSettings();
                        ward.ID = Convert.ToInt32(dataReader["ID"]);
                        ward.NotificationID = Convert.ToInt32(dataReader["NotificationID"]);
                        ward.RoleID = Convert.ToInt32(dataReader["RoleID"]);
                        ward.NotificationTrigger = Convert.ToString(dataReader["NotificationTrigger"]);
                        ward.RoleName = Convert.ToString(dataReader["RoleName"]);
                        ward.EmailTemplate = Convert.ToString(dataReader["EmailTemplate"]);
                        lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateUser", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstWards;
        }

        public NotificationSettings GetNotificationSettingsByID(int id, int userID)
        {
            //List<NotificationSettings> lstWards = new List<NotificationSettings>();
            NotificationSettings ward = new NotificationSettings();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetNotificationSettingsByID", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {

                        ward.ID = Convert.ToInt32(dataReader["ID"]);
                        ward.NotificationID = Convert.ToInt32(dataReader["NotificationID"]);
                        ward.RoleID = Convert.ToInt32(dataReader["RoleID"]);
                        ward.NotificationTrigger = Convert.ToString(dataReader["NotificationTrigger"]);
                        ward.EmailTemplate = Convert.ToString(dataReader["EmailTemplate"]);
                        ward.RoleName = Convert.ToString(dataReader["RoleName"]);
                        //lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetNotificationSettingsByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return ward;
        }

        public List<NotificationSettings> GetNotificationSettingsByTrigger(string trigger, int userID)
        {
            List<NotificationSettings> lstWards = new List<NotificationSettings>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetNotificationSettingsByTrigger", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Trigger", trigger);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        NotificationSettings ward = new NotificationSettings();
                        if (!string.IsNullOrEmpty(Convert.ToString(dataReader["RoleID"])))
                            ward.RoleID = Convert.ToInt32(dataReader["RoleID"]);
                        else
                            ward.RoleID = 0;
                        ward.EmailTemplate = Convert.ToString(dataReader["EmailTemplate"]);
                        lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetNotificationSettingsByTrigger", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return lstWards;
        }

        public PatientNotification GetNotificationSentStatusByPatientID(int id, string notificationtrigger, int userID)
        {
            //List<NotificationSettings> lstWards = new List<NotificationSettings>();
            PatientNotification ward = new PatientNotification();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetNotificationSentStatus", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@NotificationTrigger", notificationtrigger);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {

                        ward.PatientID = Convert.ToInt32(dataReader["PatientID"]);
                        ward.NotificationTrigger = Convert.ToString(dataReader["NotificationTrigger"]);
                        //lstWards.Add(ward);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetNotificationSentStatusByPatientID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return ward;
        }

        public int CreateUserByAdmin(string emailID, string firstname, string lastname, string username, string speciality, int roleID, string code, int userID)
        {
            int retVal = 0;
            int id = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_CreateUserByAdmin", connection);
                connection.Open();
                //SqlParameter outPutVal = new SqlParameter("@ID", SqlDbType.Int);
                //outPutVal.Value = 0;
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@EmailID", emailID);
                    dbCommand.Parameters.AddWithValue("@FirstName", firstname);
                    dbCommand.Parameters.AddWithValue("@LastName", lastname);
                    dbCommand.Parameters.AddWithValue("@UserName", username);
                    dbCommand.Parameters.AddWithValue("@Speciality", speciality);
                    dbCommand.Parameters.AddWithValue("@RoleID", roleID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@Code", code);
                    dbCommand.Parameters.Add("@id", SqlDbType.Int).Direction = ParameterDirection.Output;
                    retVal = dbCommand.ExecuteNonQuery();
                    id = Convert.ToInt32(dbCommand.Parameters["@id"].Value.ToString());
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateUserByAdmin", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return id;
        }

        public int UpdatePatientNotification(int id, string notificationtrigger, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdatePatientNotification", connection);
                connection.Open();
                //SqlParameter outPutVal = new SqlParameter("@ID", SqlDbType.Int);
                //outPutVal.Value = 0;
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@Notificationtrigger", notificationtrigger);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdatePatientNotification", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return id;
        }

        /// <summary>
        /// Update SJR Outcome details for a particular patient ID
        /// </summary>
        /// <param name="SJR2Required">bool</param>
        /// <param name="Stage2SJRDateSent">DateTime</param>
        /// <param name="Stage2SJRSentTo">string</param>
        /// <param name="ReferenceNumber">string</param>
        /// <param name="DateReceived">DateTime</param>
        /// <param name="SIRIComments">string</param>
        /// <param name="MSGRequired">bool</param>
        /// <param name="MSGDiscussionDate">DateTime</param>
        /// <param name="AvoidabilityScoreID">int</param>
        /// <param name="Comments">string</param>
        /// <param name="FeedbackToNoK">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateSJROutcome(bool SJR2Required, string Stage2SJRDateSent, string Stage2SJRSentTo, string ReferenceNumber,
            string DateReceived, string SIRIComments, bool MSGRequired, string MSGDiscussionDate, int AvoidabilityScoreID,
            string Comments, string FeedbackToNoK, int specialityID, bool reviewcompleted, string DateSJR1Requested, string SJR1RequestSentTo,
            bool RandomSampleReview, int? id, int userID, bool IsFinished)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSJROutcome", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@SJR2Required", SJR2Required);
                    if (!string.IsNullOrEmpty(Stage2SJRDateSent))
                        dbCommand.Parameters.AddWithValue("@Stage2SJRDateSent", Convert.ToDateTime(Stage2SJRDateSent));
                    else
                        dbCommand.Parameters.AddWithValue("@Stage2SJRDateSent", DBNull.Value);
                    dbCommand.Parameters.AddWithValue("@Stage2SJRSentTo", Stage2SJRSentTo);
                    dbCommand.Parameters.AddWithValue("@ReferenceNumber", ReferenceNumber);
                    if (!string.IsNullOrEmpty(DateReceived))
                        dbCommand.Parameters.AddWithValue("@DateReceived", Convert.ToDateTime(DateReceived));
                    else
                        dbCommand.Parameters.AddWithValue("@DateReceived", DBNull.Value);
                    dbCommand.Parameters.AddWithValue("@SIRIComments", SIRIComments);
                    dbCommand.Parameters.AddWithValue("@MSGRequired", MSGRequired);
                    if (!string.IsNullOrEmpty(MSGDiscussionDate))
                        dbCommand.Parameters.AddWithValue("@MSGDiscussionDate", Convert.ToDateTime(MSGDiscussionDate));
                    else
                        dbCommand.Parameters.AddWithValue("@MSGDiscussionDate", DBNull.Value);
                    dbCommand.Parameters.AddWithValue("@AvoidabilityScoreID", AvoidabilityScoreID);
                    dbCommand.Parameters.AddWithValue("@Comments", Comments);
                    dbCommand.Parameters.AddWithValue("@SpecialityID", specialityID);
                    dbCommand.Parameters.AddWithValue("@ReviewCompleted", reviewcompleted);
                    if (!string.IsNullOrEmpty(DateSJR1Requested))
                        dbCommand.Parameters.AddWithValue("@DateSJR1Requested", Convert.ToDateTime(DateSJR1Requested));
                    else
                        dbCommand.Parameters.AddWithValue("@DateSJR1Requested", DBNull.Value);
                    dbCommand.Parameters.AddWithValue("@SJR1RequestSentTo", SJR1RequestSentTo);
                    dbCommand.Parameters.AddWithValue("@RandomSampleReview", RandomSampleReview);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@IsFinished", IsFinished);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSJROutcome", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateNoKFeedback(bool NoKConcerns, string NokConcernComments, string InitialLetterDate, string HoldingLetterDate, string HoldingLetterComments, bool SuboptimalCareIdentified, string FollowUpCallDate, string FollowUpLetterSent, string FollowLetterComments, bool NokCompleted, int? id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateNoKFeedback", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@NokConcernComments", NokConcernComments);
                    if (InitialLetterDate == "")
                        dbCommand.Parameters.AddWithValue("@InitialLetterDate", DBNull.Value);
                    else
                        dbCommand.Parameters.AddWithValue("@InitialLetterDate", Convert.ToDateTime(InitialLetterDate));
                    if (HoldingLetterDate == "")
                        dbCommand.Parameters.AddWithValue("@HoldingLetterDate", DBNull.Value);
                    else
                        dbCommand.Parameters.AddWithValue("@HoldingLetterDate", Convert.ToDateTime(HoldingLetterDate));
                    dbCommand.Parameters.AddWithValue("@HoldingLetterComments", HoldingLetterComments);
                    dbCommand.Parameters.AddWithValue("@SuboptimalCareIdentified", SuboptimalCareIdentified);
                    if (FollowUpCallDate == "")
                        dbCommand.Parameters.AddWithValue("@FollowUpCallDate", DBNull.Value);
                    else
                        dbCommand.Parameters.AddWithValue("@FollowUpCallDate", Convert.ToDateTime(FollowUpCallDate));
                    if (FollowUpLetterSent == "")
                        dbCommand.Parameters.AddWithValue("@FollowUpLetterSent", DBNull.Value);
                    else
                        dbCommand.Parameters.AddWithValue("@FollowUpLetterSent", Convert.ToDateTime(FollowUpLetterSent));
                    dbCommand.Parameters.AddWithValue("@FollowLetterComments", FollowLetterComments);
                    dbCommand.Parameters.AddWithValue("@NOKCompleted", NokCompleted);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateNoKFeedback", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Update coding review.
        /// </summary>
        /// <param name="codingIssue">bool</param>
        /// <param name="Comments">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateCodingReview(bool codingIssue, string Comments, int? id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCodingReview", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@CodingIssue", codingIssue);
                    dbCommand.Parameters.AddWithValue("@Comments", Comments);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCodingReview", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateCodingIssue(string patientid, string patientname, DateTime dateofdeath, DateTime issuedate, string issuedby, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCodingIssue", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@IssueDate", issuedate);
                    dbCommand.Parameters.AddWithValue("@IssuedBy", issuedby);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCodingIssue", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateFullSJRDetails(string patientid, string patientname, DateTime dateofdeath, DateTime issuedate, string issuedby, string speciality, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateFullSJR", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@RequestedDate", issuedate);
                    dbCommand.Parameters.AddWithValue("@RequestedBy", issuedby);
                    dbCommand.Parameters.AddWithValue("@Speciality", speciality);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateFullSJRDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateFullSJR2Details(string patientid, string patientname, DateTime dateofdeath, DateTime issuedate, string issuedby, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateFullSJR2", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@RequestedDate", issuedate);
                    dbCommand.Parameters.AddWithValue("@RequestedBy", issuedby);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateFullSJR2Details", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateDQIssueDetails(string patientid, string patientname, DateTime dateofdeath, DateTime issuedate, string issuedby, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateDQIssue", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@IssueDate", issuedate);
                    dbCommand.Parameters.AddWithValue("@IssuedBy", issuedby);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateDQIssueDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateUrgentMEDetails(string patientid, string patientname, DateTime dateofdeath, DateTime issuedate, string issuedby, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateUrgentME", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@IssueDate", issuedate);
                    dbCommand.Parameters.AddWithValue("@IssuedBy", issuedby);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateUrgentMEDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateOtherReferralDetails(string patientid, string patientname, DateTime dateofdeath, string referraltype, DateTime referraldate, string referredby, string referredreason, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateOtherReferralDetails", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@DateOfDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@ReferralType", referraltype);
                    dbCommand.Parameters.AddWithValue("@ReferralDate", referraldate);
                    dbCommand.Parameters.AddWithValue("@ReferredBy", referredby);
                    dbCommand.Parameters.AddWithValue("@ReferredReason", referredreason);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateOtherReferralDetails", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;

        }

        public int UpdateQualityReview(string sourceReview, string ReviewDate, string ReviewerName, string Spell, string Summary, string isCodingIssue, string isTimingIssue, string isDataSysIssue, string isClinicalReview, string isProcessReview, string Recom, bool isReviewCompleted, int SpecialityID, int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateQualityReview", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@sourceReview", sourceReview);
                    //dbCommand.Parameters.AddWithValue("@ReviewDate", Convert.ToDateTime(ReviewDate));
                    //dbCommand.Parameters.AddWithValue("@ReviewerName", ReviewerName);
                    dbCommand.Parameters.AddWithValue("@Spell", Spell);
                    dbCommand.Parameters.AddWithValue("@Summary", Summary);
                    dbCommand.Parameters.AddWithValue("@isCodingIssue", isCodingIssue);
                    dbCommand.Parameters.AddWithValue("@isTimingIssue", isTimingIssue);
                    dbCommand.Parameters.AddWithValue("@isDataSysIssue", isDataSysIssue);

                    dbCommand.Parameters.AddWithValue("@isClinicalReview", isClinicalReview);
                    dbCommand.Parameters.AddWithValue("@isProcessReview", isProcessReview);
                    dbCommand.Parameters.AddWithValue("@Recom", Recom);
                    dbCommand.Parameters.AddWithValue("@isReviewCompleted", isReviewCompleted);
                    dbCommand.Parameters.AddWithValue("@SpecialityID", SpecialityID);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateQualityReview", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Update QAP review.
        /// </summary>
        /// <param name="mccd">bool</param>
        /// <param name="referral">bool</param>
        /// <param name="synopsis">string</param>
        /// <param name="reason">string</param>
        /// <param name="fullname">string</param>
        /// <param name="gmcno">string</param>
        /// <param name="location">string</param>
        /// <param name="phone">string</param>
        /// <param name="altphone">string</param>
        /// <param name="createdby">string</param>
        /// <param name="createddate">string</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateQAPReview(bool mccd, bool referral, string synopsis, string reason, string fullname, string gmcno, string location, string phone, string altphone, bool concern, string reason1a, string period1a, decimal value1a, string reason1b, string period1b, decimal value1b, string reason1c, string period1c, decimal value1c, string reason2, string period2, decimal value2,    bool reviewcompleted, int? id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateQAPReview", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@MCCD", mccd);
                    dbCommand.Parameters.AddWithValue("@Referral", referral);
                    dbCommand.Parameters.AddWithValue("@Synopsis", synopsis);
                    dbCommand.Parameters.AddWithValue("@Reason", reason);
                    dbCommand.Parameters.AddWithValue("@FullName", fullname);
                    dbCommand.Parameters.AddWithValue("@GMCNo", gmcno);
                    dbCommand.Parameters.AddWithValue("@Location", location);
                    dbCommand.Parameters.AddWithValue("@Phone", phone);
                    dbCommand.Parameters.AddWithValue("@AltPhone", altphone);
                    dbCommand.Parameters.AddWithValue("@Concern", concern);
                    dbCommand.Parameters.AddWithValue("@Reason1a", reason1a);
                    dbCommand.Parameters.AddWithValue("@Reason1b", reason1b);
                    dbCommand.Parameters.AddWithValue("@Reason1c", reason1c);
                    dbCommand.Parameters.AddWithValue("@Reason2", reason2);
                    if (period1a != "")
                        dbCommand.Parameters.AddWithValue("@Period1a", period1a);
                    else
                        dbCommand.Parameters.AddWithValue("@Period1a", DBNull.Value);
                    if (value1a != 0)
                        dbCommand.Parameters.AddWithValue("@Value1a", value1a);
                    else
                        dbCommand.Parameters.AddWithValue("@Value1a", DBNull.Value);
                    if (period1b != "")
                        dbCommand.Parameters.AddWithValue("@Period1b", period1b);
                    else
                        dbCommand.Parameters.AddWithValue("@Period1b", DBNull.Value);
                    if (value1b != 0)
                        dbCommand.Parameters.AddWithValue("@Value1b", value1b);
                    else
                        dbCommand.Parameters.AddWithValue("@Value1b", DBNull.Value);
                    if (period1c != "")
                        dbCommand.Parameters.AddWithValue("@Period1c", period1c);
                    else
                        dbCommand.Parameters.AddWithValue("@Period1c", DBNull.Value);
                    if (value1c != 0)
                        dbCommand.Parameters.AddWithValue("@Value1c", value1c);
                    else
                        dbCommand.Parameters.AddWithValue("@Value1c", DBNull.Value);
                    if (period2 != "")
                        dbCommand.Parameters.AddWithValue("@Period2", period2);
                    else
                        dbCommand.Parameters.AddWithValue("@Period2", DBNull.Value);
                    if (value2 != 0)
                        dbCommand.Parameters.AddWithValue("@Value2", value2);
                    else
                        dbCommand.Parameters.AddWithValue("@Value2", DBNull.Value);
                    dbCommand.Parameters.AddWithValue("@ReviewCompleted", reviewcompleted);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateQAPReview", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateSJR1ProblemType(int AssessmentResponseID, int AssessmentCarePhaseID, int MedicationResponseID, int MedicationCarePhaseID,
            int TreatmentResponseID, int TreatmentCarePhaseID, int InfectionResponseID, int InfectionCarePhaseID, int ProcedureResponseID,
            int ProcedureCarePhaseID, int MonitoringResponseID, int ResuscitationResponseID, int OthertypeResponseID, int OthertypeCarePhaseID, int AvoidabilityScoreID,
            string Comments, string SIRIComments, bool ProblemOccured, bool ReviewCompleted, int SpecialityID, int? id, int userID, bool IsFinish)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSJR1ProblemType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@AssessmentResponseID", AssessmentResponseID);
                    dbCommand.Parameters.AddWithValue("@AssessmentCarePhaseID", AssessmentCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@MedicationResponseID", MedicationResponseID);
                    dbCommand.Parameters.AddWithValue("@MedicationCarePhaseID", MedicationCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@TreatmentResponseID", TreatmentResponseID);
                    dbCommand.Parameters.AddWithValue("@TreatmentCarePhaseID", TreatmentCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@InfectionResponseID", InfectionResponseID);
                    dbCommand.Parameters.AddWithValue("@InfectionCarePhaseID", InfectionCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@ProcedureResponseID", ProcedureResponseID);
                    dbCommand.Parameters.AddWithValue("@ProcedureCarePhaseID", ProcedureCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@MonitoringResponseID", MonitoringResponseID);
                    dbCommand.Parameters.AddWithValue("@ResuscitationResponseID", ResuscitationResponseID);
                    dbCommand.Parameters.AddWithValue("@OthertypeResponseID", OthertypeResponseID);
                    dbCommand.Parameters.AddWithValue("@OthertypeCarePhaseID", OthertypeCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@AvoidabilityScoreID", AvoidabilityScoreID);
                    dbCommand.Parameters.AddWithValue("@Comments", Comments);
                    dbCommand.Parameters.AddWithValue("@ProblemOccured", ProblemOccured);
                    dbCommand.Parameters.AddWithValue("@ReviewCompleted", ReviewCompleted);
                    dbCommand.Parameters.AddWithValue("@SpecialityID", SpecialityID);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@IsFinished", IsFinish);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSJR1ProblemType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateSJR2ProblemType(int AssessmentResponseID, int AssessmentCarePhaseID, int MedicationResponseID, int MedicationCarePhaseID,
            int TreatmentResponseID, int TreatmentCarePhaseID, int InfectionResponseID, int InfectionCarePhaseID, int ProcedureResponseID,
            int ProcedureCarePhaseID, int MonitoringResponseID, int ResuscitationResponseID, int OthertypeResponseID, int OthertypeCarePhaseID, int AvoidabilityScoreID,
            string Comments, string SIRIComments, bool ProblemOccured, bool ReviewCompleted, int SpecialityID, int? id, int userID, bool IsFinish)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSJR2ProblemType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@AssessmentResponseID", AssessmentResponseID);
                    dbCommand.Parameters.AddWithValue("@AssessmentCarePhaseID", AssessmentCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@MedicationResponseID", MedicationResponseID);
                    dbCommand.Parameters.AddWithValue("@MedicationCarePhaseID", MedicationCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@TreatmentResponseID", TreatmentResponseID);
                    dbCommand.Parameters.AddWithValue("@TreatmentCarePhaseID", TreatmentCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@InfectionResponseID", InfectionResponseID);
                    dbCommand.Parameters.AddWithValue("@InfectionCarePhaseID", InfectionCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@ProcedureResponseID", ProcedureResponseID);
                    dbCommand.Parameters.AddWithValue("@ProcedureCarePhaseID", ProcedureCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@MonitoringResponseID", MonitoringResponseID);
                    dbCommand.Parameters.AddWithValue("@ResuscitationResponseID", ResuscitationResponseID);
                    dbCommand.Parameters.AddWithValue("@OthertypeResponseID", OthertypeResponseID);
                    dbCommand.Parameters.AddWithValue("@OthertypeCarePhaseID", OthertypeCarePhaseID);
                    dbCommand.Parameters.AddWithValue("@AvoidabilityScoreID", AvoidabilityScoreID);
                    dbCommand.Parameters.AddWithValue("@Comments", Comments);
                    dbCommand.Parameters.AddWithValue("@ProblemOccured", ProblemOccured);
                    dbCommand.Parameters.AddWithValue("@ReviewCompleted", ReviewCompleted);
                    dbCommand.Parameters.AddWithValue("@SpecialityID", SpecialityID);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@IsFinished", IsFinish);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSJR2ProblemType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdatePositiveFeedback(bool isFormCompleted, bool isComplementsFedBack, string Comments, int FBTypeID, int? id, int Userid)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdatePositiveFeedbackData", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@FormCompleted", isFormCompleted);
                    dbCommand.Parameters.AddWithValue("@ComplementsFedBack", isComplementsFedBack);
                    dbCommand.Parameters.AddWithValue("@Comments", Comments);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@FBTypeID", FBTypeID);
                    dbCommand.Parameters.AddWithValue("@UserId", Userid);

                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdatePositiveFeedback", System.DateTime.Now, Userid);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Update SJR Assessment Triage Details for a particular patient ID
        /// </summary>
        /// <param name="isPaediatricPatient">bool</param>
        /// <param name="isLearningDisabilityPatient">bool</param>
        /// <param name="isMentalillnessPatient">bool</param>
        /// <param name="isElectiveAdmission">bool</param>
        /// <param name="isNoKConcernsDeath">bool</param>
        /// <param name="isOtherConcern">bool</param>
        /// <param name="isFullSJRRequired">bool</param>
        /// <param name="otherConcernDetails">string</param>
        /// <param name="specialityID">int</param>
        /// <param name="id">int</param>
        /// <returns>int</returns>
        public int UpdateSJRAssessmentTriage(bool isPaediatricPatient, bool isLearningDisabilityPatient, bool isMentalillnessPatient, bool isElectiveAdmission, bool isNoKConcernsDeath, bool isDeathChemo, bool isOtherConcern,
            bool isFullSJRRequired, string otherConcernDetails, int specialityID, int? id, string comments, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSJRAssessmentTriage", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PaediatricPatient", isPaediatricPatient);
                    dbCommand.Parameters.AddWithValue("@LearningDisabilityPatient", isLearningDisabilityPatient);
                    dbCommand.Parameters.AddWithValue("@MentalillnessPatient", isMentalillnessPatient);
                    dbCommand.Parameters.AddWithValue("@ElectiveAdmission", isElectiveAdmission);
                    dbCommand.Parameters.AddWithValue("@NoKConcernsDeath", isNoKConcernsDeath);
                    dbCommand.Parameters.AddWithValue("@DeathChemo", isDeathChemo);
                    dbCommand.Parameters.AddWithValue("@OtherConcern", isOtherConcern);
                    dbCommand.Parameters.AddWithValue("@FullSJRRequired", isFullSJRRequired);
                    dbCommand.Parameters.AddWithValue("@otherConcernDetails", otherConcernDetails);
                    dbCommand.Parameters.AddWithValue("@specialityID", specialityID);
                    dbCommand.Parameters.AddWithValue("@Comments", comments);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSJRAssessmentTriage", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Update other referrals based on particular patient ID
        /// </summary>
        /// <param name="isPatientSafetySIRI">bool</param>
        /// <param name="isChildDeathCoordinator">bool</param>
        /// <param name="isLearningDisabilityNurse">bool</param>
        /// <param name="isHeadOfCompliance">bool</param>
        /// <param name="isPALsComplaints">bool</param>
        /// <param name="isWardTeam">bool</param>
        /// <param name="isOther">bool</param>
        /// <param name="PatientSafetySIRIReason">string</param>
        /// <param name="HeadOfComplianceReason">string</param>
        /// <param name="PALsComplaintsReason">string</param>
        /// <param name="WardTeamReason">string</param>
        /// <param name="OtherReason">string</param>
        /// <param name="specialityID">int</param>
        /// <param name="id">int</param>
        /// <returns></returns>
        public int UpdateOtherReferrals(bool isPatientSafetySIRI, bool isChildDeathCoordinator, bool isLearningDisabilityNurse, bool isHeadOfCompliance, bool isPALsComplaints, bool isWardTeam,
            bool isOther, string PatientSafetySIRIReason, string HeadOfComplianceReason, string PALsComplaintsReason, string WardTeamReason, string OtherReason, bool isSafeGuard, int? id, int UserID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateOtherReferrals", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@PatientSafetySIRI", isPatientSafetySIRI);
                    dbCommand.Parameters.AddWithValue("@ChildDeathCoordinator", isChildDeathCoordinator);
                    dbCommand.Parameters.AddWithValue("@LearningDisabilityNurse", isLearningDisabilityNurse);
                    dbCommand.Parameters.AddWithValue("@HeadOfCompliance", isHeadOfCompliance);
                    dbCommand.Parameters.AddWithValue("@PALsComplaints", isPALsComplaints);
                    dbCommand.Parameters.AddWithValue("@WardTeam", isWardTeam);
                    dbCommand.Parameters.AddWithValue("@Other", isOther);
                    dbCommand.Parameters.AddWithValue("@PatientSafetySIRIReason", PatientSafetySIRIReason);
                    dbCommand.Parameters.AddWithValue("@HeadOfComplianceReason", HeadOfComplianceReason);
                    dbCommand.Parameters.AddWithValue("@PALsComplaintsReason", PALsComplaintsReason);
                    dbCommand.Parameters.AddWithValue("@WardTeamReason", WardTeamReason);
                    dbCommand.Parameters.AddWithValue("@OtherReason", OtherReason);
                    dbCommand.Parameters.AddWithValue("@SafeGuard", isSafeGuard);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", UserID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateOtherReferrals", System.DateTime.Now, UserID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public bool UpdateDeclaration(bool isDeclaration, int userID, string CreatedDate, string Office, int? id)
        {
            bool retVal = false;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dbReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_UpdateDeclaration", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Declaration", isDeclaration);
                    //dbCommand.Parameters.AddWithValue("@CreatedBy", CreatedBy);
                    //dbCommand.Parameters.AddWithValue("@CreatedDate", CreatedDate);
                    dbCommand.Parameters.AddWithValue("@Office", Office);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    //retVal = dbCommand.ExecuteNonQuery();
                    dbReader = dbCommand.ExecuteReader();
                    while (dbReader.Read())
                    {
                        retVal = Convert.ToBoolean(dbReader["IsAllForm"]);  // false if All form is not submitted and True if all form has been submitted
                    }

                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateDeclaration", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCommand = null;
                }
            }
            return retVal;
        }

        /// <summary>
        /// Get Other referral tab details for a particular patient ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsOtherReferralModel</returns>
        public clsOtherReferralModel GetOtherReferrals(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsOtherReferralModel otherReferralModel = new clsOtherReferralModel();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetOtherReferrals", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        otherReferralModel.Patient_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        otherReferralModel.PatientID = Convert.ToString(dbReader["PatientID"]);
                        otherReferralModel.PatientSafetySIRI = Convert.ToBoolean(dbReader["PatientSafetySIRI"]);
                        otherReferralModel.PatientSafetySIRIReason = Convert.ToString(dbReader["PatientSafetySIRIReason"]);
                        otherReferralModel.ChildDeathCoordinator = Convert.ToBoolean(dbReader["ChildDeathCoordinator"]);
                        otherReferralModel.LearningDisabilityNurse = Convert.ToBoolean(dbReader["LearningDisabilityNurse"]);
                        otherReferralModel.HeadOfCompliance = Convert.ToBoolean(dbReader["HeadOfCompliance"]);
                        otherReferralModel.HeadOfComplianceReason = Convert.ToString(dbReader["HeadOfComplianceReason"]);
                        otherReferralModel.PALsComplaints = Convert.ToBoolean(dbReader["PALsComplaints"]);
                        otherReferralModel.PALsComplaintsReason = Convert.ToString(dbReader["PALsComplaintsReason"]);
                        otherReferralModel.WardTeam = Convert.ToBoolean(dbReader["WardTeam"]);
                        otherReferralModel.WardTeamReason = Convert.ToString(dbReader["WardTeamReason"]);
                        otherReferralModel.Other = Convert.ToBoolean(dbReader["Other"]);
                        otherReferralModel.OtherReason = Convert.ToString(dbReader["OtherReason"]);
                        otherReferralModel.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                        otherReferralModel.SafeGuardTeamNotified = Convert.ToBoolean(dbReader["SafeGuard"]);
                        //if (!string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                        //    otherReferralModel.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        //else
                        //    otherReferralModel.DOB = "Pending";
                        if (!string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            otherReferralModel.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        else
                            otherReferralModel.MedTriage = 2;
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetOtherReferrals", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (otherReferralModel.Patient_ID == 0 || otherReferralModel.Patient_ID == null) otherReferralModel.Patient_ID = Convert.ToInt32(id);
            if (otherReferralModel.CreatedBy == null) otherReferralModel.CreatedBy = "";
            return otherReferralModel;
        }

        /// <summary>
        /// Get Other referral tab details for a particular patient ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsOtherReferralModel</returns>
        public clsDeclarationModel GetDeclaration(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsDeclarationModel declaration = new clsDeclarationModel();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMEDeclaration", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        declaration.Patient_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        declaration.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["Declaration"].ToString()))
                            declaration.Declaration = false;
                        else
                            declaration.Declaration = Convert.ToBoolean(dbReader["Declaration"]);
                        if (string.IsNullOrEmpty(dbReader["CreatedBy"].ToString()))
                            declaration.CreatedBy = "";
                        else
                            declaration.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                        if (string.IsNullOrEmpty(dbReader["CreatedDate"].ToString()))
                            declaration.CreatedDate = "";
                        else
                            declaration.CreatedDate = Convert.ToDateTime(dbReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        //if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                        //    declaration.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        //else
                        //    declaration.DOB = "Pending";
                        if (!string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            declaration.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        else
                            declaration.MedTriage = 2;
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetDeclaration", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (declaration.Patient_ID == 0 || declaration.Patient_ID == null) declaration.Patient_ID = Convert.ToInt32(id);
            if (declaration.CreatedBy == null) declaration.CreatedBy = "";
            return declaration;
        }

        /// <summary>
        /// Get medical examiner decision tab details for a particular ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsMedicalExaminerDecision</returns>
        public clsMedicalExaminerDecision GetMedicalExaminerDecision(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsMedicalExaminerDecision medicalExaminerDecision = new clsMedicalExaminerDecision();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMedicalExaminerDecision", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        medicalExaminerDecision.ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        medicalExaminerDecision.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["MCCDissue"].ToString()))
                            medicalExaminerDecision.MCCDissue = false;
                        else
                            medicalExaminerDecision.MCCDissue = Convert.ToBoolean(dbReader["MCCDissue"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerReferral"].ToString()))
                            medicalExaminerDecision.CoronerReferral = false;
                        else
                            medicalExaminerDecision.CoronerReferral = Convert.ToBoolean(dbReader["CoronerReferral"]);
                        if (string.IsNullOrEmpty(dbReader["HospitalPostMortem"].ToString()))
                            medicalExaminerDecision.HospitalPostMortem = false;
                        else
                            medicalExaminerDecision.HospitalPostMortem = Convert.ToBoolean(dbReader["HospitalPostMortem"]);
                        if (string.IsNullOrEmpty(dbReader["ReferralReason"].ToString()))
                            medicalExaminerDecision.CoronerReferralReason = "";
                        else
                            medicalExaminerDecision.CoronerReferralReason = Convert.ToString(dbReader["ReferralReason"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath1"].ToString()))
                            medicalExaminerDecision.CauseOfDeath1 = "";
                        else
                            medicalExaminerDecision.CauseOfDeath1 = Convert.ToString(dbReader["CauseOfDeath1"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath2"].ToString()))
                            medicalExaminerDecision.CauseOfDeath2 = "";
                        else
                            medicalExaminerDecision.CauseOfDeath2 = Convert.ToString(dbReader["CauseOfDeath2"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath3"].ToString()))
                            medicalExaminerDecision.CauseOfDeath3 = "";
                        else
                            medicalExaminerDecision.CauseOfDeath3 = Convert.ToString(dbReader["CauseOfDeath3"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath4"].ToString()))
                            medicalExaminerDecision.CauseOfDeath4 = "";
                        else
                            medicalExaminerDecision.CauseOfDeath4 = Convert.ToString(dbReader["CauseOfDeath4"]);
                        if (string.IsNullOrEmpty(dbReader["CornerReferralComplete"].ToString()))
                            medicalExaminerDecision.CornerReferralComplete = false;
                        else
                            medicalExaminerDecision.CornerReferralComplete = Convert.ToBoolean(dbReader["CornerReferralComplete"]);

                        if (!string.IsNullOrEmpty(dbReader["CauseID"].ToString()))
                            medicalExaminerDecision.CauseID = Convert.ToInt32(dbReader["CauseID"]);
                        else
                            medicalExaminerDecision.CauseID = 0;
                        if (!string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            medicalExaminerDecision.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        else
                            medicalExaminerDecision.MedTriage = 2;
                        if (string.IsNullOrEmpty(dbReader["CreatedBy"].ToString()))
                            medicalExaminerDecision.CreatedBy = "";
                        else
                            medicalExaminerDecision.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMedicalExaminerDecision", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (medicalExaminerDecision.ID == 0 || medicalExaminerDecision.ID == null)
                medicalExaminerDecision.ID = Convert.ToInt32(id);
            if (medicalExaminerDecision.CreatedBy == null) medicalExaminerDecision.CreatedBy = "";
            return medicalExaminerDecision;
        }

        public clsMedicalExaminerDecision GetMEOOutcome(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsMedicalExaminerDecision medicalExaminerDecision = new clsMedicalExaminerDecision();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMEOOutcome", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        medicalExaminerDecision.ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        medicalExaminerDecision.PatientID = Convert.ToString(dbReader["PatientID"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath1Final"].ToString()))
                            medicalExaminerDecision.CauseOfDeath1Final = "";
                        else
                            medicalExaminerDecision.CauseOfDeath1Final = Convert.ToString(dbReader["CauseOfDeath1Final"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath2Final"].ToString()))
                            medicalExaminerDecision.CauseOfDeath2Final = "";
                        else
                            medicalExaminerDecision.CauseOfDeath2Final = Convert.ToString(dbReader["CauseOfDeath2Final"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath3Final"].ToString()))
                            medicalExaminerDecision.CauseOfDeath3Final = "";
                        else
                            medicalExaminerDecision.CauseOfDeath3Final = Convert.ToString(dbReader["CauseOfDeath3Final"]);
                        if (string.IsNullOrEmpty(dbReader["CauseOfDeath4Final"].ToString()))
                            medicalExaminerDecision.CauseOfDeath4Final = "";
                        else
                            medicalExaminerDecision.CauseOfDeath4Final = Convert.ToString(dbReader["CauseOfDeath4Final"]);
                        if (string.IsNullOrEmpty(dbReader["DeathCertificate"].ToString()))
                            medicalExaminerDecision.DeathCertificate = false;
                        else
                            medicalExaminerDecision.DeathCertificate = Convert.ToBoolean(dbReader["DeathCertificate"]);

                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionInquest"].ToString()))
                            medicalExaminerDecision.CoronerDecisionInquest = false;
                        else
                            medicalExaminerDecision.CoronerDecisionInquest = Convert.ToBoolean(dbReader["CoronerDecisionInquest"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecision100A"].ToString()))
                            medicalExaminerDecision.CoronerDecision100A = false;
                        else
                            medicalExaminerDecision.CoronerDecision100A = Convert.ToBoolean(dbReader["CoronerDecision100A"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionGPissue"].ToString()))
                            medicalExaminerDecision.CoronerDecisionGPissue = false;
                        else
                            medicalExaminerDecision.CoronerDecisionGPissue = Convert.ToBoolean(dbReader["CoronerDecisionGPissue"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionForensicPM"].ToString()))
                            medicalExaminerDecision.CoronerDecisionForensicPM = false;
                        else
                            medicalExaminerDecision.CoronerDecisionForensicPM = Convert.ToBoolean(dbReader["CoronerDecisionForensicPM"]);
                        if (string.IsNullOrEmpty(dbReader["CoronerDecisionPostMortem"].ToString()))
                            medicalExaminerDecision.CoronerDecisionPostMortem = false;
                        else
                            medicalExaminerDecision.CoronerDecisionPostMortem = Convert.ToBoolean(dbReader["CoronerDecisionPostMortem"]);
                        if (string.IsNullOrEmpty(dbReader["DeathCertificateDate"].ToString()))
                            medicalExaminerDecision.DeathCertificateDate = "";
                        else
                            medicalExaminerDecision.DeathCertificateDate = Convert.ToDateTime(dbReader["DeathCertificateDate"]).ToString("dd/MM/yyyy");
                        if (string.IsNullOrEmpty(dbReader["DeathCertificateTime"].ToString()))
                            medicalExaminerDecision.DeathCertificateTime = "00:00";
                        else
                            medicalExaminerDecision.DeathCertificateTime = Convert.ToString(dbReader["DeathCertificateTime"]);
                        if (string.IsNullOrEmpty(dbReader["TimeType"].ToString()))
                            medicalExaminerDecision.TimeType = "";
                        else
                            medicalExaminerDecision.TimeType = Convert.ToString(dbReader["TimeType"]);
                        if (!string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            medicalExaminerDecision.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        else
                            medicalExaminerDecision.MedTriage = 2;

                        if (!string.IsNullOrEmpty(dbReader["MEOReviewCompleted"].ToString()))
                            medicalExaminerDecision.MEOReviewCompleted = Convert.ToBoolean(dbReader["MEOReviewCompleted"]);
                        else
                            medicalExaminerDecision.MEOReviewCompleted = false;
                        if (!string.IsNullOrEmpty(dbReader["MEOReviewCreatedBy"].ToString()))
                            medicalExaminerDecision.MEOReviewCreatedBy = Convert.ToString(dbReader["MEOReviewCreatedBy"]);
                        else
                            medicalExaminerDecision.MEOReviewCreatedBy = "";
                        if (!string.IsNullOrEmpty(dbReader["MEOReviewCreatedDate"].ToString()))
                            medicalExaminerDecision.MEOReviewCreatedDate = Convert.ToDateTime(dbReader["MEOReviewCreatedDate"]).ToString("dd/MM/yyyy");
                        else
                            medicalExaminerDecision.MEOReviewCreatedDate = "";
                        medicalExaminerDecision.NoFurtherAction = Convert.ToBoolean(dbReader["CoronerDecisionNFAction"]);
                        if (!string.IsNullOrEmpty(dbReader["FuneralArrangement"].ToString()))
                            medicalExaminerDecision.FuneralArrangement = Convert.ToInt32(dbReader["FuneralArrangement"]);
                        else
                            medicalExaminerDecision.FuneralArrangement = 0;
                        if (string.IsNullOrEmpty(dbReader["CreatedBy"].ToString()))
                            medicalExaminerDecision.CreatedBy = "";
                        else
                            medicalExaminerDecision.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMEOOutcome", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (medicalExaminerDecision.ID == 0 || medicalExaminerDecision.ID == null)
                medicalExaminerDecision.ID = Convert.ToInt32(id);
            return medicalExaminerDecision;
        }

        public clsQualityReview GetQualityReviewByID(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsQualityReview clsQReview = new clsQualityReview();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetQualityReviewByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@ID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@ID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        clsQReview.sourceReview = Convert.ToString(dbReader["sourceReview"]);
                        clsQReview.ReviewDate = Convert.ToDateTime(dbReader["ReviewDate"]).Date;
                        clsQReview.ReviewerName = Convert.ToString(dbReader["ReviewerName"]);
                        clsQReview.Spell = Convert.ToString(dbReader["Spell"]);
                        clsQReview.Summary = Convert.ToString(dbReader["Summary"]);
                        clsQReview.isCodingIssue = Convert.ToString(dbReader["isCodingIssue"]);
                        clsQReview.isTimingIssue = Convert.ToString(dbReader["isTimingIssue"]);
                        clsQReview.isDataSysIssue = Convert.ToString(dbReader["isDataSysIssue"]);
                        clsQReview.isClinicalReview = Convert.ToString(dbReader["isClinicalReview"]);
                        clsQReview.isProcessReview = Convert.ToString(dbReader["isProcessReview"]);
                        clsQReview.Recom = Convert.ToString(dbReader["Recom"]);
                        clsQReview.isReviewCompleted = Convert.ToBoolean(dbReader["isReviewCompleted"]);
                        clsQReview.Patient_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        clsQReview.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                        clsQReview.CreatedDate = Convert.ToDateTime(dbReader["CreatedDate"]).ToString("dd/MM/yyyy");
                        //clsQReview.UpdatedBy = Convert.ToString(dbReader["UpdatedBy"]);
                        // clsQReview.UpdatedDate = Convert.ToDateTime(dbReader["UpdatedDate"]).ToString("dd/MM/yyyy");
                        //clsQReview.SpecialityID = Convert.ToInt32(dbReader["SpecialityID"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetQualityReviewByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            //if (medicalExaminerDecision.ID == 0 || medicalExaminerDecision.ID == null)
            //    medicalExaminerDecision.ID = Convert.ToInt32(id);
            return clsQReview;
        }

        /// <summary>
        /// Get SJR assesment triage details for a particular patient ID
        /// </summary>
        /// <param name="id">int</param>
        /// <returns>clsSJRReview</returns>
        public clsSJRReview GetSJRAssesmentTraige(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsSJRReview sJRReview = new clsSJRReview();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetSJRAssessmentTriage", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        sJRReview.SJRReview_ID = Convert.ToInt32(dbReader["SJRReview_ID"]);
                        sJRReview.Patient_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        sJRReview.PatientID = Convert.ToString(dbReader["PatientID"]);
                        sJRReview.PaediatricPatient = Convert.ToBoolean(dbReader["PaediatricPatient"]);
                        sJRReview.LearningDisabilityPatient = Convert.ToBoolean(dbReader["LearningDisabilityPatient"]);
                        sJRReview.MentalillnessPatient = Convert.ToBoolean(dbReader["MentalillnessPatient"]);
                        sJRReview.ElectiveAdmission = Convert.ToBoolean(dbReader["ElectiveAdmission"]);
                        sJRReview.NoKConcernsDeath = Convert.ToBoolean(dbReader["NoKConcernsDeath"]);
                        sJRReview.OtherConcern = Convert.ToBoolean(dbReader["OtherConcern"]);
                        sJRReview.OtherConcernDetails = Convert.ToString(dbReader["OtherConcernDetails"]);
                        sJRReview.Comments = Convert.ToString(dbReader["Comments"]);
                        sJRReview.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                        sJRReview.FullSJRRequired = Convert.ToBoolean(dbReader["FullSJRRequired"]);
                        sJRReview.SpecialityID = Convert.ToInt32(dbReader["SpecialityID"]);
                        sJRReview.DeathChemo = Convert.ToBoolean(dbReader["DeathChemo"]);
                        //if (!string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                        //    sJRReview.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        //else
                        //    sJRReview.DOB = "Pending";
                        if (!string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            sJRReview.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        else
                            sJRReview.MedTriage = 2;
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSJRAssesmentTraige", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (sJRReview.Patient_ID == 0) sJRReview.Patient_ID = Convert.ToInt32(id);
            if (sJRReview.SJRReview_ID == 0)
            {
                sJRReview.IsFormStarted = false;
            }
            else
            {
                sJRReview.IsFormStarted = true;
            }
            if (sJRReview.CreatedBy == null) sJRReview.CreatedBy = "";
            return sJRReview;
        }

        /// <summary>
        /// Get medical examiner review details for patient ID
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public clsMedicalExaminerReview GetMedicalExaminerReview(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            clsMedicalExaminerReview medicalExaminerReview = new clsMedicalExaminerReview();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMedicalExamierReview", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        medicalExaminerReview.Patient_ID = Convert.ToInt32(dbReader["Patient_ID"]);
                        medicalExaminerReview.PatientID = Convert.ToString(dbReader["PatientID"]);
                        medicalExaminerReview.ME_ID = Convert.ToInt32(dbReader["ME_ID"]);
                        medicalExaminerReview.QAP_Discussion = Convert.ToBoolean(dbReader["QAP_Discussion"]);
                        medicalExaminerReview.Notes_Review = Convert.ToBoolean(dbReader["Notes_Review"]);
                        medicalExaminerReview.Nok_Discussion = Convert.ToBoolean(dbReader["Nok_Discussion"]);
                        if (string.IsNullOrEmpty(dbReader["QAPName"].ToString()))
                            medicalExaminerReview.QAPName = "";
                        else
                            medicalExaminerReview.QAPName = Convert.ToString(dbReader["QAPName"]);
                        if (!string.IsNullOrEmpty(dbReader["CommentCount"].ToString()))
                            medicalExaminerReview.CommentCount = Convert.ToInt32(dbReader["CommentCount"]);
                        else
                            medicalExaminerReview.CommentCount = 0;
                        if (!string.IsNullOrEmpty(dbReader["MedTriage"].ToString()))
                            medicalExaminerReview.MedTriage = Convert.ToInt32(dbReader["MedTriage"]);
                        else
                            medicalExaminerReview.MedTriage = 2;
                        if (string.IsNullOrEmpty(dbReader["DOB"].ToString()))
                            medicalExaminerReview.DOB = "Pending";
                        else
                            medicalExaminerReview.DOB = Convert.ToDateTime(dbReader["DOB"]).ToString("dd/MM/yyyy");
                        medicalExaminerReview.Comments = "";
                        medicalExaminerReview.CreatedBy = Convert.ToString(dbReader["CreatedBy"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMedicalExaminerReview", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            if (medicalExaminerReview.Patient_ID == 0) medicalExaminerReview.Patient_ID = Convert.ToInt32(id);
            if (medicalExaminerReview.CreatedBy == null) medicalExaminerReview.CreatedBy = "";
            return medicalExaminerReview;
        }

        public int GetMedTriageByPatientID(int? id, int userID)
        {
            SqlDataReader dbReader = null;
            int medtriage = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetMedtriageByPatientID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    if (id != null)
                        dbCmd.Parameters.AddWithValue("@PatientID", id);
                    else
                        dbCmd.Parameters.AddWithValue("@PatientID", null);

                    dbReader = dbCmd.ExecuteReader();

                    while (dbReader.Read())
                    {
                        medtriage = Convert.ToInt32(dbReader["MedTriage"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMedTriageByPatientID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return medtriage;
        }

        /// <summary>
        /// Get list of users in the system who are in Medical Examiner role.
        /// </summary>
        /// <returns>List<clsMedicalExaminers></returns>
        public List<clsMedicalExaminers> GetMedicalExaminers(int userID)
        {
            List<clsMedicalExaminers> medicalExaminers = new List<clsMedicalExaminers>();
            SqlDataReader dataReader = null;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_GetMedicalExaminers", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        clsMedicalExaminers medicalExaminer = new clsMedicalExaminers();
                        medicalExaminer.ID = Convert.ToInt32(dataReader["ID"]);
                        medicalExaminer.Email = Convert.ToString(dataReader["Email"]);
                        medicalExaminer.Code = Convert.ToString(dataReader["Code"]);
                        medicalExaminer.Name = Convert.ToString(dataReader["Name"]);
                        medicalExaminer.UserID = Convert.ToString(dataReader["UserID"]);
                        medicalExaminer.Speciality = Convert.ToString(dataReader["Speciality"]);
                        medicalExaminer.Role = Convert.ToString(dataReader["Role"]);
                        medicalExaminers.Add(medicalExaminer);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetMedicalExaminers", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return medicalExaminers;
        }

        /// <summary>
        /// Get All coroner referral reasons from the database
        /// </summary>
        /// <returns>List<clsCoronerReferralReason></returns>
        public List<ReasonGroups> GetReasonGroups(int userID)
        {
            List<ReasonGroups> reasonGroups = new List<ReasonGroups>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_ReasonGroups", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;

                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        ReasonGroups reasonGroup = new ReasonGroups();
                        reasonGroup.GroupID = Convert.ToInt32(dataReader["GroupID"]);
                        reasonGroup.GroupName = Convert.ToString(dataReader["GroupName"]);
                        reasonGroups.Add(reasonGroup);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetReasonGroups", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return reasonGroups;
        }

        /// <summary>
        /// Get all referral reasons based on reason group ID
        /// </summary>
        /// <param name="groupid">int</param>
        /// <returns>List<clsCoronerReferralReason></returns>
        public List<clsCoronerReferralReason> GetCoronerReferralReasons(int? groupid, int userID)
        {
            List<clsCoronerReferralReason> reasonNames = new List<clsCoronerReferralReason>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_GetCoronerReferrals", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    if (groupid != null)
                        dbCommand.Parameters.AddWithValue("@GroupID", groupid);
                    else
                        dbCommand.Parameters.AddWithValue("@GroupID", 0);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        clsCoronerReferralReason reasonName = new clsCoronerReferralReason();
                        reasonName.Reason_ID = Convert.ToInt32(dataReader["Reason_ID"]);
                        reasonName.ReasonName = Convert.ToString(dataReader["ReasonName"]);
                        reasonNames.Add(reasonName);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCoronerReferralReasons", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return reasonNames;
        }

        /// <summary>
        /// Checks if the user exists
        /// </summary>
        /// <param name="UserName">user alias</param>
        /// <returns>0 if user does not exit , 1 if user exists</returns>
        public AppUsers ValidateUser(string userName, string password)
        {
            AppUsers user = new AppUsers();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dataReader = null;
                SqlCommand dbCommand = new SqlCommand("usp_ValidateUser", connection);
                connection.Open();
                try
                {

                    dbCommand.CommandType = CommandType.StoredProcedure;
                    if (userName != null)
                        dbCommand.Parameters.AddWithValue("@UserID", userName);
                    else
                        dbCommand.Parameters.AddWithValue("@UserID", "");
                    dbCommand.Parameters.AddWithValue("@Password", password);
                    dataReader = dbCommand.ExecuteReader();

                    while (dataReader.Read())
                    {
                        user.IsFound = Convert.ToBoolean(dataReader["IsFound"]);
                        user.FirstName = Convert.ToString(dataReader["FirstName"]);
                        user.LastName = Convert.ToString(dataReader["LastName"]);
                        user.ID = Convert.ToInt32(dataReader["ID"]);
                        user.Role = Convert.ToString(dataReader["Role"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "ValidateUser", System.DateTime.Now, 0);
                }
                finally
                {
                    if (!dataReader.IsClosed)
                        dataReader.Close();
                    dbCommand = null;
                }
            }
            return user;
        }

        /// <summary>
        /// Log exception to exceptionlog table
        /// </summary>
        /// <param name="message">string</param>
        /// <param name="className">string</param>
        /// <param name="methodName">string</param>
        /// <param name="createdDate">DateTime</param>
        public void LogException(string message, string className, string methodName, DateTime createdDate, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_InsertLogException", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Message", message);
                    dbCommand.Parameters.AddWithValue("@ClassName", className);
                    dbCommand.Parameters.AddWithValue("@MethodName", methodName);
                    dbCommand.Parameters.AddWithValue("@CreatedDate", createdDate);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    //LogException(ex.Message, this.ToString(), "LogException", System.DateTime.Now);
                }
                finally
                {
                    dbCommand = null;
                }
            }
        }

        public int UpdateWebsiteSetting(string emailID, string password, string domain, string smtpserver, int port, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateWebsiteSetting", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@EmailID", emailID);
                    dbCommand.Parameters.AddWithValue("@Password", password);
                    dbCommand.Parameters.AddWithValue("@Domain", domain);
                    dbCommand.Parameters.AddWithValue("@SMTPServer", smtpserver);
                    dbCommand.Parameters.AddWithValue("@Port", port);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateWebsiteSetting", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreateFeedbackType(string feedbacktype, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddFeedbackType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@FeedbackType", feedbacktype);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateFeedbackType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateFeedbackType(string feedbacktype, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateFeedbackType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@FeedbackType", feedbacktype);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateFeedbackType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public CommentType GetFeedbackTypeByID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            CommentType feedback = new CommentType();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetFeedbackTypeByID", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@FeedbackTypeID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.Type = Convert.ToString(dbReader["Type"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetFeedbackTypeByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback;
        }

        public AppUsers GetUserByID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            AppUsers feedback = new AppUsers();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetUserByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@UserID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.ID = Convert.ToInt32(dbReader["ID"]);
                        feedback.EmailID = Convert.ToString(dbReader["Email"]);
                        feedback.Role = Convert.ToString(dbReader["Role"]);
                        feedback.Code = Convert.ToString(dbReader["Code"]);
                        feedback.FirstName = Convert.ToString(dbReader["FirstName"]);
                        feedback.LastName = Convert.ToString(dbReader["LastName"]);
                        feedback.UserName = Convert.ToString(dbReader["UserName"]);
                        feedback.Speciality = Convert.ToString(dbReader["Speciality"]);
                        feedback.IsApproved = Convert.ToBoolean(dbReader["IsApproved"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetUserByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback;
        }

        public List<AppUsers> GetUsersByRoleID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            List<AppUsers> feedbacks = new List<AppUsers>();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetUserByRoleID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@RoleID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        AppUsers feedback = new AppUsers();
                        feedback.ID = Convert.ToInt32(dbReader["ID"]);
                        feedback.EmailID = Convert.ToString(dbReader["Email"]);
                        feedback.Role = Convert.ToString(dbReader["Role"]);
                        feedback.Code = Convert.ToString(dbReader["Code"]);
                        feedback.FirstName = Convert.ToString(dbReader["FirstName"]);
                        feedback.LastName = Convert.ToString(dbReader["LastName"]);
                        feedback.UserName = Convert.ToString(dbReader["UserName"]);
                        feedback.Speciality = Convert.ToString(dbReader["Speciality"]);
                        if (!string.IsNullOrEmpty(Convert.ToString(dbReader["IsApproved"])))
                            feedback.IsApproved = Convert.ToBoolean(dbReader["IsApproved"]);
                        else
                            feedback.IsApproved = false;
                        feedbacks.Add(feedback);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetUsersByRoleID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedbacks;
        }

        public string GetDomainName(int userID)
        {
            SqlDataReader dbReader = null;
            string domainname = "";
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetDomainName", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        if (dbReader["DomainName"] != null)
                            domainname = Convert.ToString(dbReader["DomainName"]);
                        else
                            domainname = "";
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetDomainName", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return domainname;
        }

        public int DeleteFeedbackType(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteFeedbackType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteFeedbackType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeleteWard(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteWard", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteWard", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeletePermission(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeletePermission", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeletePermission", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeleteConsultant(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteConsultant", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteConsultant", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeleteUser(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteUser", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteUser", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreateCommentType(string feedbacktype, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddCommentType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@CommentType", feedbacktype);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateCommentType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreateNotificationSettings(int notificationID, int roleID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddNotificationSettings", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@NotificationID", notificationID);
                    dbCommand.Parameters.AddWithValue("@RoleID", roleID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateNotificationSettings", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreateRole(string feedbacktype, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddRole", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Role", feedbacktype);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateRole", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreateWard(string wardcode, string wardname, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddWard", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@WardCode", wardcode);
                    dbCommand.Parameters.AddWithValue("@WardName", wardname);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateWard", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreatePermission(int moduleid, int roleid, bool IsFullAccess, bool IsReadOnly, bool NoAccess, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddPermission", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ModuleID", moduleid);
                    dbCommand.Parameters.AddWithValue("@RoleID", roleid);
                    dbCommand.Parameters.AddWithValue("@IsFullAccess", IsFullAccess);
                    dbCommand.Parameters.AddWithValue("@IsReadOnly", IsReadOnly);
                    dbCommand.Parameters.AddWithValue("@NoAccess", NoAccess);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreatePermission", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int IsEmailExists(string email, int userID)
        {
            SqlDataReader dbReader = null;
            Consultant feedback = new Consultant();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCORSConsultantByEMail", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@Email", email);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.ConsID = Convert.ToInt32(dbReader["ID"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "IsEmailExists", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback.ConsID;
        }

        public int IsUserNameExists(string username, int userID)
        {
            Users feedback = new Users();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlDataReader dbReader = null;
                SqlCommand dbCmd = new SqlCommand("usp_GetCORSConsultantByUserID", connection);
                connection.Open();

                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@UserName", username);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.ID = Convert.ToInt32(dbReader["ID"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "IsUserNameExists", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback.ID;
        }

        public int CreateConsultant(string gmccode, string firstname, string lastname, string emailID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddConsultant", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@GMCCode", gmccode);
                    dbCommand.Parameters.AddWithValue("@FirstName", firstname);
                    dbCommand.Parameters.AddWithValue("@LastName", lastname);
                    dbCommand.Parameters.AddWithValue("@EmailID", emailID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateConsultant", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int CreateSpeciality(string specialitycode, string specialityname, string caregroup, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_AddSpeciality", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@SpecialityCode", specialitycode);
                    dbCommand.Parameters.AddWithValue("@SpecialityName", specialityname);
                    dbCommand.Parameters.AddWithValue("@CareGroup", caregroup);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "CreateSpeciality", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateCommentType(string feedbacktype, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateCommentType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@CommentType", feedbacktype);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateCommentType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateWard(string wardcode, string wardname, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateWard", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@WardCode", wardcode);
                    dbCommand.Parameters.AddWithValue("@WardName", wardname);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateWard", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateNotificationSettings(int notificationID, int roleID, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateNotificationSettings", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@NotificationID", notificationID);
                    dbCommand.Parameters.AddWithValue("@RoleID", roleID);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateNotificationSettings", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdatePermission(int moduleid, int roleid, bool IsFullAccess, bool IsReadOnly, bool NoAccess, int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdatePermission", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ModuleID", moduleid);
                    dbCommand.Parameters.AddWithValue("@RoleID", roleid);
                    dbCommand.Parameters.AddWithValue("@IsFullAccess", IsFullAccess);
                    dbCommand.Parameters.AddWithValue("@IsReadOnly", IsReadOnly);
                    dbCommand.Parameters.AddWithValue("@NoAccess", NoAccess);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdatePermission", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateConsultant(string gmccode, string firstname, string lastname, string emailID, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateConsultant", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@GMCCode", gmccode);
                    dbCommand.Parameters.AddWithValue("@FirstName", firstname);
                    dbCommand.Parameters.AddWithValue("@LastName", lastname);
                    dbCommand.Parameters.AddWithValue("@EmailID", emailID);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateConsultant", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateSpeciality(string specialitycode, string specialityname, string caregroup, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateSpeciality", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@SpecialityCode", specialitycode);
                    dbCommand.Parameters.AddWithValue("@SpecialityName", specialityname);
                    dbCommand.Parameters.AddWithValue("@CareGroup", caregroup);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateSpeciality", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateUser(int id, string email, string firstname, string lastname, string username, string code, string speciality, int role, bool isapproved, int userid)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateUser", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Email", email);
                    dbCommand.Parameters.AddWithValue("@FirstName", firstname);
                    dbCommand.Parameters.AddWithValue("@LastName", lastname);
                    dbCommand.Parameters.AddWithValue("@UserName", username);
                    dbCommand.Parameters.AddWithValue("@Code", code);
                    dbCommand.Parameters.AddWithValue("@Speciality", speciality);
                    dbCommand.Parameters.AddWithValue("@Role", role);
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@IsApproved", isapproved);
                    dbCommand.Parameters.AddWithValue("@UserID", userid);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateUser", System.DateTime.Now, userid);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdatePatientByID(int id, string patientid, string patientname, string spellnumber, string nhsnumber, string gender, DateTime dob, DateTime dateofadmission, DateTime timeofadmission, string dischargeward, DateTime dateofdeath, DateTime timeofdeath, string wardofdeath, string consultantname, string specialitycode, string admissiontype, string occupation, int patienttype, bool isEnabled, int userID )
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdatePatientByID", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    dbCommand.Parameters.AddWithValue("@PatientID", patientid);
                    dbCommand.Parameters.AddWithValue("@PatientName", patientname);
                    dbCommand.Parameters.AddWithValue("@SpellNumber", spellnumber);
                    dbCommand.Parameters.AddWithValue("@NHSNumber", nhsnumber);
                    dbCommand.Parameters.AddWithValue("@Gender", gender);
                    dbCommand.Parameters.AddWithValue("@DOB", dob);
                    dbCommand.Parameters.AddWithValue("@DateofAdmission", dateofadmission);
                    dbCommand.Parameters.AddWithValue("@TimeofAdmission", timeofadmission);
                    dbCommand.Parameters.AddWithValue("@DischargeWard", dischargeward);
                    dbCommand.Parameters.AddWithValue("@DateofDeath", dateofdeath);
                    dbCommand.Parameters.AddWithValue("@TimeofDeath", timeofdeath);
                    dbCommand.Parameters.AddWithValue("@WardofDeath", wardofdeath);
                    dbCommand.Parameters.AddWithValue("@DischargeConsultantName", consultantname);
                    dbCommand.Parameters.AddWithValue("@DischargeSpecialityCode", specialitycode);
                    dbCommand.Parameters.AddWithValue("@AdmissionType", admissiontype);

                    dbCommand.Parameters.AddWithValue("@Occupation", occupation);
                    dbCommand.Parameters.AddWithValue("@PatientTypeActual", patienttype);
                    dbCommand.Parameters.AddWithValue("@IsEnabled", isEnabled);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdatePatientByID", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int ApproveUser(int userID, int loginuserid)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_ApproveUser", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    dbCommand.Parameters.AddWithValue("@LoginUserID", loginuserid);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "ApproveUser", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int UpdateRole(string feedbacktype, int ID, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_UpdateRole", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@Role", feedbacktype);
                    dbCommand.Parameters.AddWithValue("@ID", ID);
                    dbCommand.Parameters.AddWithValue("@UserID", userID);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "UpdateRole", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public CommentType GetCommentTypeByID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            CommentType feedback = new CommentType();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetCommentTypeByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@CommentTypeID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.Type = Convert.ToString(dbReader["Type"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetCommentTypeByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback;
        }

        public Roles GetRoleByID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            Roles feedback = new Roles();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetRoleByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@ID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.RoleName = Convert.ToString(dbReader["RoleName"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetRoleByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback;
        }

        public Wards GetWardByID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            Wards ward = new Wards();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetWardByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@ID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        ward.WardID = Convert.ToInt32(dbReader["WardID"]);
                        ward.WardCode = Convert.ToString(dbReader["WardCode"]);
                        ward.WardName = Convert.ToString(dbReader["WardName"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetWardByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return ward;
        }

        public RolePermission GetPermissionByID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            RolePermission ward = new RolePermission();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetPermissionByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@ID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        ward.ID = Convert.ToInt32(dbReader["ID"]);
                        ward.ModuleID = Convert.ToInt32(dbReader["ModuleID"]);
                        ward.RoleID = Convert.ToInt32(dbReader["RoleID"]);
                        ward.IsFullAccess = Convert.ToBoolean(dbReader["IsFullAccess"]);
                        ward.IsReadOnly = Convert.ToBoolean(dbReader["IsReadOnly"]);
                        ward.NoAccess = Convert.ToBoolean(dbReader["NoAccess"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetPermissionByID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return ward;
        }

        public Consultant GetClinicians(int id, int userID)
        {
            SqlDataReader dbReader = null;
            Consultant consultant = new Consultant();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetClinicians", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@ID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        consultant.ConsID = Convert.ToInt32(dbReader["ConsID"]);
                        consultant.GMCCode = Convert.ToString(dbReader["GMCCode"]);
                        consultant.FirstName = Convert.ToString(dbReader["FirstName"]);
                        consultant.LastName = Convert.ToString(dbReader["LastName"]);
                        consultant.EmailID = Convert.ToString(dbReader["EmailID"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetClinicians", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return consultant;
        }

        public Specialities GetSpecialitybyID(int id, int userID)
        {
            SqlDataReader dbReader = null;
            Specialities feedback = new Specialities();
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCmd = new SqlCommand("usp_GetSpecialityByID", connection);
                connection.Open();
                try
                {

                    dbCmd.CommandType = CommandType.StoredProcedure;
                    dbCmd.Parameters.AddWithValue("@SpecialityID", id);

                    dbReader = dbCmd.ExecuteReader();
                    while (dbReader.Read())
                    {
                        feedback.SpecialityCode = Convert.ToString(dbReader["SpecialityCode"]);
                        feedback.SpecialityName = Convert.ToString(dbReader["SpecialityName"]);
                        feedback.CareGroup = Convert.ToString(dbReader["CareGroup"]);
                    }
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "GetSpecialitybyID", System.DateTime.Now, userID);
                }
                finally
                {
                    if (!dbReader.IsClosed)
                        dbReader.Close();
                    dbCmd = null;
                }
            }
            return feedback;
        }

        public int DeleteCommentType(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteCommentType", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteCommentType", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeleteNotificationSettings(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteNotificationSettings", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteNotificationSettings", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeleteRole(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteRole", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteRole", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }

        public int DeleteSpeciality(int id, int userID)
        {
            int retVal = 0;
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                SqlCommand dbCommand = new SqlCommand("usp_DeleteSpeciality", connection);
                connection.Open();
                try
                {
                    dbCommand.CommandType = CommandType.StoredProcedure;
                    dbCommand.Parameters.AddWithValue("@ID", id);
                    retVal = dbCommand.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LogException(ex.Message, this.ToString(), "DeleteSpeciality", System.DateTime.Now, userID);
                }
                finally
                {
                    dbCommand = null;
                }
            }
            return retVal;
        }
    }
}
